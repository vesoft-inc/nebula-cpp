name: cpp_test

on:
  pull_request:
    types: [synchronize, reopened, labeled]
    branches:
      - master
      - 'v[0-9]+.*'
  schedule:
    - cron:  '0 18 * * *'


defaults:
  run:
    shell: bash

jobs:
  lint:
    name: lint
    if: ${{ contains(github.event.pull_request.labels.*.name, 'ready-for-testing') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: Cpplint
        run: |
          ln -snf $PWD/.linters/cpp/hooks/pre-commit.sh $PWD/.linters/cpp/pre-commit.sh
          .linters/cpp/pre-commit.sh $(git --no-pager diff --diff-filter=d --name-only HEAD^ HEAD)

  build:
    name: build
    needs: lint
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        os:
          - centos7
          - ubuntu1804
        compiler:
          - gcc-9.2
          - clang-9
        exclude:
          - os: centos7
            compiler: clang-9
    container:
      image: vesoft/nebula-dev:${{ matrix.os }}
      volumes:
        - /tmp/nebula-graph-client/${{ matrix.os }}-${{ matrix.compiler }}:/tmp/nebula-graph-client/nebula-graph/${{ matrix.os }}-${{ matrix.compiler }}
      options: --mount type=tmpfs,destination=/tmp/ccache/nebula-graph,tmpfs-size=1073741824 --cap-add=SYS_PTRACE
    steps:
      - uses: actions/checkout@v2
      - name: CMake
        run: |
          case ${{ matrix.compiler }} in
          gcc-*)
            case ${{ matrix.os }} in
            centos7)
              # build with Release type
              cmake \
                  -DCMAKE_CXX_COMPILER=$TOOLSET_CLANG_DIR/bin/g++ \
                  -DCMAKE_C_COMPILER=$TOOLSET_CLANG_DIR/bin/gcc \
                  -DCMAKE_BUILD_TYPE=Release \
                  -DENABLE_TESTING=on \
                  -DCMAKE_INSTALL_PREFIX=/usr/local/nebula \
                  -DDISABLE_CXX11_ABI=ON \
                  -B build
              ;;
            ubuntu1804)
              # build with Debug type
              cmake \
                  -DCMAKE_CXX_COMPILER=$TOOLSET_CLANG_DIR/bin/g++ \
                  -DCMAKE_C_COMPILER=$TOOLSET_CLANG_DIR/bin/gcc \
                  -DCMAKE_BUILD_TYPE=Debug \
                  -DENABLE_TESTING=on \
                  -DCMAKE_INSTALL_PREFIX=/usr/local/nebula \
                  -B build
              ;;
            esac
            ;;
          clang-*)
            # build with Sanitizer
            cmake \
                -DCMAKE_CXX_COMPILER=$TOOLSET_CLANG_DIR/bin/clang++ \
                -DCMAKE_C_COMPILER=$TOOLSET_CLANG_DIR/bin/clang \
                -DCMAKE_BUILD_TYPE=Debug \
                -DENABLE_ASAN=on \
                -DENABLE_TESTING=on \
                -DCMAKE_INSTALL_PREFIX=/usr/local/nebula \
                -B build
            ;;
          esac
      - name: Make
        run: cmake --build build/ -j $(nproc)
      - name: Nebula Server
        run: |
          sudo curl -sSL https://get.docker.com/ | sh
          pip3 install --upgrade pip
          pip3 install setuptools
          pip3 install docker-compose
          docker network ls
          mkdir tmp
          pushd tmp
          git clone -b external_network https://github.com/Shylock-Hg/nebula-docker-compose.git
          pushd nebula-docker-compose/
          sed -i "s/\bdocker_nebula-net\b/$(docker network ls | grep github_network | tr -s [:blank:] | cut -d ' ' -f 2)/g" docker-compose.yaml
          docker-compose up -d
          docker network ls
          sleep 10
          popd
          popd
      - name: CTest
        env:
          ASAN_OPTIONS: fast_unwind_on_malloc=1
        run: |
          pushd build
          ctest -j $(($(nproc)/2+1)) --timeout 400 --output-on-failure
          make install
          popd
        timeout-minutes: 4
      - name: Build example
        run: |
          case ${{ matrix.os }} in
          centos7)
            # install GCC4.8 by yum to build example
            yum -y update && yum -y install gcc gcc-c++
            pushd examples
            mkdir build
            cmake \
                -DCMAKE_CXX_COMPILER=/usr/bin/g++ \
                -DCMAKE_C_COMPILER=/usr/bin/gcc \
                -DDISABLE_CXX11_ABI=ON \
                -B build
            cmake --build build/ -j $(nproc)
            LD_LIBRARY_PATH=/usr/local/nebula/lib64:/usr/local/nebula/lib:$LD_LIBRARY_PATH ./build/session_example graphd:9669
            popd
            ;;
          *)
            pushd examples
            mkdir build
            cmake -B build
            cmake --build build/ -j $(nproc)
            # if the example use the g++ under /opt/vesoft/toolset, need to replace the low version libstdc++.so
            rm /usr/lib/x86_64-linux-gnu/libstdc++.so.6
            ln -s /opt/vesoft/toolset/clang/9.0.0/lib64/libstdc++.so /usr/lib/x86_64-linux-gnu/libstdc++.so.6
            LD_LIBRARY_PATH=/usr/local/nebula/lib64:/usr/local/nebula/lib:$LD_LIBRARY_PATH ./build/session_example graphd:9669
            popd
            ;;
          esac
      - name: Cleanup
        if: ${{ always() }}
        run: rm -rf build modules
