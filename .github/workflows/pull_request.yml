name: cpp_test

on:
  pull_request:
    types: [synchronize, reopened, labeled]
    branches:
      - master
      - 'v[0-9]+.*'
  schedule:
    - cron:  '0 18 * * *'


defaults:
  run:
    shell: bash

jobs:
  lint:
    name: lint
    if: ${{ contains(github.event.pull_request.labels.*.name, 'ready-for-testing') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: Check License Header
        uses: apache/skywalking-eyes@main
      - name: Cpplint
        run: |
          ln -snf $PWD/.linters/cpp/hooks/pre-commit.sh $PWD/.linters/cpp/pre-commit.sh
          .linters/cpp/pre-commit.sh

  build:
    name: build
    needs: lint
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        os:
          - centos7
          - ubuntu1804
        compiler:
          - gcc-9.2
          - clang-9
        exclude:
          - os: centos7
            compiler: clang-9
    container:
      image: vesoft/nebula-dev:${{ matrix.os }}
      volumes:
        - /tmp/nebula-graph-client/${{ matrix.os }}-${{ matrix.compiler }}:/tmp/nebula-graph-client/nebula-graph/${{ matrix.os }}-${{ matrix.compiler }}
      options: --mount type=tmpfs,destination=/tmp/ccache/nebula-graph,tmpfs-size=1073741824 --cap-add=SYS_PTRACE
    steps:
      - uses: actions/checkout@v2
      - name: CMake
        run: |
          case ${{ matrix.compiler }} in
          gcc-*)
            case ${{ matrix.os }} in
            centos7)
              # build with Release type
              cmake \
                  -DCMAKE_CXX_COMPILER=$TOOLSET_CLANG_DIR/bin/g++ \
                  -DCMAKE_C_COMPILER=$TOOLSET_CLANG_DIR/bin/gcc \
                  -DCMAKE_BUILD_TYPE=Release \
                  -DENABLE_TESTING=on \
                  -DCMAKE_INSTALL_PREFIX=/usr/local/nebula \
                  -DDISABLE_CXX11_ABI=ON \
                  -B build
              ;;
            ubuntu1804)
              # build with Debug type
              cmake \
                  -DCMAKE_CXX_COMPILER=$TOOLSET_CLANG_DIR/bin/g++ \
                  -DCMAKE_C_COMPILER=$TOOLSET_CLANG_DIR/bin/gcc \
                  -DCMAKE_BUILD_TYPE=Debug \
                  -DENABLE_TESTING=on \
                  -DCMAKE_INSTALL_PREFIX=/usr/local/nebula \
                  -B build
              ;;
            esac
            ;;
          clang-*)
            # build with Sanitizer
            cmake \
                -DCMAKE_CXX_COMPILER=$TOOLSET_CLANG_DIR/bin/clang++ \
                -DCMAKE_C_COMPILER=$TOOLSET_CLANG_DIR/bin/clang \
                -DCMAKE_BUILD_TYPE=Debug \
                -DENABLE_ASAN=on \
                -DENABLE_TESTING=on \
                -DCMAKE_INSTALL_PREFIX=/usr/local/nebula \
                -B build
            ;;
          esac
      - name: Make
        run: cmake --build build/ -j $(nproc)
      - name: Nebula Server
        run: |
          case ${{ matrix.os }} in
          centos7)
            set +e
            for i in {0..10}; do
              wget https://oss-cdn.nebula-graph.com.cn/package/nightly/$(./date.py --day_diff=$i)/nebula-graph-$(./date.py --day_diff=$i)-nightly.el7.x86_64.rpm
              rpm -ivh nebula-graph-$(./date.py --day_diff=$i)-nightly.el7.x86_64.rpm
              if [ $? -eq 0 ]; then
                break;
              fi
            done
            set -e
            ;;
          ubuntu1804)
            set +e
            for i in {0..10}; do
              wget https://oss-cdn.nebula-graph.com.cn/package/nightly/$(./date.py --day_diff=$i)/nebula-graph-$(./date.py --day_diff=$i)-nightly.ubuntu1804.amd64.deb
              dpkg -i nebula-graph-$(./date.py --day_diff=$i)-nightly.ubuntu1804.amd64.deb
              if [ $? -eq 0 ]; then
                break;
              fi
            done
            set -e
            ;;
          esac
          chmod u+w /usr/local/nebula/etc/nebula-graphd.conf /usr/local/nebula/etc/nebula-storaged.conf /usr/local/nebula/etc/nebula-metad.conf
          echo '--cert_path=share/resources/test.ca.pem' | tee -a /usr/local/nebula/etc/nebula-graphd.conf /usr/local/nebula/etc/nebula-storaged.conf /usr/local/nebula/etc/nebula-metad.conf
          echo '--key_path=share/resources/test.ca.key' | tee -a /usr/local/nebula/etc/nebula-graphd.conf /usr/local/nebula/etc/nebula-storaged.conf /usr/local/nebula/etc/nebula-metad.conf
          echo '--password_path=share/resources/test.ca.password' | tee -a /usr/local/nebula/etc/nebula-graphd.conf /usr/local/nebula/etc/nebula-storaged.conf /usr/local/nebula/etc/nebula-metad.conf
          echo '--enable_ssl=true' | tee -a /usr/local/nebula/etc/nebula-graphd.conf /usr/local/nebula/etc/nebula-storaged.conf /usr/local/nebula/etc/nebula-metad.conf
          cp certs/* /usr/local/nebula/share/resources
          /usr/local/nebula/scripts/nebula.service start all
          /usr/local/nebula/scripts/nebula.service status all
          echo '127.0.0.1 graphd' >> /etc/hosts
          echo '127.0.0.1 graphd1' >> /etc/hosts
          echo '127.0.0.1 graphd2' >> /etc/hosts
          # The connection maybe unstable, so we wait a while
          sleep 10
      - name: CTest
        env:
          ASAN_OPTIONS: fast_unwind_on_malloc=1
        run: |
          pushd build
          ctest -j $(($(nproc)/2+1)) --timeout 400 --output-on-failure
          make install
          popd
        timeout-minutes: 4
      - name: Build example
        run: |
          case ${{ matrix.os }} in
          centos7)
            # install GCC4.8 by yum to build example
            yum -y update && yum -y install gcc gcc-c++
            pushd examples
            mkdir build
            cmake \
                -DCMAKE_CXX_COMPILER=/usr/bin/g++ \
                -DCMAKE_C_COMPILER=/usr/bin/gcc \
                -DDISABLE_CXX11_ABI=ON \
                -B build
            cmake --build build/ -j $(nproc)
            LD_LIBRARY_PATH=/usr/local/nebula/lib64:/usr/local/nebula/lib:$LD_LIBRARY_PATH ./build/session_example graphd:9669
            popd
            ;;
          *)
            pushd examples
            mkdir build
            cmake -B build
            cmake --build build/ -j $(nproc)
            # if the example use the g++ under /opt/vesoft/toolset, need to replace the low version libstdc++.so
            rm /usr/lib/x86_64-linux-gnu/libstdc++.so.6
            ln -s /opt/vesoft/toolset/clang/9.0.0/lib64/libstdc++.so /usr/lib/x86_64-linux-gnu/libstdc++.so.6
            LD_LIBRARY_PATH=/usr/local/nebula/lib64:/usr/local/nebula/lib:$LD_LIBRARY_PATH ./build/session_example graphd:9669
            popd
            ;;
          esac
      - name: Cleanup
        if: ${{ always() }}
        run: rm -rf build modules
