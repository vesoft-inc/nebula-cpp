/**
 * Autogenerated by Thrift for storage.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include "GeneralStorageServiceAsyncClient.h"

#include <thrift/lib/cpp2/gen/client_cpp.h>

namespace nebula { namespace storage { namespace cpp2 {
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, ::apache::thrift::type_class::structure,  ::nebula::storage::cpp2::KVGetRequest*>> GeneralStorageService_get_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, ::apache::thrift::type_class::structure,  ::nebula::storage::cpp2::KVGetResponse*>> GeneralStorageService_get_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, ::apache::thrift::type_class::structure,  ::nebula::storage::cpp2::KVPutRequest*>> GeneralStorageService_put_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, ::apache::thrift::type_class::structure,  ::nebula::storage::cpp2::ExecResponse*>> GeneralStorageService_put_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, ::apache::thrift::type_class::structure,  ::nebula::storage::cpp2::KVRemoveRequest*>> GeneralStorageService_remove_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, ::apache::thrift::type_class::structure,  ::nebula::storage::cpp2::ExecResponse*>> GeneralStorageService_remove_presult;

template <typename Protocol_>
void GeneralStorageServiceAsyncClient::getT(Protocol_* prot, apache::thrift::RpcOptions rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const  ::nebula::storage::cpp2::KVGetRequest& p_req) {

  std::shared_ptr<apache::thrift::transport::THeader> header(ctx, &ctx->header);
  GeneralStorageService_get_pargs args;
  args.get<0>().value = const_cast< ::nebula::storage::cpp2::KVGetRequest*>(&p_req);
  auto sizer = [&](Protocol_* p) { return args.serializedSizeZC(p); };
  auto writer = [&](Protocol_* p) { args.write(p); };
  static constexpr const folly::StringPiece methodName = "get";
  apache::thrift::clientSendT<apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, Protocol_>(prot, std::move(rpcOptions), std::move(callback), ctx->ctx, std::move(header), channel_.get(), apache::thrift::ManagedStringView(methodName, false), writer, sizer);
  ctx->reqContext.setRequestHeader(nullptr);
}

template <typename Protocol_>
void GeneralStorageServiceAsyncClient::putT(Protocol_* prot, apache::thrift::RpcOptions rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const  ::nebula::storage::cpp2::KVPutRequest& p_req) {

  std::shared_ptr<apache::thrift::transport::THeader> header(ctx, &ctx->header);
  GeneralStorageService_put_pargs args;
  args.get<0>().value = const_cast< ::nebula::storage::cpp2::KVPutRequest*>(&p_req);
  auto sizer = [&](Protocol_* p) { return args.serializedSizeZC(p); };
  auto writer = [&](Protocol_* p) { args.write(p); };
  static constexpr const folly::StringPiece methodName = "put";
  apache::thrift::clientSendT<apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, Protocol_>(prot, std::move(rpcOptions), std::move(callback), ctx->ctx, std::move(header), channel_.get(), apache::thrift::ManagedStringView(methodName, false), writer, sizer);
  ctx->reqContext.setRequestHeader(nullptr);
}

template <typename Protocol_>
void GeneralStorageServiceAsyncClient::removeT(Protocol_* prot, apache::thrift::RpcOptions rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const  ::nebula::storage::cpp2::KVRemoveRequest& p_req) {

  std::shared_ptr<apache::thrift::transport::THeader> header(ctx, &ctx->header);
  GeneralStorageService_remove_pargs args;
  args.get<0>().value = const_cast< ::nebula::storage::cpp2::KVRemoveRequest*>(&p_req);
  auto sizer = [&](Protocol_* p) { return args.serializedSizeZC(p); };
  auto writer = [&](Protocol_* p) { args.write(p); };
  static constexpr const folly::StringPiece methodName = "remove";
  apache::thrift::clientSendT<apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, Protocol_>(prot, std::move(rpcOptions), std::move(callback), ctx->ctx, std::move(header), channel_.get(), apache::thrift::ManagedStringView(methodName, false), writer, sizer);
  ctx->reqContext.setRequestHeader(nullptr);
}



void GeneralStorageServiceAsyncClient::get(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::nebula::storage::cpp2::KVGetRequest& p_req) {
  ::apache::thrift::RpcOptions rpcOptions;
  get(rpcOptions, std::move(callback), p_req);
}

void GeneralStorageServiceAsyncClient::get(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::nebula::storage::cpp2::KVGetRequest& p_req) {
  auto ctx = getCtx(&rpcOptions);
  apache::thrift::RequestCallback::Context callbackContext;
  callbackContext.protocolId =
      apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
  callbackContext.ctx = std::shared_ptr<apache::thrift::ContextStack>(ctx, &ctx->ctx);
  auto wrappedCallback = apache::thrift::toRequestClientCallbackPtr(std::move(callback), std::move(callbackContext));
  getImpl(rpcOptions, std::move(ctx), std::move(wrappedCallback), p_req);
}

void GeneralStorageServiceAsyncClient::getImpl(const apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const  ::nebula::storage::cpp2::KVGetRequest& p_req) {
  switch (apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      getT(&writer, rpcOptions, std::move(ctx), std::move(callback), p_req);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      getT(&writer, rpcOptions, std::move(ctx), std::move(callback), p_req);
      break;
    }
    default:
    {
      apache::thrift::detail::ac::throw_app_exn("Could not find Protocol");
    }
  }
}

std::shared_ptr<::apache::thrift::detail::ac::ClientRequestContext> GeneralStorageServiceAsyncClient::getCtx(apache::thrift::RpcOptions* rpcOptions) {
  return std::make_shared<apache::thrift::detail::ac::ClientRequestContext>(
      channel_->getProtocolId(),
      rpcOptions ? rpcOptions->releaseWriteHeaders() : std::map<std::string, std::string>{},
      handlers_,
      getServiceName(),
      "GeneralStorageService.get");
}

void GeneralStorageServiceAsyncClient::sync_get( ::nebula::storage::cpp2::KVGetResponse& _return, const  ::nebula::storage::cpp2::KVGetRequest& p_req) {
  ::apache::thrift::RpcOptions rpcOptions;
  sync_get(rpcOptions, _return, p_req);
}

void GeneralStorageServiceAsyncClient::sync_get(apache::thrift::RpcOptions& rpcOptions,  ::nebula::storage::cpp2::KVGetResponse& _return, const  ::nebula::storage::cpp2::KVGetRequest& p_req) {
  apache::thrift::ClientReceiveState returnState;
  apache::thrift::ClientSyncCallback<false> callback(&returnState);
  auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
  auto evb = apache::thrift::GeneratedAsyncClient::getChannel()->getEventBase();
  auto ctx = getCtx(&rpcOptions);
  auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(&callback);
  getImpl(rpcOptions, ctx, std::move(wrappedCallback), p_req);
  callback.waitUntilDone(evb);

  if (returnState.isException()) {
    returnState.exception().throw_exception();
  }
  returnState.resetProtocolId(protocolId);
  returnState.resetCtx(std::shared_ptr<apache::thrift::ContextStack>(ctx, &ctx->ctx));
  SCOPE_EXIT {
    if (returnState.header() && !returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(returnState.header()->releaseHeaders());
    }
  };
  return folly::fibers::runInMainContext([&] {
      recv_get(_return, returnState);
  });
}


folly::Future< ::nebula::storage::cpp2::KVGetResponse> GeneralStorageServiceAsyncClient::future_get(const  ::nebula::storage::cpp2::KVGetRequest& p_req) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_get(rpcOptions, p_req);
}

folly::SemiFuture< ::nebula::storage::cpp2::KVGetResponse> GeneralStorageServiceAsyncClient::semifuture_get(const  ::nebula::storage::cpp2::KVGetRequest& p_req) {
  ::apache::thrift::RpcOptions rpcOptions;
  return semifuture_get(rpcOptions, p_req);
}

folly::Future< ::nebula::storage::cpp2::KVGetResponse> GeneralStorageServiceAsyncClient::future_get(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::KVGetRequest& p_req) {
  folly::Promise< ::nebula::storage::cpp2::KVGetResponse> promise;
  auto future = promise.getFuture();
  auto callback = std::make_unique<apache::thrift::FutureCallback< ::nebula::storage::cpp2::KVGetResponse>>(std::move(promise), recv_wrapped_get, channel_);
  get(rpcOptions, std::move(callback), p_req);
  return future;
}

folly::SemiFuture< ::nebula::storage::cpp2::KVGetResponse> GeneralStorageServiceAsyncClient::semifuture_get(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::KVGetRequest& p_req) {
  auto callbackAndFuture = makeSemiFutureCallback(recv_wrapped_get, channel_);
  auto callback = std::move(callbackAndFuture.first);
  get(rpcOptions, std::move(callback), p_req);
  return std::move(callbackAndFuture.second);
}

folly::Future<std::pair< ::nebula::storage::cpp2::KVGetResponse, std::unique_ptr<apache::thrift::transport::THeader>>> GeneralStorageServiceAsyncClient::header_future_get(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::KVGetRequest& p_req) {
  folly::Promise<std::pair< ::nebula::storage::cpp2::KVGetResponse, std::unique_ptr<apache::thrift::transport::THeader>>> promise;
  auto future = promise.getFuture();
  auto callback = std::make_unique<apache::thrift::HeaderFutureCallback< ::nebula::storage::cpp2::KVGetResponse>>(std::move(promise), recv_wrapped_get, channel_);
  get(rpcOptions, std::move(callback), p_req);
  return future;
}

folly::SemiFuture<std::pair< ::nebula::storage::cpp2::KVGetResponse, std::unique_ptr<apache::thrift::transport::THeader>>> GeneralStorageServiceAsyncClient::header_semifuture_get(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::KVGetRequest& p_req) {
  auto callbackAndFuture = makeHeaderSemiFutureCallback(recv_wrapped_get, channel_);
  auto callback = std::move(callbackAndFuture.first);
  get(rpcOptions, std::move(callback), p_req);
  return std::move(callbackAndFuture.second);
}

void GeneralStorageServiceAsyncClient::get(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::nebula::storage::cpp2::KVGetRequest& p_req) {
  get(std::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)), p_req);
}

#if FOLLY_HAS_COROUTINES
#endif // FOLLY_HAS_COROUTINES
folly::exception_wrapper GeneralStorageServiceAsyncClient::recv_wrapped_get( ::nebula::storage::cpp2::KVGetResponse& _return, ::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }

  using result = GeneralStorageService_get_presult;
  constexpr auto const fname = "get";
  switch (state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state, _return);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state, _return);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void GeneralStorageServiceAsyncClient::recv_get( ::nebula::storage::cpp2::KVGetResponse& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_get(_return, state);
  if (ew) {
    ew.throw_exception();
  }
}

void GeneralStorageServiceAsyncClient::recv_instance_get( ::nebula::storage::cpp2::KVGetResponse& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_get(_return, state);
}

folly::exception_wrapper GeneralStorageServiceAsyncClient::recv_instance_wrapped_get( ::nebula::storage::cpp2::KVGetResponse& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_get(_return, state);
}

void GeneralStorageServiceAsyncClient::put(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::nebula::storage::cpp2::KVPutRequest& p_req) {
  ::apache::thrift::RpcOptions rpcOptions;
  put(rpcOptions, std::move(callback), p_req);
}

void GeneralStorageServiceAsyncClient::put(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::nebula::storage::cpp2::KVPutRequest& p_req) {
  auto ctx = putCtx(&rpcOptions);
  apache::thrift::RequestCallback::Context callbackContext;
  callbackContext.protocolId =
      apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
  callbackContext.ctx = std::shared_ptr<apache::thrift::ContextStack>(ctx, &ctx->ctx);
  auto wrappedCallback = apache::thrift::toRequestClientCallbackPtr(std::move(callback), std::move(callbackContext));
  putImpl(rpcOptions, std::move(ctx), std::move(wrappedCallback), p_req);
}

void GeneralStorageServiceAsyncClient::putImpl(const apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const  ::nebula::storage::cpp2::KVPutRequest& p_req) {
  switch (apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      putT(&writer, rpcOptions, std::move(ctx), std::move(callback), p_req);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      putT(&writer, rpcOptions, std::move(ctx), std::move(callback), p_req);
      break;
    }
    default:
    {
      apache::thrift::detail::ac::throw_app_exn("Could not find Protocol");
    }
  }
}

std::shared_ptr<::apache::thrift::detail::ac::ClientRequestContext> GeneralStorageServiceAsyncClient::putCtx(apache::thrift::RpcOptions* rpcOptions) {
  return std::make_shared<apache::thrift::detail::ac::ClientRequestContext>(
      channel_->getProtocolId(),
      rpcOptions ? rpcOptions->releaseWriteHeaders() : std::map<std::string, std::string>{},
      handlers_,
      getServiceName(),
      "GeneralStorageService.put");
}

void GeneralStorageServiceAsyncClient::sync_put( ::nebula::storage::cpp2::ExecResponse& _return, const  ::nebula::storage::cpp2::KVPutRequest& p_req) {
  ::apache::thrift::RpcOptions rpcOptions;
  sync_put(rpcOptions, _return, p_req);
}

void GeneralStorageServiceAsyncClient::sync_put(apache::thrift::RpcOptions& rpcOptions,  ::nebula::storage::cpp2::ExecResponse& _return, const  ::nebula::storage::cpp2::KVPutRequest& p_req) {
  apache::thrift::ClientReceiveState returnState;
  apache::thrift::ClientSyncCallback<false> callback(&returnState);
  auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
  auto evb = apache::thrift::GeneratedAsyncClient::getChannel()->getEventBase();
  auto ctx = putCtx(&rpcOptions);
  auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(&callback);
  putImpl(rpcOptions, ctx, std::move(wrappedCallback), p_req);
  callback.waitUntilDone(evb);

  if (returnState.isException()) {
    returnState.exception().throw_exception();
  }
  returnState.resetProtocolId(protocolId);
  returnState.resetCtx(std::shared_ptr<apache::thrift::ContextStack>(ctx, &ctx->ctx));
  SCOPE_EXIT {
    if (returnState.header() && !returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(returnState.header()->releaseHeaders());
    }
  };
  return folly::fibers::runInMainContext([&] {
      recv_put(_return, returnState);
  });
}


folly::Future< ::nebula::storage::cpp2::ExecResponse> GeneralStorageServiceAsyncClient::future_put(const  ::nebula::storage::cpp2::KVPutRequest& p_req) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_put(rpcOptions, p_req);
}

folly::SemiFuture< ::nebula::storage::cpp2::ExecResponse> GeneralStorageServiceAsyncClient::semifuture_put(const  ::nebula::storage::cpp2::KVPutRequest& p_req) {
  ::apache::thrift::RpcOptions rpcOptions;
  return semifuture_put(rpcOptions, p_req);
}

folly::Future< ::nebula::storage::cpp2::ExecResponse> GeneralStorageServiceAsyncClient::future_put(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::KVPutRequest& p_req) {
  folly::Promise< ::nebula::storage::cpp2::ExecResponse> promise;
  auto future = promise.getFuture();
  auto callback = std::make_unique<apache::thrift::FutureCallback< ::nebula::storage::cpp2::ExecResponse>>(std::move(promise), recv_wrapped_put, channel_);
  put(rpcOptions, std::move(callback), p_req);
  return future;
}

folly::SemiFuture< ::nebula::storage::cpp2::ExecResponse> GeneralStorageServiceAsyncClient::semifuture_put(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::KVPutRequest& p_req) {
  auto callbackAndFuture = makeSemiFutureCallback(recv_wrapped_put, channel_);
  auto callback = std::move(callbackAndFuture.first);
  put(rpcOptions, std::move(callback), p_req);
  return std::move(callbackAndFuture.second);
}

folly::Future<std::pair< ::nebula::storage::cpp2::ExecResponse, std::unique_ptr<apache::thrift::transport::THeader>>> GeneralStorageServiceAsyncClient::header_future_put(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::KVPutRequest& p_req) {
  folly::Promise<std::pair< ::nebula::storage::cpp2::ExecResponse, std::unique_ptr<apache::thrift::transport::THeader>>> promise;
  auto future = promise.getFuture();
  auto callback = std::make_unique<apache::thrift::HeaderFutureCallback< ::nebula::storage::cpp2::ExecResponse>>(std::move(promise), recv_wrapped_put, channel_);
  put(rpcOptions, std::move(callback), p_req);
  return future;
}

folly::SemiFuture<std::pair< ::nebula::storage::cpp2::ExecResponse, std::unique_ptr<apache::thrift::transport::THeader>>> GeneralStorageServiceAsyncClient::header_semifuture_put(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::KVPutRequest& p_req) {
  auto callbackAndFuture = makeHeaderSemiFutureCallback(recv_wrapped_put, channel_);
  auto callback = std::move(callbackAndFuture.first);
  put(rpcOptions, std::move(callback), p_req);
  return std::move(callbackAndFuture.second);
}

void GeneralStorageServiceAsyncClient::put(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::nebula::storage::cpp2::KVPutRequest& p_req) {
  put(std::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)), p_req);
}

#if FOLLY_HAS_COROUTINES
#endif // FOLLY_HAS_COROUTINES
folly::exception_wrapper GeneralStorageServiceAsyncClient::recv_wrapped_put( ::nebula::storage::cpp2::ExecResponse& _return, ::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }

  using result = GeneralStorageService_put_presult;
  constexpr auto const fname = "put";
  switch (state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state, _return);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state, _return);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void GeneralStorageServiceAsyncClient::recv_put( ::nebula::storage::cpp2::ExecResponse& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_put(_return, state);
  if (ew) {
    ew.throw_exception();
  }
}

void GeneralStorageServiceAsyncClient::recv_instance_put( ::nebula::storage::cpp2::ExecResponse& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_put(_return, state);
}

folly::exception_wrapper GeneralStorageServiceAsyncClient::recv_instance_wrapped_put( ::nebula::storage::cpp2::ExecResponse& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_put(_return, state);
}

void GeneralStorageServiceAsyncClient::remove(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::nebula::storage::cpp2::KVRemoveRequest& p_req) {
  ::apache::thrift::RpcOptions rpcOptions;
  remove(rpcOptions, std::move(callback), p_req);
}

void GeneralStorageServiceAsyncClient::remove(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::nebula::storage::cpp2::KVRemoveRequest& p_req) {
  auto ctx = removeCtx(&rpcOptions);
  apache::thrift::RequestCallback::Context callbackContext;
  callbackContext.protocolId =
      apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
  callbackContext.ctx = std::shared_ptr<apache::thrift::ContextStack>(ctx, &ctx->ctx);
  auto wrappedCallback = apache::thrift::toRequestClientCallbackPtr(std::move(callback), std::move(callbackContext));
  removeImpl(rpcOptions, std::move(ctx), std::move(wrappedCallback), p_req);
}

void GeneralStorageServiceAsyncClient::removeImpl(const apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const  ::nebula::storage::cpp2::KVRemoveRequest& p_req) {
  switch (apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      removeT(&writer, rpcOptions, std::move(ctx), std::move(callback), p_req);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      removeT(&writer, rpcOptions, std::move(ctx), std::move(callback), p_req);
      break;
    }
    default:
    {
      apache::thrift::detail::ac::throw_app_exn("Could not find Protocol");
    }
  }
}

std::shared_ptr<::apache::thrift::detail::ac::ClientRequestContext> GeneralStorageServiceAsyncClient::removeCtx(apache::thrift::RpcOptions* rpcOptions) {
  return std::make_shared<apache::thrift::detail::ac::ClientRequestContext>(
      channel_->getProtocolId(),
      rpcOptions ? rpcOptions->releaseWriteHeaders() : std::map<std::string, std::string>{},
      handlers_,
      getServiceName(),
      "GeneralStorageService.remove");
}

void GeneralStorageServiceAsyncClient::sync_remove( ::nebula::storage::cpp2::ExecResponse& _return, const  ::nebula::storage::cpp2::KVRemoveRequest& p_req) {
  ::apache::thrift::RpcOptions rpcOptions;
  sync_remove(rpcOptions, _return, p_req);
}

void GeneralStorageServiceAsyncClient::sync_remove(apache::thrift::RpcOptions& rpcOptions,  ::nebula::storage::cpp2::ExecResponse& _return, const  ::nebula::storage::cpp2::KVRemoveRequest& p_req) {
  apache::thrift::ClientReceiveState returnState;
  apache::thrift::ClientSyncCallback<false> callback(&returnState);
  auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
  auto evb = apache::thrift::GeneratedAsyncClient::getChannel()->getEventBase();
  auto ctx = removeCtx(&rpcOptions);
  auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(&callback);
  removeImpl(rpcOptions, ctx, std::move(wrappedCallback), p_req);
  callback.waitUntilDone(evb);

  if (returnState.isException()) {
    returnState.exception().throw_exception();
  }
  returnState.resetProtocolId(protocolId);
  returnState.resetCtx(std::shared_ptr<apache::thrift::ContextStack>(ctx, &ctx->ctx));
  SCOPE_EXIT {
    if (returnState.header() && !returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(returnState.header()->releaseHeaders());
    }
  };
  return folly::fibers::runInMainContext([&] {
      recv_remove(_return, returnState);
  });
}


folly::Future< ::nebula::storage::cpp2::ExecResponse> GeneralStorageServiceAsyncClient::future_remove(const  ::nebula::storage::cpp2::KVRemoveRequest& p_req) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_remove(rpcOptions, p_req);
}

folly::SemiFuture< ::nebula::storage::cpp2::ExecResponse> GeneralStorageServiceAsyncClient::semifuture_remove(const  ::nebula::storage::cpp2::KVRemoveRequest& p_req) {
  ::apache::thrift::RpcOptions rpcOptions;
  return semifuture_remove(rpcOptions, p_req);
}

folly::Future< ::nebula::storage::cpp2::ExecResponse> GeneralStorageServiceAsyncClient::future_remove(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::KVRemoveRequest& p_req) {
  folly::Promise< ::nebula::storage::cpp2::ExecResponse> promise;
  auto future = promise.getFuture();
  auto callback = std::make_unique<apache::thrift::FutureCallback< ::nebula::storage::cpp2::ExecResponse>>(std::move(promise), recv_wrapped_remove, channel_);
  remove(rpcOptions, std::move(callback), p_req);
  return future;
}

folly::SemiFuture< ::nebula::storage::cpp2::ExecResponse> GeneralStorageServiceAsyncClient::semifuture_remove(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::KVRemoveRequest& p_req) {
  auto callbackAndFuture = makeSemiFutureCallback(recv_wrapped_remove, channel_);
  auto callback = std::move(callbackAndFuture.first);
  remove(rpcOptions, std::move(callback), p_req);
  return std::move(callbackAndFuture.second);
}

folly::Future<std::pair< ::nebula::storage::cpp2::ExecResponse, std::unique_ptr<apache::thrift::transport::THeader>>> GeneralStorageServiceAsyncClient::header_future_remove(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::KVRemoveRequest& p_req) {
  folly::Promise<std::pair< ::nebula::storage::cpp2::ExecResponse, std::unique_ptr<apache::thrift::transport::THeader>>> promise;
  auto future = promise.getFuture();
  auto callback = std::make_unique<apache::thrift::HeaderFutureCallback< ::nebula::storage::cpp2::ExecResponse>>(std::move(promise), recv_wrapped_remove, channel_);
  remove(rpcOptions, std::move(callback), p_req);
  return future;
}

folly::SemiFuture<std::pair< ::nebula::storage::cpp2::ExecResponse, std::unique_ptr<apache::thrift::transport::THeader>>> GeneralStorageServiceAsyncClient::header_semifuture_remove(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::KVRemoveRequest& p_req) {
  auto callbackAndFuture = makeHeaderSemiFutureCallback(recv_wrapped_remove, channel_);
  auto callback = std::move(callbackAndFuture.first);
  remove(rpcOptions, std::move(callback), p_req);
  return std::move(callbackAndFuture.second);
}

void GeneralStorageServiceAsyncClient::remove(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::nebula::storage::cpp2::KVRemoveRequest& p_req) {
  remove(std::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)), p_req);
}

#if FOLLY_HAS_COROUTINES
#endif // FOLLY_HAS_COROUTINES
folly::exception_wrapper GeneralStorageServiceAsyncClient::recv_wrapped_remove( ::nebula::storage::cpp2::ExecResponse& _return, ::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }

  using result = GeneralStorageService_remove_presult;
  constexpr auto const fname = "remove";
  switch (state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state, _return);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state, _return);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void GeneralStorageServiceAsyncClient::recv_remove( ::nebula::storage::cpp2::ExecResponse& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_remove(_return, state);
  if (ew) {
    ew.throw_exception();
  }
}

void GeneralStorageServiceAsyncClient::recv_instance_remove( ::nebula::storage::cpp2::ExecResponse& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_remove(_return, state);
}

folly::exception_wrapper GeneralStorageServiceAsyncClient::recv_instance_wrapped_remove( ::nebula::storage::cpp2::ExecResponse& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_remove(_return, state);
}


}}} // nebula::storage::cpp2
