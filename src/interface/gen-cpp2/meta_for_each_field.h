/**
 * Autogenerated by Thrift for meta.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "meta_metadata.h"
#include <thrift/lib/cpp2/visitation/for_each.h>

namespace apache {
namespace thrift {
namespace detail {

template <>
struct ForEachField<::nebula::meta::cpp2::ID> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).space_id_ref()...);
    f(1, static_cast<T&&>(t).tag_id_ref()...);
    f(2, static_cast<T&&>(t).edge_type_ref()...);
    f(3, static_cast<T&&>(t).index_id_ref()...);
    f(4, static_cast<T&&>(t).cluster_id_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ColumnTypeDef> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).type_ref()...);
    f(1, static_cast<T&&>(t).type_length_ref()...);
    f(2, static_cast<T&&>(t).geo_shape_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ColumnDef> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).name_ref()...);
    f(1, static_cast<T&&>(t).type_ref()...);
    f(2, static_cast<T&&>(t).default_value_ref()...);
    f(3, static_cast<T&&>(t).nullable_ref()...);
    f(4, static_cast<T&&>(t).comment_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::SchemaProp> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).ttl_duration_ref()...);
    f(1, static_cast<T&&>(t).ttl_col_ref()...);
    f(2, static_cast<T&&>(t).comment_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::Schema> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).columns_ref()...);
    f(1, static_cast<T&&>(t).schema_prop_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::IdName> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).id_ref()...);
    f(1, static_cast<T&&>(t).name_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::SpaceDesc> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).space_name_ref()...);
    f(1, static_cast<T&&>(t).partition_num_ref()...);
    f(2, static_cast<T&&>(t).replica_factor_ref()...);
    f(3, static_cast<T&&>(t).charset_name_ref()...);
    f(4, static_cast<T&&>(t).collate_name_ref()...);
    f(5, static_cast<T&&>(t).vid_type_ref()...);
    f(6, static_cast<T&&>(t).group_name_ref()...);
    f(7, static_cast<T&&>(t).isolation_level_ref()...);
    f(8, static_cast<T&&>(t).comment_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::SpaceItem> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).space_id_ref()...);
    f(1, static_cast<T&&>(t).properties_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::TagItem> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).tag_id_ref()...);
    f(1, static_cast<T&&>(t).tag_name_ref()...);
    f(2, static_cast<T&&>(t).version_ref()...);
    f(3, static_cast<T&&>(t).schema_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::AlterSchemaItem> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).op_ref()...);
    f(1, static_cast<T&&>(t).schema_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::EdgeItem> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).edge_type_ref()...);
    f(1, static_cast<T&&>(t).edge_name_ref()...);
    f(2, static_cast<T&&>(t).version_ref()...);
    f(3, static_cast<T&&>(t).schema_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::IndexItem> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).index_id_ref()...);
    f(1, static_cast<T&&>(t).index_name_ref()...);
    f(2, static_cast<T&&>(t).schema_id_ref()...);
    f(3, static_cast<T&&>(t).schema_name_ref()...);
    f(4, static_cast<T&&>(t).fields_ref()...);
    f(5, static_cast<T&&>(t).comment_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::HostItem> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).hostAddr_ref()...);
    f(1, static_cast<T&&>(t).status_ref()...);
    f(2, static_cast<T&&>(t).leader_parts_ref()...);
    f(3, static_cast<T&&>(t).all_parts_ref()...);
    f(4, static_cast<T&&>(t).role_ref()...);
    f(5, static_cast<T&&>(t).git_info_sha_ref()...);
    f(6, static_cast<T&&>(t).zone_name_ref()...);
    f(7, static_cast<T&&>(t).version_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::UserItem> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).account_ref()...);
    f(1, static_cast<T&&>(t).is_lock_ref()...);
    f(2, static_cast<T&&>(t).max_queries_per_hour_ref()...);
    f(3, static_cast<T&&>(t).max_updates_per_hour_ref()...);
    f(4, static_cast<T&&>(t).max_connections_per_hour_ref()...);
    f(5, static_cast<T&&>(t).max_user_connections_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::RoleItem> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).user_id_ref()...);
    f(1, static_cast<T&&>(t).space_id_ref()...);
    f(2, static_cast<T&&>(t).role_type_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ExecResp> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).code_ref()...);
    f(1, static_cast<T&&>(t).id_ref()...);
    f(2, static_cast<T&&>(t).leader_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::AdminJobReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).op_ref()...);
    f(1, static_cast<T&&>(t).cmd_ref()...);
    f(2, static_cast<T&&>(t).paras_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::JobDesc> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).id_ref()...);
    f(1, static_cast<T&&>(t).cmd_ref()...);
    f(2, static_cast<T&&>(t).paras_ref()...);
    f(3, static_cast<T&&>(t).status_ref()...);
    f(4, static_cast<T&&>(t).start_time_ref()...);
    f(5, static_cast<T&&>(t).stop_time_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::TaskDesc> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).task_id_ref()...);
    f(1, static_cast<T&&>(t).host_ref()...);
    f(2, static_cast<T&&>(t).status_ref()...);
    f(3, static_cast<T&&>(t).start_time_ref()...);
    f(4, static_cast<T&&>(t).stop_time_ref()...);
    f(5, static_cast<T&&>(t).job_id_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::AdminJobResult> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).job_id_ref()...);
    f(1, static_cast<T&&>(t).job_desc_ref()...);
    f(2, static_cast<T&&>(t).task_desc_ref()...);
    f(3, static_cast<T&&>(t).recovered_job_num_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::AdminJobResp> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).code_ref()...);
    f(1, static_cast<T&&>(t).leader_ref()...);
    f(2, static_cast<T&&>(t).result_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::Correlativity> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).part_id_ref()...);
    f(1, static_cast<T&&>(t).proportion_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::StatsItem> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).tag_vertices_ref()...);
    f(1, static_cast<T&&>(t).edges_ref()...);
    f(2, static_cast<T&&>(t).space_vertices_ref()...);
    f(3, static_cast<T&&>(t).space_edges_ref()...);
    f(4, static_cast<T&&>(t).positive_part_correlativity_ref()...);
    f(5, static_cast<T&&>(t).negative_part_correlativity_ref()...);
    f(6, static_cast<T&&>(t).status_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::CreateSpaceReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).properties_ref()...);
    f(1, static_cast<T&&>(t).if_not_exists_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::CreateSpaceAsReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).old_space_name_ref()...);
    f(1, static_cast<T&&>(t).new_space_name_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::DropSpaceReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).space_name_ref()...);
    f(1, static_cast<T&&>(t).if_exists_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ListSpacesReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ListSpacesResp> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).code_ref()...);
    f(1, static_cast<T&&>(t).leader_ref()...);
    f(2, static_cast<T&&>(t).spaces_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::GetSpaceReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).space_name_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::GetSpaceResp> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).code_ref()...);
    f(1, static_cast<T&&>(t).leader_ref()...);
    f(2, static_cast<T&&>(t).item_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::CreateTagReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).space_id_ref()...);
    f(1, static_cast<T&&>(t).tag_name_ref()...);
    f(2, static_cast<T&&>(t).schema_ref()...);
    f(3, static_cast<T&&>(t).if_not_exists_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::AlterTagReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).space_id_ref()...);
    f(1, static_cast<T&&>(t).tag_name_ref()...);
    f(2, static_cast<T&&>(t).tag_items_ref()...);
    f(3, static_cast<T&&>(t).schema_prop_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::DropTagReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).space_id_ref()...);
    f(1, static_cast<T&&>(t).tag_name_ref()...);
    f(2, static_cast<T&&>(t).if_exists_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ListTagsReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).space_id_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ListTagsResp> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).code_ref()...);
    f(1, static_cast<T&&>(t).leader_ref()...);
    f(2, static_cast<T&&>(t).tags_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::GetTagReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).space_id_ref()...);
    f(1, static_cast<T&&>(t).tag_name_ref()...);
    f(2, static_cast<T&&>(t).version_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::GetTagResp> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).code_ref()...);
    f(1, static_cast<T&&>(t).leader_ref()...);
    f(2, static_cast<T&&>(t).schema_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::CreateEdgeReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).space_id_ref()...);
    f(1, static_cast<T&&>(t).edge_name_ref()...);
    f(2, static_cast<T&&>(t).schema_ref()...);
    f(3, static_cast<T&&>(t).if_not_exists_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::AlterEdgeReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).space_id_ref()...);
    f(1, static_cast<T&&>(t).edge_name_ref()...);
    f(2, static_cast<T&&>(t).edge_items_ref()...);
    f(3, static_cast<T&&>(t).schema_prop_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::GetEdgeReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).space_id_ref()...);
    f(1, static_cast<T&&>(t).edge_name_ref()...);
    f(2, static_cast<T&&>(t).version_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::GetEdgeResp> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).code_ref()...);
    f(1, static_cast<T&&>(t).leader_ref()...);
    f(2, static_cast<T&&>(t).schema_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::DropEdgeReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).space_id_ref()...);
    f(1, static_cast<T&&>(t).edge_name_ref()...);
    f(2, static_cast<T&&>(t).if_exists_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ListEdgesReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).space_id_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ListEdgesResp> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).code_ref()...);
    f(1, static_cast<T&&>(t).leader_ref()...);
    f(2, static_cast<T&&>(t).edges_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ListHostsReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).type_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ListHostsResp> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).code_ref()...);
    f(1, static_cast<T&&>(t).leader_ref()...);
    f(2, static_cast<T&&>(t).hosts_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::PartItem> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).part_id_ref()...);
    f(1, static_cast<T&&>(t).leader_ref()...);
    f(2, static_cast<T&&>(t).peers_ref()...);
    f(3, static_cast<T&&>(t).losts_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ListPartsReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).space_id_ref()...);
    f(1, static_cast<T&&>(t).part_ids_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ListPartsResp> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).code_ref()...);
    f(1, static_cast<T&&>(t).leader_ref()...);
    f(2, static_cast<T&&>(t).parts_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::GetPartsAllocReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).space_id_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::GetPartsAllocResp> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).code_ref()...);
    f(1, static_cast<T&&>(t).leader_ref()...);
    f(2, static_cast<T&&>(t).parts_ref()...);
    f(3, static_cast<T&&>(t).terms_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::MultiPutReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).segment_ref()...);
    f(1, static_cast<T&&>(t).pairs_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::GetReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).segment_ref()...);
    f(1, static_cast<T&&>(t).key_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::GetResp> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).code_ref()...);
    f(1, static_cast<T&&>(t).leader_ref()...);
    f(2, static_cast<T&&>(t).value_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::MultiGetReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).segment_ref()...);
    f(1, static_cast<T&&>(t).keys_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::MultiGetResp> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).code_ref()...);
    f(1, static_cast<T&&>(t).leader_ref()...);
    f(2, static_cast<T&&>(t).values_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::RemoveReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).segment_ref()...);
    f(1, static_cast<T&&>(t).key_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::RemoveRangeReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).segment_ref()...);
    f(1, static_cast<T&&>(t).start_ref()...);
    f(2, static_cast<T&&>(t).end_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ScanReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).segment_ref()...);
    f(1, static_cast<T&&>(t).start_ref()...);
    f(2, static_cast<T&&>(t).end_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ScanResp> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).code_ref()...);
    f(1, static_cast<T&&>(t).leader_ref()...);
    f(2, static_cast<T&&>(t).values_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::HBResp> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).code_ref()...);
    f(1, static_cast<T&&>(t).leader_ref()...);
    f(2, static_cast<T&&>(t).cluster_id_ref()...);
    f(3, static_cast<T&&>(t).last_update_time_in_ms_ref()...);
    f(4, static_cast<T&&>(t).meta_version_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::LeaderInfo> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).part_id_ref()...);
    f(1, static_cast<T&&>(t).term_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::HBReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).role_ref()...);
    f(1, static_cast<T&&>(t).host_ref()...);
    f(2, static_cast<T&&>(t).cluster_id_ref()...);
    f(3, static_cast<T&&>(t).leader_partIds_ref()...);
    f(4, static_cast<T&&>(t).git_info_sha_ref()...);
    f(5, static_cast<T&&>(t).version_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::IndexFieldDef> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).name_ref()...);
    f(1, static_cast<T&&>(t).type_length_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::CreateTagIndexReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).space_id_ref()...);
    f(1, static_cast<T&&>(t).index_name_ref()...);
    f(2, static_cast<T&&>(t).tag_name_ref()...);
    f(3, static_cast<T&&>(t).fields_ref()...);
    f(4, static_cast<T&&>(t).if_not_exists_ref()...);
    f(5, static_cast<T&&>(t).comment_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::DropTagIndexReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).space_id_ref()...);
    f(1, static_cast<T&&>(t).index_name_ref()...);
    f(2, static_cast<T&&>(t).if_exists_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::GetTagIndexReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).space_id_ref()...);
    f(1, static_cast<T&&>(t).index_name_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::GetTagIndexResp> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).code_ref()...);
    f(1, static_cast<T&&>(t).leader_ref()...);
    f(2, static_cast<T&&>(t).item_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ListTagIndexesReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).space_id_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ListTagIndexesResp> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).code_ref()...);
    f(1, static_cast<T&&>(t).leader_ref()...);
    f(2, static_cast<T&&>(t).items_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::CreateEdgeIndexReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).space_id_ref()...);
    f(1, static_cast<T&&>(t).index_name_ref()...);
    f(2, static_cast<T&&>(t).edge_name_ref()...);
    f(3, static_cast<T&&>(t).fields_ref()...);
    f(4, static_cast<T&&>(t).if_not_exists_ref()...);
    f(5, static_cast<T&&>(t).comment_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::DropEdgeIndexReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).space_id_ref()...);
    f(1, static_cast<T&&>(t).index_name_ref()...);
    f(2, static_cast<T&&>(t).if_exists_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::GetEdgeIndexReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).space_id_ref()...);
    f(1, static_cast<T&&>(t).index_name_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::GetEdgeIndexResp> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).code_ref()...);
    f(1, static_cast<T&&>(t).leader_ref()...);
    f(2, static_cast<T&&>(t).item_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ListEdgeIndexesReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).space_id_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ListEdgeIndexesResp> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).code_ref()...);
    f(1, static_cast<T&&>(t).leader_ref()...);
    f(2, static_cast<T&&>(t).items_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::RebuildIndexReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).space_id_ref()...);
    f(1, static_cast<T&&>(t).index_name_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::CreateUserReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).account_ref()...);
    f(1, static_cast<T&&>(t).encoded_pwd_ref()...);
    f(2, static_cast<T&&>(t).if_not_exists_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::DropUserReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).account_ref()...);
    f(1, static_cast<T&&>(t).if_exists_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::AlterUserReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).account_ref()...);
    f(1, static_cast<T&&>(t).encoded_pwd_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::GrantRoleReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).role_item_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::RevokeRoleReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).role_item_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ListUsersReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ListUsersResp> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).code_ref()...);
    f(1, static_cast<T&&>(t).leader_ref()...);
    f(2, static_cast<T&&>(t).users_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ListRolesReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).space_id_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ListRolesResp> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).code_ref()...);
    f(1, static_cast<T&&>(t).leader_ref()...);
    f(2, static_cast<T&&>(t).roles_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::GetUserRolesReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).account_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ChangePasswordReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).account_ref()...);
    f(1, static_cast<T&&>(t).new_encoded_pwd_ref()...);
    f(2, static_cast<T&&>(t).old_encoded_pwd_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::BalanceTask> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).id_ref()...);
    f(1, static_cast<T&&>(t).command_ref()...);
    f(2, static_cast<T&&>(t).result_ref()...);
    f(3, static_cast<T&&>(t).start_time_ref()...);
    f(4, static_cast<T&&>(t).stop_time_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ConfigItem> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).module_ref()...);
    f(1, static_cast<T&&>(t).name_ref()...);
    f(2, static_cast<T&&>(t).mode_ref()...);
    f(3, static_cast<T&&>(t).value_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::RegConfigReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).items_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::GetConfigReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).item_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::GetConfigResp> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).code_ref()...);
    f(1, static_cast<T&&>(t).leader_ref()...);
    f(2, static_cast<T&&>(t).items_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::SetConfigReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).item_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ListConfigsReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).space_ref()...);
    f(1, static_cast<T&&>(t).module_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ListConfigsResp> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).code_ref()...);
    f(1, static_cast<T&&>(t).leader_ref()...);
    f(2, static_cast<T&&>(t).items_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::CreateSnapshotReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::DropSnapshotReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).name_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ListSnapshotsReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::Snapshot> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).name_ref()...);
    f(1, static_cast<T&&>(t).status_ref()...);
    f(2, static_cast<T&&>(t).hosts_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ListSnapshotsResp> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).code_ref()...);
    f(1, static_cast<T&&>(t).leader_ref()...);
    f(2, static_cast<T&&>(t).snapshots_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ListIndexStatusReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).space_id_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::IndexStatus> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).name_ref()...);
    f(1, static_cast<T&&>(t).status_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ListIndexStatusResp> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).code_ref()...);
    f(1, static_cast<T&&>(t).leader_ref()...);
    f(2, static_cast<T&&>(t).statuses_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::AddZoneReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).zone_name_ref()...);
    f(1, static_cast<T&&>(t).nodes_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::DropZoneReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).zone_name_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::AddHostIntoZoneReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).node_ref()...);
    f(1, static_cast<T&&>(t).zone_name_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::DropHostFromZoneReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).node_ref()...);
    f(1, static_cast<T&&>(t).zone_name_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::GetZoneReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).zone_name_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::GetZoneResp> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).code_ref()...);
    f(1, static_cast<T&&>(t).leader_ref()...);
    f(2, static_cast<T&&>(t).hosts_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ListZonesReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::Zone> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).zone_name_ref()...);
    f(1, static_cast<T&&>(t).nodes_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ListZonesResp> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).code_ref()...);
    f(1, static_cast<T&&>(t).leader_ref()...);
    f(2, static_cast<T&&>(t).zones_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::AddGroupReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).group_name_ref()...);
    f(1, static_cast<T&&>(t).zone_names_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::DropGroupReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).group_name_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::AddZoneIntoGroupReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).zone_name_ref()...);
    f(1, static_cast<T&&>(t).group_name_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::DropZoneFromGroupReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).zone_name_ref()...);
    f(1, static_cast<T&&>(t).group_name_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::GetGroupReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).group_name_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::GetGroupResp> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).code_ref()...);
    f(1, static_cast<T&&>(t).leader_ref()...);
    f(2, static_cast<T&&>(t).zone_names_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ListGroupsReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::Group> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).group_name_ref()...);
    f(1, static_cast<T&&>(t).zone_names_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ListGroupsResp> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).code_ref()...);
    f(1, static_cast<T&&>(t).leader_ref()...);
    f(2, static_cast<T&&>(t).groups_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::AddListenerReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).space_id_ref()...);
    f(1, static_cast<T&&>(t).type_ref()...);
    f(2, static_cast<T&&>(t).hosts_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::RemoveListenerReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).space_id_ref()...);
    f(1, static_cast<T&&>(t).type_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ListListenerReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).space_id_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ListenerInfo> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).type_ref()...);
    f(1, static_cast<T&&>(t).host_ref()...);
    f(2, static_cast<T&&>(t).part_id_ref()...);
    f(3, static_cast<T&&>(t).status_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ListListenerResp> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).code_ref()...);
    f(1, static_cast<T&&>(t).leader_ref()...);
    f(2, static_cast<T&&>(t).listeners_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::GetStatsReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).space_id_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::GetStatsResp> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).code_ref()...);
    f(1, static_cast<T&&>(t).leader_ref()...);
    f(2, static_cast<T&&>(t).stats_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::BackupInfo> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).host_ref()...);
    f(1, static_cast<T&&>(t).info_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::SpaceBackupInfo> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).space_ref()...);
    f(1, static_cast<T&&>(t).info_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::BackupMeta> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).backup_info_ref()...);
    f(1, static_cast<T&&>(t).meta_files_ref()...);
    f(2, static_cast<T&&>(t).backup_name_ref()...);
    f(3, static_cast<T&&>(t).full_ref()...);
    f(4, static_cast<T&&>(t).include_system_space_ref()...);
    f(5, static_cast<T&&>(t).create_time_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::CreateBackupReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).spaces_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::CreateBackupResp> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).code_ref()...);
    f(1, static_cast<T&&>(t).leader_ref()...);
    f(2, static_cast<T&&>(t).meta_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::HostPair> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).from_host_ref()...);
    f(1, static_cast<T&&>(t).to_host_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::RestoreMetaReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).files_ref()...);
    f(1, static_cast<T&&>(t).hosts_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::FTClient> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).host_ref()...);
    f(1, static_cast<T&&>(t).user_ref()...);
    f(2, static_cast<T&&>(t).pwd_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::SignInFTServiceReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).type_ref()...);
    f(1, static_cast<T&&>(t).clients_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::SignOutFTServiceReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ListFTClientsReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ListFTClientsResp> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).code_ref()...);
    f(1, static_cast<T&&>(t).leader_ref()...);
    f(2, static_cast<T&&>(t).clients_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::FTIndex> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).space_id_ref()...);
    f(1, static_cast<T&&>(t).depend_schema_ref()...);
    f(2, static_cast<T&&>(t).fields_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::CreateFTIndexReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).fulltext_index_name_ref()...);
    f(1, static_cast<T&&>(t).index_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::DropFTIndexReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).space_id_ref()...);
    f(1, static_cast<T&&>(t).fulltext_index_name_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ListFTIndexesReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ListFTIndexesResp> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).code_ref()...);
    f(1, static_cast<T&&>(t).leader_ref()...);
    f(2, static_cast<T&&>(t).indexes_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::QueryDesc> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).start_time_ref()...);
    f(1, static_cast<T&&>(t).status_ref()...);
    f(2, static_cast<T&&>(t).duration_ref()...);
    f(3, static_cast<T&&>(t).query_ref()...);
    f(4, static_cast<T&&>(t).graph_addr_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::Session> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).session_id_ref()...);
    f(1, static_cast<T&&>(t).create_time_ref()...);
    f(2, static_cast<T&&>(t).update_time_ref()...);
    f(3, static_cast<T&&>(t).user_name_ref()...);
    f(4, static_cast<T&&>(t).space_name_ref()...);
    f(5, static_cast<T&&>(t).graph_addr_ref()...);
    f(6, static_cast<T&&>(t).timezone_ref()...);
    f(7, static_cast<T&&>(t).client_ip_ref()...);
    f(8, static_cast<T&&>(t).configs_ref()...);
    f(9, static_cast<T&&>(t).queries_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::CreateSessionReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).user_ref()...);
    f(1, static_cast<T&&>(t).graph_addr_ref()...);
    f(2, static_cast<T&&>(t).client_ip_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::CreateSessionResp> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).code_ref()...);
    f(1, static_cast<T&&>(t).leader_ref()...);
    f(2, static_cast<T&&>(t).session_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::UpdateSessionsReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).sessions_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::UpdateSessionsResp> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).code_ref()...);
    f(1, static_cast<T&&>(t).leader_ref()...);
    f(2, static_cast<T&&>(t).killed_queries_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ListSessionsReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ListSessionsResp> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).code_ref()...);
    f(1, static_cast<T&&>(t).leader_ref()...);
    f(2, static_cast<T&&>(t).sessions_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::GetSessionReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).session_id_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::GetSessionResp> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).code_ref()...);
    f(1, static_cast<T&&>(t).leader_ref()...);
    f(2, static_cast<T&&>(t).session_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::RemoveSessionReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).session_id_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::KillQueryReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).kill_queries_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ReportTaskReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).code_ref()...);
    f(1, static_cast<T&&>(t).job_id_ref()...);
    f(2, static_cast<T&&>(t).task_id_ref()...);
    f(3, static_cast<T&&>(t).stats_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ListClusterInfoResp> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).code_ref()...);
    f(1, static_cast<T&&>(t).leader_ref()...);
    f(2, static_cast<T&&>(t).meta_servers_ref()...);
    f(3, static_cast<T&&>(t).storage_servers_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::ListClusterInfoReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::GetMetaDirInfoResp> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).code_ref()...);
    f(1, static_cast<T&&>(t).dir_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::GetMetaDirInfoReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::VerifyClientVersionResp> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).code_ref()...);
    f(1, static_cast<T&&>(t).leader_ref()...);
    f(2, static_cast<T&&>(t).error_msg_ref()...);
  }
};

template <>
struct ForEachField<::nebula::meta::cpp2::VerifyClientVersionReq> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).version_ref()...);
  }
};
} // namespace detail
} // namespace thrift
} // namespace apache
