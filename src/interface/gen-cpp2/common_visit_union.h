/**
 * Autogenerated by Thrift for common.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "common_metadata.h"
#include <thrift/lib/cpp2/visitation/visit_union.h>

namespace apache {
namespace thrift {
namespace detail {

template <>
struct VisitUnion<::nebula::cpp2::SchemaID> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, T&& t) const {
    using Union = std::remove_reference_t<T>;
    switch (t.getType()) {
    case Union::Type::tag_id:
      return f(0, *static_cast<T&&>(t).tag_id_ref());
    case Union::Type::edge_type:
      return f(1, *static_cast<T&&>(t).edge_type_ref());
    case Union::Type::__EMPTY__: ;
    }
  }
};
template <>
struct VisitUnion<::nebula::cpp2::Value> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, T&& t) const {
    using Union = std::remove_reference_t<T>;
    switch (t.getType()) {
    case Union::Type::nVal:
      return f(0, *static_cast<T&&>(t).nVal_ref());
    case Union::Type::bVal:
      return f(1, *static_cast<T&&>(t).bVal_ref());
    case Union::Type::iVal:
      return f(2, *static_cast<T&&>(t).iVal_ref());
    case Union::Type::fVal:
      return f(3, *static_cast<T&&>(t).fVal_ref());
    case Union::Type::sVal:
      return f(4, *static_cast<T&&>(t).sVal_ref());
    case Union::Type::dVal:
      return f(5, *static_cast<T&&>(t).dVal_ref());
    case Union::Type::tVal:
      return f(6, *static_cast<T&&>(t).tVal_ref());
    case Union::Type::dtVal:
      return f(7, *static_cast<T&&>(t).dtVal_ref());
    case Union::Type::vVal:
      return f(8, *static_cast<T&&>(t).vVal_ref());
    case Union::Type::eVal:
      return f(9, *static_cast<T&&>(t).eVal_ref());
    case Union::Type::pVal:
      return f(10, *static_cast<T&&>(t).pVal_ref());
    case Union::Type::lVal:
      return f(11, *static_cast<T&&>(t).lVal_ref());
    case Union::Type::mVal:
      return f(12, *static_cast<T&&>(t).mVal_ref());
    case Union::Type::uVal:
      return f(13, *static_cast<T&&>(t).uVal_ref());
    case Union::Type::gVal:
      return f(14, *static_cast<T&&>(t).gVal_ref());
    case Union::Type::ggVal:
      return f(15, *static_cast<T&&>(t).ggVal_ref());
    case Union::Type::__EMPTY__: ;
    }
  }
};
template <>
struct VisitUnion<::nebula::cpp2::Geography> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, T&& t) const {
    using Union = std::remove_reference_t<T>;
    switch (t.getType()) {
    case Union::Type::ptVal:
      return f(0, *static_cast<T&&>(t).ptVal_ref());
    case Union::Type::lsVal:
      return f(1, *static_cast<T&&>(t).lsVal_ref());
    case Union::Type::pgVal:
      return f(2, *static_cast<T&&>(t).pgVal_ref());
    case Union::Type::__EMPTY__: ;
    }
  }
};
} // namespace detail
} // namespace thrift
} // namespace apache
