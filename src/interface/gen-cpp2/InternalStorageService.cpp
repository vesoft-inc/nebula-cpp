/**
 * Autogenerated by Thrift for storage.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "InternalStorageService.h"
#include "InternalStorageService.tcc"
#include "storage_metadata.h"
#include <thrift/lib/cpp2/gen/service_cpp.h>

namespace nebula { namespace storage { namespace cpp2 {
std::unique_ptr<apache::thrift::AsyncProcessor> InternalStorageServiceSvIf::getProcessor() {
  return std::make_unique<InternalStorageServiceAsyncProcessor>(this);
}


void InternalStorageServiceSvIf::chainAddEdges( ::nebula::storage::cpp2::ExecResponse& /*_return*/, const  ::nebula::storage::cpp2::ChainAddEdgesRequest& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("chainAddEdges");
}

folly::SemiFuture< ::nebula::storage::cpp2::ExecResponse> InternalStorageServiceSvIf::semifuture_chainAddEdges(const  ::nebula::storage::cpp2::ChainAddEdgesRequest& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::storage::cpp2::ExecResponse& _return) { chainAddEdges(_return, p_req); });
}

folly::Future< ::nebula::storage::cpp2::ExecResponse> InternalStorageServiceSvIf::future_chainAddEdges(const  ::nebula::storage::cpp2::ChainAddEdgesRequest& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_chainAddEdges(p_req), std::move(ka));
}

void InternalStorageServiceSvIf::async_tm_chainAddEdges(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::ExecResponse>> callback, const  ::nebula::storage::cpp2::ChainAddEdgesRequest& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_chainAddEdges(p_req);
  });
}

void InternalStorageServiceSvIf::chainUpdateEdge( ::nebula::storage::cpp2::UpdateResponse& /*_return*/, const  ::nebula::storage::cpp2::ChainUpdateEdgeRequest& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("chainUpdateEdge");
}

folly::SemiFuture< ::nebula::storage::cpp2::UpdateResponse> InternalStorageServiceSvIf::semifuture_chainUpdateEdge(const  ::nebula::storage::cpp2::ChainUpdateEdgeRequest& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::storage::cpp2::UpdateResponse& _return) { chainUpdateEdge(_return, p_req); });
}

folly::Future< ::nebula::storage::cpp2::UpdateResponse> InternalStorageServiceSvIf::future_chainUpdateEdge(const  ::nebula::storage::cpp2::ChainUpdateEdgeRequest& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_chainUpdateEdge(p_req), std::move(ka));
}

void InternalStorageServiceSvIf::async_tm_chainUpdateEdge(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::UpdateResponse>> callback, const  ::nebula::storage::cpp2::ChainUpdateEdgeRequest& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_chainUpdateEdge(p_req);
  });
}

void InternalStorageServiceSvIf::chainDeleteEdges( ::nebula::storage::cpp2::ExecResponse& /*_return*/, const  ::nebula::storage::cpp2::ChainDeleteEdgesRequest& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("chainDeleteEdges");
}

folly::SemiFuture< ::nebula::storage::cpp2::ExecResponse> InternalStorageServiceSvIf::semifuture_chainDeleteEdges(const  ::nebula::storage::cpp2::ChainDeleteEdgesRequest& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::storage::cpp2::ExecResponse& _return) { chainDeleteEdges(_return, p_req); });
}

folly::Future< ::nebula::storage::cpp2::ExecResponse> InternalStorageServiceSvIf::future_chainDeleteEdges(const  ::nebula::storage::cpp2::ChainDeleteEdgesRequest& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_chainDeleteEdges(p_req), std::move(ka));
}

void InternalStorageServiceSvIf::async_tm_chainDeleteEdges(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::ExecResponse>> callback, const  ::nebula::storage::cpp2::ChainDeleteEdgesRequest& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_chainDeleteEdges(p_req);
  });
}

void InternalStorageServiceSvNull::chainAddEdges( ::nebula::storage::cpp2::ExecResponse& /*_return*/, const  ::nebula::storage::cpp2::ChainAddEdgesRequest& /*req*/) {}

void InternalStorageServiceSvNull::chainUpdateEdge( ::nebula::storage::cpp2::UpdateResponse& /*_return*/, const  ::nebula::storage::cpp2::ChainUpdateEdgeRequest& /*req*/) {}

void InternalStorageServiceSvNull::chainDeleteEdges( ::nebula::storage::cpp2::ExecResponse& /*_return*/, const  ::nebula::storage::cpp2::ChainDeleteEdgesRequest& /*req*/) {}



const char* InternalStorageServiceAsyncProcessor::getServiceName() {
  return "InternalStorageService";
}

void InternalStorageServiceAsyncProcessor::getServiceMetadata(apache::thrift::metadata::ThriftServiceMetadataResponse& response) {
  ::apache::thrift::detail::md::ServiceMetadata<InternalStorageServiceSvIf>::gen(*response.metadata_ref(), *response.context_ref());
}

void InternalStorageServiceAsyncProcessor::processSerializedRequest(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  apache::thrift::detail::ap::process(this, std::move(req), std::move(serializedRequest), protType, context, eb, tm);
}

std::shared_ptr<folly::RequestContext> InternalStorageServiceAsyncProcessor::getBaseContextForRequest() {
  return iface_->getBaseContextForRequest();
}

const InternalStorageServiceAsyncProcessor::ProcessMap& InternalStorageServiceAsyncProcessor::getBinaryProtocolProcessMap() {
  return binaryProcessMap_;
}

const InternalStorageServiceAsyncProcessor::ProcessMap InternalStorageServiceAsyncProcessor::binaryProcessMap_ {
  {"chainAddEdges", &InternalStorageServiceAsyncProcessor::setUpAndProcess_chainAddEdges<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"chainUpdateEdge", &InternalStorageServiceAsyncProcessor::setUpAndProcess_chainUpdateEdge<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"chainDeleteEdges", &InternalStorageServiceAsyncProcessor::setUpAndProcess_chainDeleteEdges<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
};

const InternalStorageServiceAsyncProcessor::ProcessMap& InternalStorageServiceAsyncProcessor::getCompactProtocolProcessMap() {
  return compactProcessMap_;
}

const InternalStorageServiceAsyncProcessor::ProcessMap InternalStorageServiceAsyncProcessor::compactProcessMap_ {
  {"chainAddEdges", &InternalStorageServiceAsyncProcessor::setUpAndProcess_chainAddEdges<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"chainUpdateEdge", &InternalStorageServiceAsyncProcessor::setUpAndProcess_chainUpdateEdge<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"chainDeleteEdges", &InternalStorageServiceAsyncProcessor::setUpAndProcess_chainDeleteEdges<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
};

}}} // nebula::storage::cpp2
