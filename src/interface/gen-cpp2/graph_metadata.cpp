/**
 * Autogenerated by Thrift for graph.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include <thrift/lib/cpp2/gen/module_metadata_cpp.h>
#include "graph_metadata.h"

namespace apache {
namespace thrift {
namespace detail {
namespace md {
using ThriftMetadata = ::apache::thrift::metadata::ThriftMetadata;
using ThriftPrimitiveType = ::apache::thrift::metadata::ThriftPrimitiveType;
using ThriftType = ::apache::thrift::metadata::ThriftType;
using ThriftService = ::apache::thrift::metadata::ThriftService;
using ThriftServiceContext = ::apache::thrift::metadata::ThriftServiceContext;
using ThriftFunctionGenerator = void (*)(ThriftMetadata&, ThriftService&);


const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::nebula::graph::cpp2::ProfilingStats>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("graph.ProfilingStats", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& graph_ProfilingStats = res.first->second;
  graph_ProfilingStats.name_ref() = "graph.ProfilingStats";
  graph_ProfilingStats.is_union_ref() = false;
  static const EncodedThriftField
  graph_ProfilingStats_fields[] = {
    std::make_tuple(1, "rows", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(2, "exec_duration_in_us", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(3, "total_duration_in_us", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(4, "other_stats", true, std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE), std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE)), std::vector<ThriftConstStruct>{}),
  };
  for (const auto& f : graph_ProfilingStats_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = std::get<4>(f);
    graph_ProfilingStats.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::nebula::graph::cpp2::PlanNodeBranchInfo>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("graph.PlanNodeBranchInfo", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& graph_PlanNodeBranchInfo = res.first->second;
  graph_PlanNodeBranchInfo.name_ref() = "graph.PlanNodeBranchInfo";
  graph_PlanNodeBranchInfo.is_union_ref() = false;
  static const EncodedThriftField
  graph_PlanNodeBranchInfo_fields[] = {
    std::make_tuple(1, "is_do_branch", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(2, "condition_node_id", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{}),
  };
  for (const auto& f : graph_PlanNodeBranchInfo_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = std::get<4>(f);
    graph_PlanNodeBranchInfo.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::nebula::graph::cpp2::Pair>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("graph.Pair", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& graph_Pair = res.first->second;
  graph_Pair.name_ref() = "graph.Pair";
  graph_Pair.is_union_ref() = false;
  static const EncodedThriftField
  graph_Pair_fields[] = {
    std::make_tuple(1, "key", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(2, "value", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE), std::vector<ThriftConstStruct>{}),
  };
  for (const auto& f : graph_Pair_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = std::get<4>(f);
    graph_Pair.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::nebula::graph::cpp2::PlanNodeDescription>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("graph.PlanNodeDescription", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& graph_PlanNodeDescription = res.first->second;
  graph_PlanNodeDescription.name_ref() = "graph.PlanNodeDescription";
  graph_PlanNodeDescription.is_union_ref() = false;
  static const EncodedThriftField
  graph_PlanNodeDescription_fields[] = {
    std::make_tuple(1, "name", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(2, "id", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(3, "output_var", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(4, "description", true, std::make_unique<List>(std::make_unique<Struct< ::nebula::graph::cpp2::Pair>>("graph.Pair")), std::vector<ThriftConstStruct>{}),
    std::make_tuple(5, "profiles", true, std::make_unique<List>(std::make_unique<Struct< ::nebula::graph::cpp2::ProfilingStats>>("graph.ProfilingStats")), std::vector<ThriftConstStruct>{}),
    std::make_tuple(6, "branch_info", true, std::make_unique<Struct< ::nebula::graph::cpp2::PlanNodeBranchInfo>>("graph.PlanNodeBranchInfo"), std::vector<ThriftConstStruct>{}),
    std::make_tuple(7, "dependencies", true, std::make_unique<List>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE)), std::vector<ThriftConstStruct>{}),
  };
  for (const auto& f : graph_PlanNodeDescription_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = std::get<4>(f);
    graph_PlanNodeDescription.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::nebula::graph::cpp2::PlanDescription>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("graph.PlanDescription", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& graph_PlanDescription = res.first->second;
  graph_PlanDescription.name_ref() = "graph.PlanDescription";
  graph_PlanDescription.is_union_ref() = false;
  static const EncodedThriftField
  graph_PlanDescription_fields[] = {
    std::make_tuple(1, "plan_node_descs", false, std::make_unique<List>(std::make_unique<Struct< ::nebula::graph::cpp2::PlanNodeDescription>>("graph.PlanNodeDescription")), std::vector<ThriftConstStruct>{}),
    std::make_tuple(2, "node_index_map", false, std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE)), std::vector<ThriftConstStruct>{}),
    std::make_tuple(3, "format", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(4, "optimize_time_in_us", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
  };
  for (const auto& f : graph_PlanDescription_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = std::get<4>(f);
    graph_PlanDescription.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::nebula::graph::cpp2::ExecutionResponse>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("graph.ExecutionResponse", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& graph_ExecutionResponse = res.first->second;
  graph_ExecutionResponse.name_ref() = "graph.ExecutionResponse";
  graph_ExecutionResponse.is_union_ref() = false;
  static const EncodedThriftField
  graph_ExecutionResponse_fields[] = {
    std::make_tuple(1, "error_code", false, std::make_unique<Enum< ::nebula::cpp2::ErrorCode>>("common.ErrorCode"), std::vector<ThriftConstStruct>{}),
    std::make_tuple(2, "latency_in_us", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(3, "data", true, std::make_unique<Struct< ::nebula::cpp2::DataSet>>("common.DataSet"), std::vector<ThriftConstStruct>{}),
    std::make_tuple(4, "space_name", true, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(5, "error_msg", true, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(6, "plan_desc", true, std::make_unique<Struct< ::nebula::graph::cpp2::PlanDescription>>("graph.PlanDescription"), std::vector<ThriftConstStruct>{}),
    std::make_tuple(7, "comment", true, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE), std::vector<ThriftConstStruct>{}),
  };
  for (const auto& f : graph_ExecutionResponse_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = std::get<4>(f);
    graph_ExecutionResponse.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::nebula::graph::cpp2::AuthResponse>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("graph.AuthResponse", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& graph_AuthResponse = res.first->second;
  graph_AuthResponse.name_ref() = "graph.AuthResponse";
  graph_AuthResponse.is_union_ref() = false;
  static const EncodedThriftField
  graph_AuthResponse_fields[] = {
    std::make_tuple(1, "error_code", false, std::make_unique<Enum< ::nebula::cpp2::ErrorCode>>("common.ErrorCode"), std::vector<ThriftConstStruct>{}),
    std::make_tuple(2, "error_msg", true, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(3, "session_id", true, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(4, "time_zone_offset_seconds", true, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(5, "time_zone_name", true, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE), std::vector<ThriftConstStruct>{}),
  };
  for (const auto& f : graph_AuthResponse_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = std::get<4>(f);
    graph_AuthResponse.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::nebula::graph::cpp2::VerifyClientVersionResp>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("graph.VerifyClientVersionResp", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& graph_VerifyClientVersionResp = res.first->second;
  graph_VerifyClientVersionResp.name_ref() = "graph.VerifyClientVersionResp";
  graph_VerifyClientVersionResp.is_union_ref() = false;
  static const EncodedThriftField
  graph_VerifyClientVersionResp_fields[] = {
    std::make_tuple(1, "error_code", false, std::make_unique<Enum< ::nebula::cpp2::ErrorCode>>("common.ErrorCode"), std::vector<ThriftConstStruct>{}),
    std::make_tuple(2, "error_msg", true, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE), std::vector<ThriftConstStruct>{}),
  };
  for (const auto& f : graph_VerifyClientVersionResp_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = std::get<4>(f);
    graph_VerifyClientVersionResp.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::nebula::graph::cpp2::VerifyClientVersionReq>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("graph.VerifyClientVersionReq", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& graph_VerifyClientVersionReq = res.first->second;
  graph_VerifyClientVersionReq.name_ref() = "graph.VerifyClientVersionReq";
  graph_VerifyClientVersionReq.is_union_ref() = false;
  static const EncodedThriftField
  graph_VerifyClientVersionReq_fields[] = {
    std::make_tuple(1, "version", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE), std::vector<ThriftConstStruct>{}),
  };
  for (const auto& f : graph_VerifyClientVersionReq_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = std::get<4>(f);
    graph_VerifyClientVersionReq.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}

void ServiceMetadata<::nebula::graph::cpp2::GraphServiceSvIf>::gen_authenticate(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "authenticate";
  auto func_ret_type = std::make_unique<Struct< ::nebula::graph::cpp2::AuthResponse>>("graph.AuthResponse");
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField graph_GraphService_authenticate_username_1;
  graph_GraphService_authenticate_username_1.id_ref() = 1;
  graph_GraphService_authenticate_username_1.name_ref() = "username";
  graph_GraphService_authenticate_username_1.is_optional_ref() = false;
  auto graph_GraphService_authenticate_username_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE);
  graph_GraphService_authenticate_username_1_type->writeAndGenType(*graph_GraphService_authenticate_username_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(graph_GraphService_authenticate_username_1));
  ::apache::thrift::metadata::ThriftField graph_GraphService_authenticate_password_2;
  graph_GraphService_authenticate_password_2.id_ref() = 2;
  graph_GraphService_authenticate_password_2.name_ref() = "password";
  graph_GraphService_authenticate_password_2.is_optional_ref() = false;
  auto graph_GraphService_authenticate_password_2_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE);
  graph_GraphService_authenticate_password_2_type->writeAndGenType(*graph_GraphService_authenticate_password_2.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(graph_GraphService_authenticate_password_2));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::nebula::graph::cpp2::GraphServiceSvIf>::gen_signout(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "signout";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_VOID_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField graph_GraphService_signout_sessionId_1;
  graph_GraphService_signout_sessionId_1.id_ref() = 1;
  graph_GraphService_signout_sessionId_1.name_ref() = "sessionId";
  graph_GraphService_signout_sessionId_1.is_optional_ref() = false;
  auto graph_GraphService_signout_sessionId_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE);
  graph_GraphService_signout_sessionId_1_type->writeAndGenType(*graph_GraphService_signout_sessionId_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(graph_GraphService_signout_sessionId_1));
  func.is_oneway_ref() = true;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::nebula::graph::cpp2::GraphServiceSvIf>::gen_execute(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "execute";
  auto func_ret_type = std::make_unique<Struct< ::nebula::graph::cpp2::ExecutionResponse>>("graph.ExecutionResponse");
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField graph_GraphService_execute_sessionId_1;
  graph_GraphService_execute_sessionId_1.id_ref() = 1;
  graph_GraphService_execute_sessionId_1.name_ref() = "sessionId";
  graph_GraphService_execute_sessionId_1.is_optional_ref() = false;
  auto graph_GraphService_execute_sessionId_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE);
  graph_GraphService_execute_sessionId_1_type->writeAndGenType(*graph_GraphService_execute_sessionId_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(graph_GraphService_execute_sessionId_1));
  ::apache::thrift::metadata::ThriftField graph_GraphService_execute_stmt_2;
  graph_GraphService_execute_stmt_2.id_ref() = 2;
  graph_GraphService_execute_stmt_2.name_ref() = "stmt";
  graph_GraphService_execute_stmt_2.is_optional_ref() = false;
  auto graph_GraphService_execute_stmt_2_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE);
  graph_GraphService_execute_stmt_2_type->writeAndGenType(*graph_GraphService_execute_stmt_2.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(graph_GraphService_execute_stmt_2));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::nebula::graph::cpp2::GraphServiceSvIf>::gen_executeWithParameter(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "executeWithParameter";
  auto func_ret_type = std::make_unique<Struct< ::nebula::graph::cpp2::ExecutionResponse>>("graph.ExecutionResponse");
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField graph_GraphService_executeWithParameter_sessionId_1;
  graph_GraphService_executeWithParameter_sessionId_1.id_ref() = 1;
  graph_GraphService_executeWithParameter_sessionId_1.name_ref() = "sessionId";
  graph_GraphService_executeWithParameter_sessionId_1.is_optional_ref() = false;
  auto graph_GraphService_executeWithParameter_sessionId_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE);
  graph_GraphService_executeWithParameter_sessionId_1_type->writeAndGenType(*graph_GraphService_executeWithParameter_sessionId_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(graph_GraphService_executeWithParameter_sessionId_1));
  ::apache::thrift::metadata::ThriftField graph_GraphService_executeWithParameter_stmt_2;
  graph_GraphService_executeWithParameter_stmt_2.id_ref() = 2;
  graph_GraphService_executeWithParameter_stmt_2.name_ref() = "stmt";
  graph_GraphService_executeWithParameter_stmt_2.is_optional_ref() = false;
  auto graph_GraphService_executeWithParameter_stmt_2_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE);
  graph_GraphService_executeWithParameter_stmt_2_type->writeAndGenType(*graph_GraphService_executeWithParameter_stmt_2.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(graph_GraphService_executeWithParameter_stmt_2));
  ::apache::thrift::metadata::ThriftField graph_GraphService_executeWithParameter_parameterMap_3;
  graph_GraphService_executeWithParameter_parameterMap_3.id_ref() = 3;
  graph_GraphService_executeWithParameter_parameterMap_3.name_ref() = "parameterMap";
  graph_GraphService_executeWithParameter_parameterMap_3.is_optional_ref() = false;
  auto graph_GraphService_executeWithParameter_parameterMap_3_type = std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE), std::make_unique<Union< ::nebula::cpp2::Value>>("common.Value"));
  graph_GraphService_executeWithParameter_parameterMap_3_type->writeAndGenType(*graph_GraphService_executeWithParameter_parameterMap_3.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(graph_GraphService_executeWithParameter_parameterMap_3));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::nebula::graph::cpp2::GraphServiceSvIf>::gen_executeJson(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "executeJson";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField graph_GraphService_executeJson_sessionId_1;
  graph_GraphService_executeJson_sessionId_1.id_ref() = 1;
  graph_GraphService_executeJson_sessionId_1.name_ref() = "sessionId";
  graph_GraphService_executeJson_sessionId_1.is_optional_ref() = false;
  auto graph_GraphService_executeJson_sessionId_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE);
  graph_GraphService_executeJson_sessionId_1_type->writeAndGenType(*graph_GraphService_executeJson_sessionId_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(graph_GraphService_executeJson_sessionId_1));
  ::apache::thrift::metadata::ThriftField graph_GraphService_executeJson_stmt_2;
  graph_GraphService_executeJson_stmt_2.id_ref() = 2;
  graph_GraphService_executeJson_stmt_2.name_ref() = "stmt";
  graph_GraphService_executeJson_stmt_2.is_optional_ref() = false;
  auto graph_GraphService_executeJson_stmt_2_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE);
  graph_GraphService_executeJson_stmt_2_type->writeAndGenType(*graph_GraphService_executeJson_stmt_2.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(graph_GraphService_executeJson_stmt_2));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::nebula::graph::cpp2::GraphServiceSvIf>::gen_executeJsonWithParameter(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "executeJsonWithParameter";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField graph_GraphService_executeJsonWithParameter_sessionId_1;
  graph_GraphService_executeJsonWithParameter_sessionId_1.id_ref() = 1;
  graph_GraphService_executeJsonWithParameter_sessionId_1.name_ref() = "sessionId";
  graph_GraphService_executeJsonWithParameter_sessionId_1.is_optional_ref() = false;
  auto graph_GraphService_executeJsonWithParameter_sessionId_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE);
  graph_GraphService_executeJsonWithParameter_sessionId_1_type->writeAndGenType(*graph_GraphService_executeJsonWithParameter_sessionId_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(graph_GraphService_executeJsonWithParameter_sessionId_1));
  ::apache::thrift::metadata::ThriftField graph_GraphService_executeJsonWithParameter_stmt_2;
  graph_GraphService_executeJsonWithParameter_stmt_2.id_ref() = 2;
  graph_GraphService_executeJsonWithParameter_stmt_2.name_ref() = "stmt";
  graph_GraphService_executeJsonWithParameter_stmt_2.is_optional_ref() = false;
  auto graph_GraphService_executeJsonWithParameter_stmt_2_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE);
  graph_GraphService_executeJsonWithParameter_stmt_2_type->writeAndGenType(*graph_GraphService_executeJsonWithParameter_stmt_2.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(graph_GraphService_executeJsonWithParameter_stmt_2));
  ::apache::thrift::metadata::ThriftField graph_GraphService_executeJsonWithParameter_parameterMap_3;
  graph_GraphService_executeJsonWithParameter_parameterMap_3.id_ref() = 3;
  graph_GraphService_executeJsonWithParameter_parameterMap_3.name_ref() = "parameterMap";
  graph_GraphService_executeJsonWithParameter_parameterMap_3.is_optional_ref() = false;
  auto graph_GraphService_executeJsonWithParameter_parameterMap_3_type = std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE), std::make_unique<Union< ::nebula::cpp2::Value>>("common.Value"));
  graph_GraphService_executeJsonWithParameter_parameterMap_3_type->writeAndGenType(*graph_GraphService_executeJsonWithParameter_parameterMap_3.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(graph_GraphService_executeJsonWithParameter_parameterMap_3));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::nebula::graph::cpp2::GraphServiceSvIf>::gen_verifyClientVersion(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "verifyClientVersion";
  auto func_ret_type = std::make_unique<Struct< ::nebula::graph::cpp2::VerifyClientVersionResp>>("graph.VerifyClientVersionResp");
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField graph_GraphService_verifyClientVersion_req_1;
  graph_GraphService_verifyClientVersion_req_1.id_ref() = 1;
  graph_GraphService_verifyClientVersion_req_1.name_ref() = "req";
  graph_GraphService_verifyClientVersion_req_1.is_optional_ref() = false;
  auto graph_GraphService_verifyClientVersion_req_1_type = std::make_unique<Struct< ::nebula::graph::cpp2::VerifyClientVersionReq>>("graph.VerifyClientVersionReq");
  graph_GraphService_verifyClientVersion_req_1_type->writeAndGenType(*graph_GraphService_verifyClientVersion_req_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(graph_GraphService_verifyClientVersion_req_1));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}

void ServiceMetadata<::nebula::graph::cpp2::GraphServiceSvIf>::gen(ThriftMetadata& metadata, ThriftServiceContext& context) {
  (void) metadata;
  ::apache::thrift::metadata::ThriftService graph_GraphService;
  graph_GraphService.name_ref() = "graph.GraphService";
  static const ThriftFunctionGenerator functions[] = {
    ServiceMetadata<::nebula::graph::cpp2::GraphServiceSvIf>::gen_authenticate,
    ServiceMetadata<::nebula::graph::cpp2::GraphServiceSvIf>::gen_signout,
    ServiceMetadata<::nebula::graph::cpp2::GraphServiceSvIf>::gen_execute,
    ServiceMetadata<::nebula::graph::cpp2::GraphServiceSvIf>::gen_executeWithParameter,
    ServiceMetadata<::nebula::graph::cpp2::GraphServiceSvIf>::gen_executeJson,
    ServiceMetadata<::nebula::graph::cpp2::GraphServiceSvIf>::gen_executeJsonWithParameter,
    ServiceMetadata<::nebula::graph::cpp2::GraphServiceSvIf>::gen_verifyClientVersion,
  };
  for (auto& function_gen : functions) {
    function_gen(metadata, graph_GraphService);
  }
  context.service_info_ref() = std::move(graph_GraphService);
  ::apache::thrift::metadata::ThriftModuleContext module;
  module.name_ref() = "graph";
  context.module_ref() = std::move(module);
}
} // namespace md
} // namespace detail
} // namespace thrift
} // namespace apache
