/**
 * Autogenerated by Thrift for meta.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "MetaService.h"
#include "MetaService.tcc"
#include "meta_metadata.h"
#include <thrift/lib/cpp2/gen/service_cpp.h>

namespace nebula { namespace meta { namespace cpp2 {
std::unique_ptr<apache::thrift::AsyncProcessor> MetaServiceSvIf::getProcessor() {
  return std::make_unique<MetaServiceAsyncProcessor>(this);
}


void MetaServiceSvIf::createSpace( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::CreateSpaceReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("createSpace");
}

folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::semifuture_createSpace(const  ::nebula::meta::cpp2::CreateSpaceReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ExecResp& _return) { createSpace(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::future_createSpace(const  ::nebula::meta::cpp2::CreateSpaceReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_createSpace(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_createSpace(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::CreateSpaceReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_createSpace(p_req);
  });
}

void MetaServiceSvIf::dropSpace( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::DropSpaceReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("dropSpace");
}

folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::semifuture_dropSpace(const  ::nebula::meta::cpp2::DropSpaceReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ExecResp& _return) { dropSpace(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::future_dropSpace(const  ::nebula::meta::cpp2::DropSpaceReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_dropSpace(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_dropSpace(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::DropSpaceReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_dropSpace(p_req);
  });
}

void MetaServiceSvIf::getSpace( ::nebula::meta::cpp2::GetSpaceResp& /*_return*/, const  ::nebula::meta::cpp2::GetSpaceReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("getSpace");
}

folly::SemiFuture< ::nebula::meta::cpp2::GetSpaceResp> MetaServiceSvIf::semifuture_getSpace(const  ::nebula::meta::cpp2::GetSpaceReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::GetSpaceResp& _return) { getSpace(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::GetSpaceResp> MetaServiceSvIf::future_getSpace(const  ::nebula::meta::cpp2::GetSpaceReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_getSpace(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_getSpace(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::GetSpaceResp>> callback, const  ::nebula::meta::cpp2::GetSpaceReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_getSpace(p_req);
  });
}

void MetaServiceSvIf::listSpaces( ::nebula::meta::cpp2::ListSpacesResp& /*_return*/, const  ::nebula::meta::cpp2::ListSpacesReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("listSpaces");
}

folly::SemiFuture< ::nebula::meta::cpp2::ListSpacesResp> MetaServiceSvIf::semifuture_listSpaces(const  ::nebula::meta::cpp2::ListSpacesReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ListSpacesResp& _return) { listSpaces(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ListSpacesResp> MetaServiceSvIf::future_listSpaces(const  ::nebula::meta::cpp2::ListSpacesReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_listSpaces(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_listSpaces(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListSpacesResp>> callback, const  ::nebula::meta::cpp2::ListSpacesReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_listSpaces(p_req);
  });
}

void MetaServiceSvIf::createSpaceAs( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::CreateSpaceAsReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("createSpaceAs");
}

folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::semifuture_createSpaceAs(const  ::nebula::meta::cpp2::CreateSpaceAsReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ExecResp& _return) { createSpaceAs(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::future_createSpaceAs(const  ::nebula::meta::cpp2::CreateSpaceAsReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_createSpaceAs(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_createSpaceAs(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::CreateSpaceAsReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_createSpaceAs(p_req);
  });
}

void MetaServiceSvIf::createTag( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::CreateTagReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("createTag");
}

folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::semifuture_createTag(const  ::nebula::meta::cpp2::CreateTagReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ExecResp& _return) { createTag(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::future_createTag(const  ::nebula::meta::cpp2::CreateTagReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_createTag(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_createTag(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::CreateTagReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_createTag(p_req);
  });
}

void MetaServiceSvIf::alterTag( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::AlterTagReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("alterTag");
}

folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::semifuture_alterTag(const  ::nebula::meta::cpp2::AlterTagReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ExecResp& _return) { alterTag(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::future_alterTag(const  ::nebula::meta::cpp2::AlterTagReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_alterTag(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_alterTag(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::AlterTagReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_alterTag(p_req);
  });
}

void MetaServiceSvIf::dropTag( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::DropTagReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("dropTag");
}

folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::semifuture_dropTag(const  ::nebula::meta::cpp2::DropTagReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ExecResp& _return) { dropTag(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::future_dropTag(const  ::nebula::meta::cpp2::DropTagReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_dropTag(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_dropTag(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::DropTagReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_dropTag(p_req);
  });
}

void MetaServiceSvIf::getTag( ::nebula::meta::cpp2::GetTagResp& /*_return*/, const  ::nebula::meta::cpp2::GetTagReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("getTag");
}

folly::SemiFuture< ::nebula::meta::cpp2::GetTagResp> MetaServiceSvIf::semifuture_getTag(const  ::nebula::meta::cpp2::GetTagReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::GetTagResp& _return) { getTag(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::GetTagResp> MetaServiceSvIf::future_getTag(const  ::nebula::meta::cpp2::GetTagReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_getTag(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_getTag(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::GetTagResp>> callback, const  ::nebula::meta::cpp2::GetTagReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_getTag(p_req);
  });
}

void MetaServiceSvIf::listTags( ::nebula::meta::cpp2::ListTagsResp& /*_return*/, const  ::nebula::meta::cpp2::ListTagsReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("listTags");
}

folly::SemiFuture< ::nebula::meta::cpp2::ListTagsResp> MetaServiceSvIf::semifuture_listTags(const  ::nebula::meta::cpp2::ListTagsReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ListTagsResp& _return) { listTags(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ListTagsResp> MetaServiceSvIf::future_listTags(const  ::nebula::meta::cpp2::ListTagsReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_listTags(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_listTags(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListTagsResp>> callback, const  ::nebula::meta::cpp2::ListTagsReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_listTags(p_req);
  });
}

void MetaServiceSvIf::createEdge( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::CreateEdgeReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("createEdge");
}

folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::semifuture_createEdge(const  ::nebula::meta::cpp2::CreateEdgeReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ExecResp& _return) { createEdge(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::future_createEdge(const  ::nebula::meta::cpp2::CreateEdgeReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_createEdge(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_createEdge(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::CreateEdgeReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_createEdge(p_req);
  });
}

void MetaServiceSvIf::alterEdge( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::AlterEdgeReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("alterEdge");
}

folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::semifuture_alterEdge(const  ::nebula::meta::cpp2::AlterEdgeReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ExecResp& _return) { alterEdge(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::future_alterEdge(const  ::nebula::meta::cpp2::AlterEdgeReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_alterEdge(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_alterEdge(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::AlterEdgeReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_alterEdge(p_req);
  });
}

void MetaServiceSvIf::dropEdge( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::DropEdgeReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("dropEdge");
}

folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::semifuture_dropEdge(const  ::nebula::meta::cpp2::DropEdgeReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ExecResp& _return) { dropEdge(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::future_dropEdge(const  ::nebula::meta::cpp2::DropEdgeReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_dropEdge(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_dropEdge(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::DropEdgeReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_dropEdge(p_req);
  });
}

void MetaServiceSvIf::getEdge( ::nebula::meta::cpp2::GetEdgeResp& /*_return*/, const  ::nebula::meta::cpp2::GetEdgeReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("getEdge");
}

folly::SemiFuture< ::nebula::meta::cpp2::GetEdgeResp> MetaServiceSvIf::semifuture_getEdge(const  ::nebula::meta::cpp2::GetEdgeReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::GetEdgeResp& _return) { getEdge(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::GetEdgeResp> MetaServiceSvIf::future_getEdge(const  ::nebula::meta::cpp2::GetEdgeReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_getEdge(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_getEdge(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::GetEdgeResp>> callback, const  ::nebula::meta::cpp2::GetEdgeReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_getEdge(p_req);
  });
}

void MetaServiceSvIf::listEdges( ::nebula::meta::cpp2::ListEdgesResp& /*_return*/, const  ::nebula::meta::cpp2::ListEdgesReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("listEdges");
}

folly::SemiFuture< ::nebula::meta::cpp2::ListEdgesResp> MetaServiceSvIf::semifuture_listEdges(const  ::nebula::meta::cpp2::ListEdgesReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ListEdgesResp& _return) { listEdges(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ListEdgesResp> MetaServiceSvIf::future_listEdges(const  ::nebula::meta::cpp2::ListEdgesReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_listEdges(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_listEdges(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListEdgesResp>> callback, const  ::nebula::meta::cpp2::ListEdgesReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_listEdges(p_req);
  });
}

void MetaServiceSvIf::addHosts( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::AddHostsReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("addHosts");
}

folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::semifuture_addHosts(const  ::nebula::meta::cpp2::AddHostsReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ExecResp& _return) { addHosts(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::future_addHosts(const  ::nebula::meta::cpp2::AddHostsReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_addHosts(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_addHosts(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::AddHostsReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_addHosts(p_req);
  });
}

void MetaServiceSvIf::addHostsIntoZone( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::AddHostsIntoZoneReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("addHostsIntoZone");
}

folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::semifuture_addHostsIntoZone(const  ::nebula::meta::cpp2::AddHostsIntoZoneReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ExecResp& _return) { addHostsIntoZone(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::future_addHostsIntoZone(const  ::nebula::meta::cpp2::AddHostsIntoZoneReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_addHostsIntoZone(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_addHostsIntoZone(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::AddHostsIntoZoneReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_addHostsIntoZone(p_req);
  });
}

void MetaServiceSvIf::dropHosts( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::DropHostsReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("dropHosts");
}

folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::semifuture_dropHosts(const  ::nebula::meta::cpp2::DropHostsReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ExecResp& _return) { dropHosts(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::future_dropHosts(const  ::nebula::meta::cpp2::DropHostsReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_dropHosts(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_dropHosts(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::DropHostsReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_dropHosts(p_req);
  });
}

void MetaServiceSvIf::listHosts( ::nebula::meta::cpp2::ListHostsResp& /*_return*/, const  ::nebula::meta::cpp2::ListHostsReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("listHosts");
}

folly::SemiFuture< ::nebula::meta::cpp2::ListHostsResp> MetaServiceSvIf::semifuture_listHosts(const  ::nebula::meta::cpp2::ListHostsReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ListHostsResp& _return) { listHosts(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ListHostsResp> MetaServiceSvIf::future_listHosts(const  ::nebula::meta::cpp2::ListHostsReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_listHosts(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_listHosts(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListHostsResp>> callback, const  ::nebula::meta::cpp2::ListHostsReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_listHosts(p_req);
  });
}

void MetaServiceSvIf::getPartsAlloc( ::nebula::meta::cpp2::GetPartsAllocResp& /*_return*/, const  ::nebula::meta::cpp2::GetPartsAllocReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("getPartsAlloc");
}

folly::SemiFuture< ::nebula::meta::cpp2::GetPartsAllocResp> MetaServiceSvIf::semifuture_getPartsAlloc(const  ::nebula::meta::cpp2::GetPartsAllocReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::GetPartsAllocResp& _return) { getPartsAlloc(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::GetPartsAllocResp> MetaServiceSvIf::future_getPartsAlloc(const  ::nebula::meta::cpp2::GetPartsAllocReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_getPartsAlloc(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_getPartsAlloc(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::GetPartsAllocResp>> callback, const  ::nebula::meta::cpp2::GetPartsAllocReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_getPartsAlloc(p_req);
  });
}

void MetaServiceSvIf::listParts( ::nebula::meta::cpp2::ListPartsResp& /*_return*/, const  ::nebula::meta::cpp2::ListPartsReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("listParts");
}

folly::SemiFuture< ::nebula::meta::cpp2::ListPartsResp> MetaServiceSvIf::semifuture_listParts(const  ::nebula::meta::cpp2::ListPartsReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ListPartsResp& _return) { listParts(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ListPartsResp> MetaServiceSvIf::future_listParts(const  ::nebula::meta::cpp2::ListPartsReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_listParts(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_listParts(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListPartsResp>> callback, const  ::nebula::meta::cpp2::ListPartsReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_listParts(p_req);
  });
}

void MetaServiceSvIf::multiPut( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::MultiPutReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("multiPut");
}

folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::semifuture_multiPut(const  ::nebula::meta::cpp2::MultiPutReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ExecResp& _return) { multiPut(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::future_multiPut(const  ::nebula::meta::cpp2::MultiPutReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_multiPut(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_multiPut(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::MultiPutReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_multiPut(p_req);
  });
}

void MetaServiceSvIf::get( ::nebula::meta::cpp2::GetResp& /*_return*/, const  ::nebula::meta::cpp2::GetReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("get");
}

folly::SemiFuture< ::nebula::meta::cpp2::GetResp> MetaServiceSvIf::semifuture_get(const  ::nebula::meta::cpp2::GetReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::GetResp& _return) { get(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::GetResp> MetaServiceSvIf::future_get(const  ::nebula::meta::cpp2::GetReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_get(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_get(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::GetResp>> callback, const  ::nebula::meta::cpp2::GetReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_get(p_req);
  });
}

void MetaServiceSvIf::multiGet( ::nebula::meta::cpp2::MultiGetResp& /*_return*/, const  ::nebula::meta::cpp2::MultiGetReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("multiGet");
}

folly::SemiFuture< ::nebula::meta::cpp2::MultiGetResp> MetaServiceSvIf::semifuture_multiGet(const  ::nebula::meta::cpp2::MultiGetReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::MultiGetResp& _return) { multiGet(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::MultiGetResp> MetaServiceSvIf::future_multiGet(const  ::nebula::meta::cpp2::MultiGetReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_multiGet(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_multiGet(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::MultiGetResp>> callback, const  ::nebula::meta::cpp2::MultiGetReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_multiGet(p_req);
  });
}

void MetaServiceSvIf::remove( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::RemoveReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("remove");
}

folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::semifuture_remove(const  ::nebula::meta::cpp2::RemoveReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ExecResp& _return) { remove(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::future_remove(const  ::nebula::meta::cpp2::RemoveReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_remove(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_remove(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::RemoveReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_remove(p_req);
  });
}

void MetaServiceSvIf::removeRange( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::RemoveRangeReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("removeRange");
}

folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::semifuture_removeRange(const  ::nebula::meta::cpp2::RemoveRangeReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ExecResp& _return) { removeRange(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::future_removeRange(const  ::nebula::meta::cpp2::RemoveRangeReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_removeRange(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_removeRange(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::RemoveRangeReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_removeRange(p_req);
  });
}

void MetaServiceSvIf::scan( ::nebula::meta::cpp2::ScanResp& /*_return*/, const  ::nebula::meta::cpp2::ScanReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("scan");
}

folly::SemiFuture< ::nebula::meta::cpp2::ScanResp> MetaServiceSvIf::semifuture_scan(const  ::nebula::meta::cpp2::ScanReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ScanResp& _return) { scan(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ScanResp> MetaServiceSvIf::future_scan(const  ::nebula::meta::cpp2::ScanReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_scan(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_scan(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ScanResp>> callback, const  ::nebula::meta::cpp2::ScanReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_scan(p_req);
  });
}

void MetaServiceSvIf::createTagIndex( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::CreateTagIndexReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("createTagIndex");
}

folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::semifuture_createTagIndex(const  ::nebula::meta::cpp2::CreateTagIndexReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ExecResp& _return) { createTagIndex(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::future_createTagIndex(const  ::nebula::meta::cpp2::CreateTagIndexReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_createTagIndex(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_createTagIndex(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::CreateTagIndexReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_createTagIndex(p_req);
  });
}

void MetaServiceSvIf::dropTagIndex( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::DropTagIndexReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("dropTagIndex");
}

folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::semifuture_dropTagIndex(const  ::nebula::meta::cpp2::DropTagIndexReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ExecResp& _return) { dropTagIndex(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::future_dropTagIndex(const  ::nebula::meta::cpp2::DropTagIndexReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_dropTagIndex(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_dropTagIndex(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::DropTagIndexReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_dropTagIndex(p_req);
  });
}

void MetaServiceSvIf::getTagIndex( ::nebula::meta::cpp2::GetTagIndexResp& /*_return*/, const  ::nebula::meta::cpp2::GetTagIndexReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("getTagIndex");
}

folly::SemiFuture< ::nebula::meta::cpp2::GetTagIndexResp> MetaServiceSvIf::semifuture_getTagIndex(const  ::nebula::meta::cpp2::GetTagIndexReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::GetTagIndexResp& _return) { getTagIndex(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::GetTagIndexResp> MetaServiceSvIf::future_getTagIndex(const  ::nebula::meta::cpp2::GetTagIndexReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_getTagIndex(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_getTagIndex(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::GetTagIndexResp>> callback, const  ::nebula::meta::cpp2::GetTagIndexReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_getTagIndex(p_req);
  });
}

void MetaServiceSvIf::listTagIndexes( ::nebula::meta::cpp2::ListTagIndexesResp& /*_return*/, const  ::nebula::meta::cpp2::ListTagIndexesReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("listTagIndexes");
}

folly::SemiFuture< ::nebula::meta::cpp2::ListTagIndexesResp> MetaServiceSvIf::semifuture_listTagIndexes(const  ::nebula::meta::cpp2::ListTagIndexesReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ListTagIndexesResp& _return) { listTagIndexes(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ListTagIndexesResp> MetaServiceSvIf::future_listTagIndexes(const  ::nebula::meta::cpp2::ListTagIndexesReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_listTagIndexes(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_listTagIndexes(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListTagIndexesResp>> callback, const  ::nebula::meta::cpp2::ListTagIndexesReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_listTagIndexes(p_req);
  });
}

void MetaServiceSvIf::rebuildTagIndex( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::RebuildIndexReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("rebuildTagIndex");
}

folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::semifuture_rebuildTagIndex(const  ::nebula::meta::cpp2::RebuildIndexReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ExecResp& _return) { rebuildTagIndex(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::future_rebuildTagIndex(const  ::nebula::meta::cpp2::RebuildIndexReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_rebuildTagIndex(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_rebuildTagIndex(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::RebuildIndexReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_rebuildTagIndex(p_req);
  });
}

void MetaServiceSvIf::listTagIndexStatus( ::nebula::meta::cpp2::ListIndexStatusResp& /*_return*/, const  ::nebula::meta::cpp2::ListIndexStatusReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("listTagIndexStatus");
}

folly::SemiFuture< ::nebula::meta::cpp2::ListIndexStatusResp> MetaServiceSvIf::semifuture_listTagIndexStatus(const  ::nebula::meta::cpp2::ListIndexStatusReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ListIndexStatusResp& _return) { listTagIndexStatus(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ListIndexStatusResp> MetaServiceSvIf::future_listTagIndexStatus(const  ::nebula::meta::cpp2::ListIndexStatusReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_listTagIndexStatus(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_listTagIndexStatus(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListIndexStatusResp>> callback, const  ::nebula::meta::cpp2::ListIndexStatusReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_listTagIndexStatus(p_req);
  });
}

void MetaServiceSvIf::createEdgeIndex( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::CreateEdgeIndexReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("createEdgeIndex");
}

folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::semifuture_createEdgeIndex(const  ::nebula::meta::cpp2::CreateEdgeIndexReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ExecResp& _return) { createEdgeIndex(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::future_createEdgeIndex(const  ::nebula::meta::cpp2::CreateEdgeIndexReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_createEdgeIndex(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_createEdgeIndex(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::CreateEdgeIndexReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_createEdgeIndex(p_req);
  });
}

void MetaServiceSvIf::dropEdgeIndex( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::DropEdgeIndexReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("dropEdgeIndex");
}

folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::semifuture_dropEdgeIndex(const  ::nebula::meta::cpp2::DropEdgeIndexReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ExecResp& _return) { dropEdgeIndex(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::future_dropEdgeIndex(const  ::nebula::meta::cpp2::DropEdgeIndexReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_dropEdgeIndex(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_dropEdgeIndex(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::DropEdgeIndexReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_dropEdgeIndex(p_req);
  });
}

void MetaServiceSvIf::getEdgeIndex( ::nebula::meta::cpp2::GetEdgeIndexResp& /*_return*/, const  ::nebula::meta::cpp2::GetEdgeIndexReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("getEdgeIndex");
}

folly::SemiFuture< ::nebula::meta::cpp2::GetEdgeIndexResp> MetaServiceSvIf::semifuture_getEdgeIndex(const  ::nebula::meta::cpp2::GetEdgeIndexReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::GetEdgeIndexResp& _return) { getEdgeIndex(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::GetEdgeIndexResp> MetaServiceSvIf::future_getEdgeIndex(const  ::nebula::meta::cpp2::GetEdgeIndexReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_getEdgeIndex(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_getEdgeIndex(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::GetEdgeIndexResp>> callback, const  ::nebula::meta::cpp2::GetEdgeIndexReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_getEdgeIndex(p_req);
  });
}

void MetaServiceSvIf::listEdgeIndexes( ::nebula::meta::cpp2::ListEdgeIndexesResp& /*_return*/, const  ::nebula::meta::cpp2::ListEdgeIndexesReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("listEdgeIndexes");
}

folly::SemiFuture< ::nebula::meta::cpp2::ListEdgeIndexesResp> MetaServiceSvIf::semifuture_listEdgeIndexes(const  ::nebula::meta::cpp2::ListEdgeIndexesReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ListEdgeIndexesResp& _return) { listEdgeIndexes(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ListEdgeIndexesResp> MetaServiceSvIf::future_listEdgeIndexes(const  ::nebula::meta::cpp2::ListEdgeIndexesReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_listEdgeIndexes(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_listEdgeIndexes(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListEdgeIndexesResp>> callback, const  ::nebula::meta::cpp2::ListEdgeIndexesReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_listEdgeIndexes(p_req);
  });
}

void MetaServiceSvIf::rebuildEdgeIndex( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::RebuildIndexReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("rebuildEdgeIndex");
}

folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::semifuture_rebuildEdgeIndex(const  ::nebula::meta::cpp2::RebuildIndexReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ExecResp& _return) { rebuildEdgeIndex(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::future_rebuildEdgeIndex(const  ::nebula::meta::cpp2::RebuildIndexReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_rebuildEdgeIndex(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_rebuildEdgeIndex(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::RebuildIndexReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_rebuildEdgeIndex(p_req);
  });
}

void MetaServiceSvIf::listEdgeIndexStatus( ::nebula::meta::cpp2::ListIndexStatusResp& /*_return*/, const  ::nebula::meta::cpp2::ListIndexStatusReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("listEdgeIndexStatus");
}

folly::SemiFuture< ::nebula::meta::cpp2::ListIndexStatusResp> MetaServiceSvIf::semifuture_listEdgeIndexStatus(const  ::nebula::meta::cpp2::ListIndexStatusReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ListIndexStatusResp& _return) { listEdgeIndexStatus(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ListIndexStatusResp> MetaServiceSvIf::future_listEdgeIndexStatus(const  ::nebula::meta::cpp2::ListIndexStatusReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_listEdgeIndexStatus(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_listEdgeIndexStatus(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListIndexStatusResp>> callback, const  ::nebula::meta::cpp2::ListIndexStatusReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_listEdgeIndexStatus(p_req);
  });
}

void MetaServiceSvIf::createUser( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::CreateUserReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("createUser");
}

folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::semifuture_createUser(const  ::nebula::meta::cpp2::CreateUserReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ExecResp& _return) { createUser(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::future_createUser(const  ::nebula::meta::cpp2::CreateUserReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_createUser(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_createUser(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::CreateUserReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_createUser(p_req);
  });
}

void MetaServiceSvIf::dropUser( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::DropUserReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("dropUser");
}

folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::semifuture_dropUser(const  ::nebula::meta::cpp2::DropUserReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ExecResp& _return) { dropUser(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::future_dropUser(const  ::nebula::meta::cpp2::DropUserReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_dropUser(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_dropUser(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::DropUserReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_dropUser(p_req);
  });
}

void MetaServiceSvIf::alterUser( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::AlterUserReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("alterUser");
}

folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::semifuture_alterUser(const  ::nebula::meta::cpp2::AlterUserReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ExecResp& _return) { alterUser(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::future_alterUser(const  ::nebula::meta::cpp2::AlterUserReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_alterUser(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_alterUser(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::AlterUserReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_alterUser(p_req);
  });
}

void MetaServiceSvIf::grantRole( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::GrantRoleReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("grantRole");
}

folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::semifuture_grantRole(const  ::nebula::meta::cpp2::GrantRoleReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ExecResp& _return) { grantRole(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::future_grantRole(const  ::nebula::meta::cpp2::GrantRoleReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_grantRole(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_grantRole(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::GrantRoleReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_grantRole(p_req);
  });
}

void MetaServiceSvIf::revokeRole( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::RevokeRoleReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("revokeRole");
}

folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::semifuture_revokeRole(const  ::nebula::meta::cpp2::RevokeRoleReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ExecResp& _return) { revokeRole(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::future_revokeRole(const  ::nebula::meta::cpp2::RevokeRoleReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_revokeRole(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_revokeRole(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::RevokeRoleReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_revokeRole(p_req);
  });
}

void MetaServiceSvIf::listUsers( ::nebula::meta::cpp2::ListUsersResp& /*_return*/, const  ::nebula::meta::cpp2::ListUsersReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("listUsers");
}

folly::SemiFuture< ::nebula::meta::cpp2::ListUsersResp> MetaServiceSvIf::semifuture_listUsers(const  ::nebula::meta::cpp2::ListUsersReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ListUsersResp& _return) { listUsers(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ListUsersResp> MetaServiceSvIf::future_listUsers(const  ::nebula::meta::cpp2::ListUsersReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_listUsers(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_listUsers(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListUsersResp>> callback, const  ::nebula::meta::cpp2::ListUsersReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_listUsers(p_req);
  });
}

void MetaServiceSvIf::listRoles( ::nebula::meta::cpp2::ListRolesResp& /*_return*/, const  ::nebula::meta::cpp2::ListRolesReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("listRoles");
}

folly::SemiFuture< ::nebula::meta::cpp2::ListRolesResp> MetaServiceSvIf::semifuture_listRoles(const  ::nebula::meta::cpp2::ListRolesReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ListRolesResp& _return) { listRoles(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ListRolesResp> MetaServiceSvIf::future_listRoles(const  ::nebula::meta::cpp2::ListRolesReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_listRoles(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_listRoles(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListRolesResp>> callback, const  ::nebula::meta::cpp2::ListRolesReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_listRoles(p_req);
  });
}

void MetaServiceSvIf::getUserRoles( ::nebula::meta::cpp2::ListRolesResp& /*_return*/, const  ::nebula::meta::cpp2::GetUserRolesReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("getUserRoles");
}

folly::SemiFuture< ::nebula::meta::cpp2::ListRolesResp> MetaServiceSvIf::semifuture_getUserRoles(const  ::nebula::meta::cpp2::GetUserRolesReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ListRolesResp& _return) { getUserRoles(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ListRolesResp> MetaServiceSvIf::future_getUserRoles(const  ::nebula::meta::cpp2::GetUserRolesReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_getUserRoles(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_getUserRoles(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListRolesResp>> callback, const  ::nebula::meta::cpp2::GetUserRolesReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_getUserRoles(p_req);
  });
}

void MetaServiceSvIf::changePassword( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::ChangePasswordReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("changePassword");
}

folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::semifuture_changePassword(const  ::nebula::meta::cpp2::ChangePasswordReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ExecResp& _return) { changePassword(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::future_changePassword(const  ::nebula::meta::cpp2::ChangePasswordReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_changePassword(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_changePassword(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::ChangePasswordReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_changePassword(p_req);
  });
}

void MetaServiceSvIf::heartBeat( ::nebula::meta::cpp2::HBResp& /*_return*/, const  ::nebula::meta::cpp2::HBReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("heartBeat");
}

folly::SemiFuture< ::nebula::meta::cpp2::HBResp> MetaServiceSvIf::semifuture_heartBeat(const  ::nebula::meta::cpp2::HBReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::HBResp& _return) { heartBeat(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::HBResp> MetaServiceSvIf::future_heartBeat(const  ::nebula::meta::cpp2::HBReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_heartBeat(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_heartBeat(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::HBResp>> callback, const  ::nebula::meta::cpp2::HBReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_heartBeat(p_req);
  });
}

void MetaServiceSvIf::regConfig( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::RegConfigReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("regConfig");
}

folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::semifuture_regConfig(const  ::nebula::meta::cpp2::RegConfigReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ExecResp& _return) { regConfig(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::future_regConfig(const  ::nebula::meta::cpp2::RegConfigReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_regConfig(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_regConfig(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::RegConfigReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_regConfig(p_req);
  });
}

void MetaServiceSvIf::getConfig( ::nebula::meta::cpp2::GetConfigResp& /*_return*/, const  ::nebula::meta::cpp2::GetConfigReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("getConfig");
}

folly::SemiFuture< ::nebula::meta::cpp2::GetConfigResp> MetaServiceSvIf::semifuture_getConfig(const  ::nebula::meta::cpp2::GetConfigReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::GetConfigResp& _return) { getConfig(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::GetConfigResp> MetaServiceSvIf::future_getConfig(const  ::nebula::meta::cpp2::GetConfigReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_getConfig(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_getConfig(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::GetConfigResp>> callback, const  ::nebula::meta::cpp2::GetConfigReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_getConfig(p_req);
  });
}

void MetaServiceSvIf::setConfig( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::SetConfigReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("setConfig");
}

folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::semifuture_setConfig(const  ::nebula::meta::cpp2::SetConfigReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ExecResp& _return) { setConfig(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::future_setConfig(const  ::nebula::meta::cpp2::SetConfigReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_setConfig(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_setConfig(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::SetConfigReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_setConfig(p_req);
  });
}

void MetaServiceSvIf::listConfigs( ::nebula::meta::cpp2::ListConfigsResp& /*_return*/, const  ::nebula::meta::cpp2::ListConfigsReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("listConfigs");
}

folly::SemiFuture< ::nebula::meta::cpp2::ListConfigsResp> MetaServiceSvIf::semifuture_listConfigs(const  ::nebula::meta::cpp2::ListConfigsReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ListConfigsResp& _return) { listConfigs(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ListConfigsResp> MetaServiceSvIf::future_listConfigs(const  ::nebula::meta::cpp2::ListConfigsReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_listConfigs(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_listConfigs(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListConfigsResp>> callback, const  ::nebula::meta::cpp2::ListConfigsReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_listConfigs(p_req);
  });
}

void MetaServiceSvIf::createSnapshot( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::CreateSnapshotReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("createSnapshot");
}

folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::semifuture_createSnapshot(const  ::nebula::meta::cpp2::CreateSnapshotReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ExecResp& _return) { createSnapshot(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::future_createSnapshot(const  ::nebula::meta::cpp2::CreateSnapshotReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_createSnapshot(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_createSnapshot(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::CreateSnapshotReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_createSnapshot(p_req);
  });
}

void MetaServiceSvIf::dropSnapshot( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::DropSnapshotReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("dropSnapshot");
}

folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::semifuture_dropSnapshot(const  ::nebula::meta::cpp2::DropSnapshotReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ExecResp& _return) { dropSnapshot(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::future_dropSnapshot(const  ::nebula::meta::cpp2::DropSnapshotReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_dropSnapshot(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_dropSnapshot(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::DropSnapshotReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_dropSnapshot(p_req);
  });
}

void MetaServiceSvIf::listSnapshots( ::nebula::meta::cpp2::ListSnapshotsResp& /*_return*/, const  ::nebula::meta::cpp2::ListSnapshotsReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("listSnapshots");
}

folly::SemiFuture< ::nebula::meta::cpp2::ListSnapshotsResp> MetaServiceSvIf::semifuture_listSnapshots(const  ::nebula::meta::cpp2::ListSnapshotsReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ListSnapshotsResp& _return) { listSnapshots(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ListSnapshotsResp> MetaServiceSvIf::future_listSnapshots(const  ::nebula::meta::cpp2::ListSnapshotsReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_listSnapshots(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_listSnapshots(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListSnapshotsResp>> callback, const  ::nebula::meta::cpp2::ListSnapshotsReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_listSnapshots(p_req);
  });
}

void MetaServiceSvIf::runAdminJob( ::nebula::meta::cpp2::AdminJobResp& /*_return*/, const  ::nebula::meta::cpp2::AdminJobReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("runAdminJob");
}

folly::SemiFuture< ::nebula::meta::cpp2::AdminJobResp> MetaServiceSvIf::semifuture_runAdminJob(const  ::nebula::meta::cpp2::AdminJobReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::AdminJobResp& _return) { runAdminJob(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::AdminJobResp> MetaServiceSvIf::future_runAdminJob(const  ::nebula::meta::cpp2::AdminJobReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_runAdminJob(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_runAdminJob(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::AdminJobResp>> callback, const  ::nebula::meta::cpp2::AdminJobReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_runAdminJob(p_req);
  });
}

void MetaServiceSvIf::mergeZone( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::MergeZoneReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("mergeZone");
}

folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::semifuture_mergeZone(const  ::nebula::meta::cpp2::MergeZoneReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ExecResp& _return) { mergeZone(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::future_mergeZone(const  ::nebula::meta::cpp2::MergeZoneReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_mergeZone(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_mergeZone(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::MergeZoneReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_mergeZone(p_req);
  });
}

void MetaServiceSvIf::dropZone( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::DropZoneReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("dropZone");
}

folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::semifuture_dropZone(const  ::nebula::meta::cpp2::DropZoneReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ExecResp& _return) { dropZone(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::future_dropZone(const  ::nebula::meta::cpp2::DropZoneReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_dropZone(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_dropZone(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::DropZoneReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_dropZone(p_req);
  });
}

void MetaServiceSvIf::splitZone( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::SplitZoneReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("splitZone");
}

folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::semifuture_splitZone(const  ::nebula::meta::cpp2::SplitZoneReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ExecResp& _return) { splitZone(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::future_splitZone(const  ::nebula::meta::cpp2::SplitZoneReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_splitZone(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_splitZone(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::SplitZoneReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_splitZone(p_req);
  });
}

void MetaServiceSvIf::renameZone( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::RenameZoneReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("renameZone");
}

folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::semifuture_renameZone(const  ::nebula::meta::cpp2::RenameZoneReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ExecResp& _return) { renameZone(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::future_renameZone(const  ::nebula::meta::cpp2::RenameZoneReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_renameZone(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_renameZone(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::RenameZoneReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_renameZone(p_req);
  });
}

void MetaServiceSvIf::getZone( ::nebula::meta::cpp2::GetZoneResp& /*_return*/, const  ::nebula::meta::cpp2::GetZoneReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("getZone");
}

folly::SemiFuture< ::nebula::meta::cpp2::GetZoneResp> MetaServiceSvIf::semifuture_getZone(const  ::nebula::meta::cpp2::GetZoneReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::GetZoneResp& _return) { getZone(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::GetZoneResp> MetaServiceSvIf::future_getZone(const  ::nebula::meta::cpp2::GetZoneReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_getZone(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_getZone(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::GetZoneResp>> callback, const  ::nebula::meta::cpp2::GetZoneReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_getZone(p_req);
  });
}

void MetaServiceSvIf::listZones( ::nebula::meta::cpp2::ListZonesResp& /*_return*/, const  ::nebula::meta::cpp2::ListZonesReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("listZones");
}

folly::SemiFuture< ::nebula::meta::cpp2::ListZonesResp> MetaServiceSvIf::semifuture_listZones(const  ::nebula::meta::cpp2::ListZonesReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ListZonesResp& _return) { listZones(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ListZonesResp> MetaServiceSvIf::future_listZones(const  ::nebula::meta::cpp2::ListZonesReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_listZones(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_listZones(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListZonesResp>> callback, const  ::nebula::meta::cpp2::ListZonesReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_listZones(p_req);
  });
}

void MetaServiceSvIf::createBackup( ::nebula::meta::cpp2::CreateBackupResp& /*_return*/, const  ::nebula::meta::cpp2::CreateBackupReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("createBackup");
}

folly::SemiFuture< ::nebula::meta::cpp2::CreateBackupResp> MetaServiceSvIf::semifuture_createBackup(const  ::nebula::meta::cpp2::CreateBackupReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::CreateBackupResp& _return) { createBackup(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::CreateBackupResp> MetaServiceSvIf::future_createBackup(const  ::nebula::meta::cpp2::CreateBackupReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_createBackup(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_createBackup(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::CreateBackupResp>> callback, const  ::nebula::meta::cpp2::CreateBackupReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_createBackup(p_req);
  });
}

void MetaServiceSvIf::restoreMeta( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::RestoreMetaReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("restoreMeta");
}

folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::semifuture_restoreMeta(const  ::nebula::meta::cpp2::RestoreMetaReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ExecResp& _return) { restoreMeta(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::future_restoreMeta(const  ::nebula::meta::cpp2::RestoreMetaReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_restoreMeta(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_restoreMeta(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::RestoreMetaReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_restoreMeta(p_req);
  });
}

void MetaServiceSvIf::addListener( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::AddListenerReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("addListener");
}

folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::semifuture_addListener(const  ::nebula::meta::cpp2::AddListenerReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ExecResp& _return) { addListener(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::future_addListener(const  ::nebula::meta::cpp2::AddListenerReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_addListener(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_addListener(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::AddListenerReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_addListener(p_req);
  });
}

void MetaServiceSvIf::removeListener( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::RemoveListenerReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("removeListener");
}

folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::semifuture_removeListener(const  ::nebula::meta::cpp2::RemoveListenerReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ExecResp& _return) { removeListener(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::future_removeListener(const  ::nebula::meta::cpp2::RemoveListenerReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_removeListener(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_removeListener(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::RemoveListenerReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_removeListener(p_req);
  });
}

void MetaServiceSvIf::listListener( ::nebula::meta::cpp2::ListListenerResp& /*_return*/, const  ::nebula::meta::cpp2::ListListenerReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("listListener");
}

folly::SemiFuture< ::nebula::meta::cpp2::ListListenerResp> MetaServiceSvIf::semifuture_listListener(const  ::nebula::meta::cpp2::ListListenerReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ListListenerResp& _return) { listListener(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ListListenerResp> MetaServiceSvIf::future_listListener(const  ::nebula::meta::cpp2::ListListenerReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_listListener(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_listListener(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListListenerResp>> callback, const  ::nebula::meta::cpp2::ListListenerReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_listListener(p_req);
  });
}

void MetaServiceSvIf::getStats( ::nebula::meta::cpp2::GetStatsResp& /*_return*/, const  ::nebula::meta::cpp2::GetStatsReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("getStats");
}

folly::SemiFuture< ::nebula::meta::cpp2::GetStatsResp> MetaServiceSvIf::semifuture_getStats(const  ::nebula::meta::cpp2::GetStatsReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::GetStatsResp& _return) { getStats(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::GetStatsResp> MetaServiceSvIf::future_getStats(const  ::nebula::meta::cpp2::GetStatsReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_getStats(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_getStats(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::GetStatsResp>> callback, const  ::nebula::meta::cpp2::GetStatsReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_getStats(p_req);
  });
}

void MetaServiceSvIf::signInFTService( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::SignInFTServiceReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("signInFTService");
}

folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::semifuture_signInFTService(const  ::nebula::meta::cpp2::SignInFTServiceReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ExecResp& _return) { signInFTService(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::future_signInFTService(const  ::nebula::meta::cpp2::SignInFTServiceReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_signInFTService(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_signInFTService(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::SignInFTServiceReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_signInFTService(p_req);
  });
}

void MetaServiceSvIf::signOutFTService( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::SignOutFTServiceReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("signOutFTService");
}

folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::semifuture_signOutFTService(const  ::nebula::meta::cpp2::SignOutFTServiceReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ExecResp& _return) { signOutFTService(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::future_signOutFTService(const  ::nebula::meta::cpp2::SignOutFTServiceReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_signOutFTService(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_signOutFTService(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::SignOutFTServiceReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_signOutFTService(p_req);
  });
}

void MetaServiceSvIf::listFTClients( ::nebula::meta::cpp2::ListFTClientsResp& /*_return*/, const  ::nebula::meta::cpp2::ListFTClientsReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("listFTClients");
}

folly::SemiFuture< ::nebula::meta::cpp2::ListFTClientsResp> MetaServiceSvIf::semifuture_listFTClients(const  ::nebula::meta::cpp2::ListFTClientsReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ListFTClientsResp& _return) { listFTClients(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ListFTClientsResp> MetaServiceSvIf::future_listFTClients(const  ::nebula::meta::cpp2::ListFTClientsReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_listFTClients(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_listFTClients(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListFTClientsResp>> callback, const  ::nebula::meta::cpp2::ListFTClientsReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_listFTClients(p_req);
  });
}

void MetaServiceSvIf::createFTIndex( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::CreateFTIndexReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("createFTIndex");
}

folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::semifuture_createFTIndex(const  ::nebula::meta::cpp2::CreateFTIndexReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ExecResp& _return) { createFTIndex(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::future_createFTIndex(const  ::nebula::meta::cpp2::CreateFTIndexReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_createFTIndex(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_createFTIndex(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::CreateFTIndexReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_createFTIndex(p_req);
  });
}

void MetaServiceSvIf::dropFTIndex( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::DropFTIndexReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("dropFTIndex");
}

folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::semifuture_dropFTIndex(const  ::nebula::meta::cpp2::DropFTIndexReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ExecResp& _return) { dropFTIndex(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::future_dropFTIndex(const  ::nebula::meta::cpp2::DropFTIndexReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_dropFTIndex(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_dropFTIndex(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::DropFTIndexReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_dropFTIndex(p_req);
  });
}

void MetaServiceSvIf::listFTIndexes( ::nebula::meta::cpp2::ListFTIndexesResp& /*_return*/, const  ::nebula::meta::cpp2::ListFTIndexesReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("listFTIndexes");
}

folly::SemiFuture< ::nebula::meta::cpp2::ListFTIndexesResp> MetaServiceSvIf::semifuture_listFTIndexes(const  ::nebula::meta::cpp2::ListFTIndexesReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ListFTIndexesResp& _return) { listFTIndexes(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ListFTIndexesResp> MetaServiceSvIf::future_listFTIndexes(const  ::nebula::meta::cpp2::ListFTIndexesReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_listFTIndexes(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_listFTIndexes(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListFTIndexesResp>> callback, const  ::nebula::meta::cpp2::ListFTIndexesReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_listFTIndexes(p_req);
  });
}

void MetaServiceSvIf::createSession( ::nebula::meta::cpp2::CreateSessionResp& /*_return*/, const  ::nebula::meta::cpp2::CreateSessionReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("createSession");
}

folly::SemiFuture< ::nebula::meta::cpp2::CreateSessionResp> MetaServiceSvIf::semifuture_createSession(const  ::nebula::meta::cpp2::CreateSessionReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::CreateSessionResp& _return) { createSession(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::CreateSessionResp> MetaServiceSvIf::future_createSession(const  ::nebula::meta::cpp2::CreateSessionReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_createSession(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_createSession(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::CreateSessionResp>> callback, const  ::nebula::meta::cpp2::CreateSessionReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_createSession(p_req);
  });
}

void MetaServiceSvIf::updateSessions( ::nebula::meta::cpp2::UpdateSessionsResp& /*_return*/, const  ::nebula::meta::cpp2::UpdateSessionsReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("updateSessions");
}

folly::SemiFuture< ::nebula::meta::cpp2::UpdateSessionsResp> MetaServiceSvIf::semifuture_updateSessions(const  ::nebula::meta::cpp2::UpdateSessionsReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::UpdateSessionsResp& _return) { updateSessions(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::UpdateSessionsResp> MetaServiceSvIf::future_updateSessions(const  ::nebula::meta::cpp2::UpdateSessionsReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_updateSessions(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_updateSessions(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::UpdateSessionsResp>> callback, const  ::nebula::meta::cpp2::UpdateSessionsReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_updateSessions(p_req);
  });
}

void MetaServiceSvIf::listSessions( ::nebula::meta::cpp2::ListSessionsResp& /*_return*/, const  ::nebula::meta::cpp2::ListSessionsReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("listSessions");
}

folly::SemiFuture< ::nebula::meta::cpp2::ListSessionsResp> MetaServiceSvIf::semifuture_listSessions(const  ::nebula::meta::cpp2::ListSessionsReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ListSessionsResp& _return) { listSessions(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ListSessionsResp> MetaServiceSvIf::future_listSessions(const  ::nebula::meta::cpp2::ListSessionsReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_listSessions(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_listSessions(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListSessionsResp>> callback, const  ::nebula::meta::cpp2::ListSessionsReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_listSessions(p_req);
  });
}

void MetaServiceSvIf::getSession( ::nebula::meta::cpp2::GetSessionResp& /*_return*/, const  ::nebula::meta::cpp2::GetSessionReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("getSession");
}

folly::SemiFuture< ::nebula::meta::cpp2::GetSessionResp> MetaServiceSvIf::semifuture_getSession(const  ::nebula::meta::cpp2::GetSessionReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::GetSessionResp& _return) { getSession(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::GetSessionResp> MetaServiceSvIf::future_getSession(const  ::nebula::meta::cpp2::GetSessionReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_getSession(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_getSession(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::GetSessionResp>> callback, const  ::nebula::meta::cpp2::GetSessionReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_getSession(p_req);
  });
}

void MetaServiceSvIf::removeSession( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::RemoveSessionReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("removeSession");
}

folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::semifuture_removeSession(const  ::nebula::meta::cpp2::RemoveSessionReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ExecResp& _return) { removeSession(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::future_removeSession(const  ::nebula::meta::cpp2::RemoveSessionReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_removeSession(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_removeSession(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::RemoveSessionReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_removeSession(p_req);
  });
}

void MetaServiceSvIf::killQuery( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::KillQueryReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("killQuery");
}

folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::semifuture_killQuery(const  ::nebula::meta::cpp2::KillQueryReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ExecResp& _return) { killQuery(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::future_killQuery(const  ::nebula::meta::cpp2::KillQueryReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_killQuery(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_killQuery(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::KillQueryReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_killQuery(p_req);
  });
}

void MetaServiceSvIf::reportTaskFinish( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::ReportTaskReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("reportTaskFinish");
}

folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::semifuture_reportTaskFinish(const  ::nebula::meta::cpp2::ReportTaskReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ExecResp& _return) { reportTaskFinish(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ExecResp> MetaServiceSvIf::future_reportTaskFinish(const  ::nebula::meta::cpp2::ReportTaskReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_reportTaskFinish(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_reportTaskFinish(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::ReportTaskReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_reportTaskFinish(p_req);
  });
}

void MetaServiceSvIf::listCluster( ::nebula::meta::cpp2::ListClusterInfoResp& /*_return*/, const  ::nebula::meta::cpp2::ListClusterInfoReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("listCluster");
}

folly::SemiFuture< ::nebula::meta::cpp2::ListClusterInfoResp> MetaServiceSvIf::semifuture_listCluster(const  ::nebula::meta::cpp2::ListClusterInfoReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::ListClusterInfoResp& _return) { listCluster(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::ListClusterInfoResp> MetaServiceSvIf::future_listCluster(const  ::nebula::meta::cpp2::ListClusterInfoReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_listCluster(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_listCluster(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListClusterInfoResp>> callback, const  ::nebula::meta::cpp2::ListClusterInfoReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_listCluster(p_req);
  });
}

void MetaServiceSvIf::getMetaDirInfo( ::nebula::meta::cpp2::GetMetaDirInfoResp& /*_return*/, const  ::nebula::meta::cpp2::GetMetaDirInfoReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("getMetaDirInfo");
}

folly::SemiFuture< ::nebula::meta::cpp2::GetMetaDirInfoResp> MetaServiceSvIf::semifuture_getMetaDirInfo(const  ::nebula::meta::cpp2::GetMetaDirInfoReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::GetMetaDirInfoResp& _return) { getMetaDirInfo(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::GetMetaDirInfoResp> MetaServiceSvIf::future_getMetaDirInfo(const  ::nebula::meta::cpp2::GetMetaDirInfoReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_getMetaDirInfo(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_getMetaDirInfo(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::GetMetaDirInfoResp>> callback, const  ::nebula::meta::cpp2::GetMetaDirInfoReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_getMetaDirInfo(p_req);
  });
}

void MetaServiceSvIf::verifyClientVersion( ::nebula::meta::cpp2::VerifyClientVersionResp& /*_return*/, const  ::nebula::meta::cpp2::VerifyClientVersionReq& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("verifyClientVersion");
}

folly::SemiFuture< ::nebula::meta::cpp2::VerifyClientVersionResp> MetaServiceSvIf::semifuture_verifyClientVersion(const  ::nebula::meta::cpp2::VerifyClientVersionReq& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::meta::cpp2::VerifyClientVersionResp& _return) { verifyClientVersion(_return, p_req); });
}

folly::Future< ::nebula::meta::cpp2::VerifyClientVersionResp> MetaServiceSvIf::future_verifyClientVersion(const  ::nebula::meta::cpp2::VerifyClientVersionReq& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_verifyClientVersion(p_req), std::move(ka));
}

void MetaServiceSvIf::async_tm_verifyClientVersion(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::VerifyClientVersionResp>> callback, const  ::nebula::meta::cpp2::VerifyClientVersionReq& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_verifyClientVersion(p_req);
  });
}

void MetaServiceSvNull::createSpace( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::CreateSpaceReq& /*req*/) {}

void MetaServiceSvNull::dropSpace( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::DropSpaceReq& /*req*/) {}

void MetaServiceSvNull::getSpace( ::nebula::meta::cpp2::GetSpaceResp& /*_return*/, const  ::nebula::meta::cpp2::GetSpaceReq& /*req*/) {}

void MetaServiceSvNull::listSpaces( ::nebula::meta::cpp2::ListSpacesResp& /*_return*/, const  ::nebula::meta::cpp2::ListSpacesReq& /*req*/) {}

void MetaServiceSvNull::createSpaceAs( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::CreateSpaceAsReq& /*req*/) {}

void MetaServiceSvNull::createTag( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::CreateTagReq& /*req*/) {}

void MetaServiceSvNull::alterTag( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::AlterTagReq& /*req*/) {}

void MetaServiceSvNull::dropTag( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::DropTagReq& /*req*/) {}

void MetaServiceSvNull::getTag( ::nebula::meta::cpp2::GetTagResp& /*_return*/, const  ::nebula::meta::cpp2::GetTagReq& /*req*/) {}

void MetaServiceSvNull::listTags( ::nebula::meta::cpp2::ListTagsResp& /*_return*/, const  ::nebula::meta::cpp2::ListTagsReq& /*req*/) {}

void MetaServiceSvNull::createEdge( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::CreateEdgeReq& /*req*/) {}

void MetaServiceSvNull::alterEdge( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::AlterEdgeReq& /*req*/) {}

void MetaServiceSvNull::dropEdge( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::DropEdgeReq& /*req*/) {}

void MetaServiceSvNull::getEdge( ::nebula::meta::cpp2::GetEdgeResp& /*_return*/, const  ::nebula::meta::cpp2::GetEdgeReq& /*req*/) {}

void MetaServiceSvNull::listEdges( ::nebula::meta::cpp2::ListEdgesResp& /*_return*/, const  ::nebula::meta::cpp2::ListEdgesReq& /*req*/) {}

void MetaServiceSvNull::addHosts( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::AddHostsReq& /*req*/) {}

void MetaServiceSvNull::addHostsIntoZone( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::AddHostsIntoZoneReq& /*req*/) {}

void MetaServiceSvNull::dropHosts( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::DropHostsReq& /*req*/) {}

void MetaServiceSvNull::listHosts( ::nebula::meta::cpp2::ListHostsResp& /*_return*/, const  ::nebula::meta::cpp2::ListHostsReq& /*req*/) {}

void MetaServiceSvNull::getPartsAlloc( ::nebula::meta::cpp2::GetPartsAllocResp& /*_return*/, const  ::nebula::meta::cpp2::GetPartsAllocReq& /*req*/) {}

void MetaServiceSvNull::listParts( ::nebula::meta::cpp2::ListPartsResp& /*_return*/, const  ::nebula::meta::cpp2::ListPartsReq& /*req*/) {}

void MetaServiceSvNull::multiPut( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::MultiPutReq& /*req*/) {}

void MetaServiceSvNull::get( ::nebula::meta::cpp2::GetResp& /*_return*/, const  ::nebula::meta::cpp2::GetReq& /*req*/) {}

void MetaServiceSvNull::multiGet( ::nebula::meta::cpp2::MultiGetResp& /*_return*/, const  ::nebula::meta::cpp2::MultiGetReq& /*req*/) {}

void MetaServiceSvNull::remove( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::RemoveReq& /*req*/) {}

void MetaServiceSvNull::removeRange( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::RemoveRangeReq& /*req*/) {}

void MetaServiceSvNull::scan( ::nebula::meta::cpp2::ScanResp& /*_return*/, const  ::nebula::meta::cpp2::ScanReq& /*req*/) {}

void MetaServiceSvNull::createTagIndex( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::CreateTagIndexReq& /*req*/) {}

void MetaServiceSvNull::dropTagIndex( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::DropTagIndexReq& /*req*/) {}

void MetaServiceSvNull::getTagIndex( ::nebula::meta::cpp2::GetTagIndexResp& /*_return*/, const  ::nebula::meta::cpp2::GetTagIndexReq& /*req*/) {}

void MetaServiceSvNull::listTagIndexes( ::nebula::meta::cpp2::ListTagIndexesResp& /*_return*/, const  ::nebula::meta::cpp2::ListTagIndexesReq& /*req*/) {}

void MetaServiceSvNull::rebuildTagIndex( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::RebuildIndexReq& /*req*/) {}

void MetaServiceSvNull::listTagIndexStatus( ::nebula::meta::cpp2::ListIndexStatusResp& /*_return*/, const  ::nebula::meta::cpp2::ListIndexStatusReq& /*req*/) {}

void MetaServiceSvNull::createEdgeIndex( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::CreateEdgeIndexReq& /*req*/) {}

void MetaServiceSvNull::dropEdgeIndex( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::DropEdgeIndexReq& /*req*/) {}

void MetaServiceSvNull::getEdgeIndex( ::nebula::meta::cpp2::GetEdgeIndexResp& /*_return*/, const  ::nebula::meta::cpp2::GetEdgeIndexReq& /*req*/) {}

void MetaServiceSvNull::listEdgeIndexes( ::nebula::meta::cpp2::ListEdgeIndexesResp& /*_return*/, const  ::nebula::meta::cpp2::ListEdgeIndexesReq& /*req*/) {}

void MetaServiceSvNull::rebuildEdgeIndex( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::RebuildIndexReq& /*req*/) {}

void MetaServiceSvNull::listEdgeIndexStatus( ::nebula::meta::cpp2::ListIndexStatusResp& /*_return*/, const  ::nebula::meta::cpp2::ListIndexStatusReq& /*req*/) {}

void MetaServiceSvNull::createUser( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::CreateUserReq& /*req*/) {}

void MetaServiceSvNull::dropUser( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::DropUserReq& /*req*/) {}

void MetaServiceSvNull::alterUser( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::AlterUserReq& /*req*/) {}

void MetaServiceSvNull::grantRole( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::GrantRoleReq& /*req*/) {}

void MetaServiceSvNull::revokeRole( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::RevokeRoleReq& /*req*/) {}

void MetaServiceSvNull::listUsers( ::nebula::meta::cpp2::ListUsersResp& /*_return*/, const  ::nebula::meta::cpp2::ListUsersReq& /*req*/) {}

void MetaServiceSvNull::listRoles( ::nebula::meta::cpp2::ListRolesResp& /*_return*/, const  ::nebula::meta::cpp2::ListRolesReq& /*req*/) {}

void MetaServiceSvNull::getUserRoles( ::nebula::meta::cpp2::ListRolesResp& /*_return*/, const  ::nebula::meta::cpp2::GetUserRolesReq& /*req*/) {}

void MetaServiceSvNull::changePassword( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::ChangePasswordReq& /*req*/) {}

void MetaServiceSvNull::heartBeat( ::nebula::meta::cpp2::HBResp& /*_return*/, const  ::nebula::meta::cpp2::HBReq& /*req*/) {}

void MetaServiceSvNull::regConfig( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::RegConfigReq& /*req*/) {}

void MetaServiceSvNull::getConfig( ::nebula::meta::cpp2::GetConfigResp& /*_return*/, const  ::nebula::meta::cpp2::GetConfigReq& /*req*/) {}

void MetaServiceSvNull::setConfig( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::SetConfigReq& /*req*/) {}

void MetaServiceSvNull::listConfigs( ::nebula::meta::cpp2::ListConfigsResp& /*_return*/, const  ::nebula::meta::cpp2::ListConfigsReq& /*req*/) {}

void MetaServiceSvNull::createSnapshot( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::CreateSnapshotReq& /*req*/) {}

void MetaServiceSvNull::dropSnapshot( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::DropSnapshotReq& /*req*/) {}

void MetaServiceSvNull::listSnapshots( ::nebula::meta::cpp2::ListSnapshotsResp& /*_return*/, const  ::nebula::meta::cpp2::ListSnapshotsReq& /*req*/) {}

void MetaServiceSvNull::runAdminJob( ::nebula::meta::cpp2::AdminJobResp& /*_return*/, const  ::nebula::meta::cpp2::AdminJobReq& /*req*/) {}

void MetaServiceSvNull::mergeZone( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::MergeZoneReq& /*req*/) {}

void MetaServiceSvNull::dropZone( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::DropZoneReq& /*req*/) {}

void MetaServiceSvNull::splitZone( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::SplitZoneReq& /*req*/) {}

void MetaServiceSvNull::renameZone( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::RenameZoneReq& /*req*/) {}

void MetaServiceSvNull::getZone( ::nebula::meta::cpp2::GetZoneResp& /*_return*/, const  ::nebula::meta::cpp2::GetZoneReq& /*req*/) {}

void MetaServiceSvNull::listZones( ::nebula::meta::cpp2::ListZonesResp& /*_return*/, const  ::nebula::meta::cpp2::ListZonesReq& /*req*/) {}

void MetaServiceSvNull::createBackup( ::nebula::meta::cpp2::CreateBackupResp& /*_return*/, const  ::nebula::meta::cpp2::CreateBackupReq& /*req*/) {}

void MetaServiceSvNull::restoreMeta( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::RestoreMetaReq& /*req*/) {}

void MetaServiceSvNull::addListener( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::AddListenerReq& /*req*/) {}

void MetaServiceSvNull::removeListener( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::RemoveListenerReq& /*req*/) {}

void MetaServiceSvNull::listListener( ::nebula::meta::cpp2::ListListenerResp& /*_return*/, const  ::nebula::meta::cpp2::ListListenerReq& /*req*/) {}

void MetaServiceSvNull::getStats( ::nebula::meta::cpp2::GetStatsResp& /*_return*/, const  ::nebula::meta::cpp2::GetStatsReq& /*req*/) {}

void MetaServiceSvNull::signInFTService( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::SignInFTServiceReq& /*req*/) {}

void MetaServiceSvNull::signOutFTService( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::SignOutFTServiceReq& /*req*/) {}

void MetaServiceSvNull::listFTClients( ::nebula::meta::cpp2::ListFTClientsResp& /*_return*/, const  ::nebula::meta::cpp2::ListFTClientsReq& /*req*/) {}

void MetaServiceSvNull::createFTIndex( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::CreateFTIndexReq& /*req*/) {}

void MetaServiceSvNull::dropFTIndex( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::DropFTIndexReq& /*req*/) {}

void MetaServiceSvNull::listFTIndexes( ::nebula::meta::cpp2::ListFTIndexesResp& /*_return*/, const  ::nebula::meta::cpp2::ListFTIndexesReq& /*req*/) {}

void MetaServiceSvNull::createSession( ::nebula::meta::cpp2::CreateSessionResp& /*_return*/, const  ::nebula::meta::cpp2::CreateSessionReq& /*req*/) {}

void MetaServiceSvNull::updateSessions( ::nebula::meta::cpp2::UpdateSessionsResp& /*_return*/, const  ::nebula::meta::cpp2::UpdateSessionsReq& /*req*/) {}

void MetaServiceSvNull::listSessions( ::nebula::meta::cpp2::ListSessionsResp& /*_return*/, const  ::nebula::meta::cpp2::ListSessionsReq& /*req*/) {}

void MetaServiceSvNull::getSession( ::nebula::meta::cpp2::GetSessionResp& /*_return*/, const  ::nebula::meta::cpp2::GetSessionReq& /*req*/) {}

void MetaServiceSvNull::removeSession( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::RemoveSessionReq& /*req*/) {}

void MetaServiceSvNull::killQuery( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::KillQueryReq& /*req*/) {}

void MetaServiceSvNull::reportTaskFinish( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::ReportTaskReq& /*req*/) {}

void MetaServiceSvNull::listCluster( ::nebula::meta::cpp2::ListClusterInfoResp& /*_return*/, const  ::nebula::meta::cpp2::ListClusterInfoReq& /*req*/) {}

void MetaServiceSvNull::getMetaDirInfo( ::nebula::meta::cpp2::GetMetaDirInfoResp& /*_return*/, const  ::nebula::meta::cpp2::GetMetaDirInfoReq& /*req*/) {}

void MetaServiceSvNull::verifyClientVersion( ::nebula::meta::cpp2::VerifyClientVersionResp& /*_return*/, const  ::nebula::meta::cpp2::VerifyClientVersionReq& /*req*/) {}



const char* MetaServiceAsyncProcessor::getServiceName() {
  return "MetaService";
}

void MetaServiceAsyncProcessor::getServiceMetadata(apache::thrift::metadata::ThriftServiceMetadataResponse& response) {
  ::apache::thrift::detail::md::ServiceMetadata<MetaServiceSvIf>::gen(*response.metadata_ref(), *response.context_ref());
}

void MetaServiceAsyncProcessor::processSerializedRequest(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  apache::thrift::detail::ap::process(this, std::move(req), std::move(serializedRequest), protType, context, eb, tm);
}

std::shared_ptr<folly::RequestContext> MetaServiceAsyncProcessor::getBaseContextForRequest() {
  return iface_->getBaseContextForRequest();
}

const MetaServiceAsyncProcessor::ProcessMap& MetaServiceAsyncProcessor::getBinaryProtocolProcessMap() {
  return binaryProcessMap_;
}

const MetaServiceAsyncProcessor::ProcessMap MetaServiceAsyncProcessor::binaryProcessMap_ {
  {"createSpace", &MetaServiceAsyncProcessor::setUpAndProcess_createSpace<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"dropSpace", &MetaServiceAsyncProcessor::setUpAndProcess_dropSpace<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"getSpace", &MetaServiceAsyncProcessor::setUpAndProcess_getSpace<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"listSpaces", &MetaServiceAsyncProcessor::setUpAndProcess_listSpaces<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"createSpaceAs", &MetaServiceAsyncProcessor::setUpAndProcess_createSpaceAs<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"createTag", &MetaServiceAsyncProcessor::setUpAndProcess_createTag<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"alterTag", &MetaServiceAsyncProcessor::setUpAndProcess_alterTag<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"dropTag", &MetaServiceAsyncProcessor::setUpAndProcess_dropTag<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"getTag", &MetaServiceAsyncProcessor::setUpAndProcess_getTag<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"listTags", &MetaServiceAsyncProcessor::setUpAndProcess_listTags<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"createEdge", &MetaServiceAsyncProcessor::setUpAndProcess_createEdge<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"alterEdge", &MetaServiceAsyncProcessor::setUpAndProcess_alterEdge<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"dropEdge", &MetaServiceAsyncProcessor::setUpAndProcess_dropEdge<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"getEdge", &MetaServiceAsyncProcessor::setUpAndProcess_getEdge<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"listEdges", &MetaServiceAsyncProcessor::setUpAndProcess_listEdges<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"addHosts", &MetaServiceAsyncProcessor::setUpAndProcess_addHosts<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"addHostsIntoZone", &MetaServiceAsyncProcessor::setUpAndProcess_addHostsIntoZone<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"dropHosts", &MetaServiceAsyncProcessor::setUpAndProcess_dropHosts<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"listHosts", &MetaServiceAsyncProcessor::setUpAndProcess_listHosts<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"getPartsAlloc", &MetaServiceAsyncProcessor::setUpAndProcess_getPartsAlloc<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"listParts", &MetaServiceAsyncProcessor::setUpAndProcess_listParts<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"multiPut", &MetaServiceAsyncProcessor::setUpAndProcess_multiPut<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"get", &MetaServiceAsyncProcessor::setUpAndProcess_get<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"multiGet", &MetaServiceAsyncProcessor::setUpAndProcess_multiGet<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"remove", &MetaServiceAsyncProcessor::setUpAndProcess_remove<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"removeRange", &MetaServiceAsyncProcessor::setUpAndProcess_removeRange<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"scan", &MetaServiceAsyncProcessor::setUpAndProcess_scan<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"createTagIndex", &MetaServiceAsyncProcessor::setUpAndProcess_createTagIndex<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"dropTagIndex", &MetaServiceAsyncProcessor::setUpAndProcess_dropTagIndex<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"getTagIndex", &MetaServiceAsyncProcessor::setUpAndProcess_getTagIndex<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"listTagIndexes", &MetaServiceAsyncProcessor::setUpAndProcess_listTagIndexes<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"rebuildTagIndex", &MetaServiceAsyncProcessor::setUpAndProcess_rebuildTagIndex<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"listTagIndexStatus", &MetaServiceAsyncProcessor::setUpAndProcess_listTagIndexStatus<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"createEdgeIndex", &MetaServiceAsyncProcessor::setUpAndProcess_createEdgeIndex<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"dropEdgeIndex", &MetaServiceAsyncProcessor::setUpAndProcess_dropEdgeIndex<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"getEdgeIndex", &MetaServiceAsyncProcessor::setUpAndProcess_getEdgeIndex<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"listEdgeIndexes", &MetaServiceAsyncProcessor::setUpAndProcess_listEdgeIndexes<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"rebuildEdgeIndex", &MetaServiceAsyncProcessor::setUpAndProcess_rebuildEdgeIndex<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"listEdgeIndexStatus", &MetaServiceAsyncProcessor::setUpAndProcess_listEdgeIndexStatus<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"createUser", &MetaServiceAsyncProcessor::setUpAndProcess_createUser<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"dropUser", &MetaServiceAsyncProcessor::setUpAndProcess_dropUser<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"alterUser", &MetaServiceAsyncProcessor::setUpAndProcess_alterUser<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"grantRole", &MetaServiceAsyncProcessor::setUpAndProcess_grantRole<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"revokeRole", &MetaServiceAsyncProcessor::setUpAndProcess_revokeRole<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"listUsers", &MetaServiceAsyncProcessor::setUpAndProcess_listUsers<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"listRoles", &MetaServiceAsyncProcessor::setUpAndProcess_listRoles<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"getUserRoles", &MetaServiceAsyncProcessor::setUpAndProcess_getUserRoles<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"changePassword", &MetaServiceAsyncProcessor::setUpAndProcess_changePassword<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"heartBeat", &MetaServiceAsyncProcessor::setUpAndProcess_heartBeat<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"regConfig", &MetaServiceAsyncProcessor::setUpAndProcess_regConfig<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"getConfig", &MetaServiceAsyncProcessor::setUpAndProcess_getConfig<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"setConfig", &MetaServiceAsyncProcessor::setUpAndProcess_setConfig<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"listConfigs", &MetaServiceAsyncProcessor::setUpAndProcess_listConfigs<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"createSnapshot", &MetaServiceAsyncProcessor::setUpAndProcess_createSnapshot<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"dropSnapshot", &MetaServiceAsyncProcessor::setUpAndProcess_dropSnapshot<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"listSnapshots", &MetaServiceAsyncProcessor::setUpAndProcess_listSnapshots<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"runAdminJob", &MetaServiceAsyncProcessor::setUpAndProcess_runAdminJob<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"mergeZone", &MetaServiceAsyncProcessor::setUpAndProcess_mergeZone<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"dropZone", &MetaServiceAsyncProcessor::setUpAndProcess_dropZone<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"splitZone", &MetaServiceAsyncProcessor::setUpAndProcess_splitZone<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"renameZone", &MetaServiceAsyncProcessor::setUpAndProcess_renameZone<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"getZone", &MetaServiceAsyncProcessor::setUpAndProcess_getZone<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"listZones", &MetaServiceAsyncProcessor::setUpAndProcess_listZones<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"createBackup", &MetaServiceAsyncProcessor::setUpAndProcess_createBackup<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"restoreMeta", &MetaServiceAsyncProcessor::setUpAndProcess_restoreMeta<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"addListener", &MetaServiceAsyncProcessor::setUpAndProcess_addListener<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"removeListener", &MetaServiceAsyncProcessor::setUpAndProcess_removeListener<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"listListener", &MetaServiceAsyncProcessor::setUpAndProcess_listListener<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"getStats", &MetaServiceAsyncProcessor::setUpAndProcess_getStats<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"signInFTService", &MetaServiceAsyncProcessor::setUpAndProcess_signInFTService<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"signOutFTService", &MetaServiceAsyncProcessor::setUpAndProcess_signOutFTService<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"listFTClients", &MetaServiceAsyncProcessor::setUpAndProcess_listFTClients<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"createFTIndex", &MetaServiceAsyncProcessor::setUpAndProcess_createFTIndex<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"dropFTIndex", &MetaServiceAsyncProcessor::setUpAndProcess_dropFTIndex<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"listFTIndexes", &MetaServiceAsyncProcessor::setUpAndProcess_listFTIndexes<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"createSession", &MetaServiceAsyncProcessor::setUpAndProcess_createSession<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"updateSessions", &MetaServiceAsyncProcessor::setUpAndProcess_updateSessions<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"listSessions", &MetaServiceAsyncProcessor::setUpAndProcess_listSessions<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"getSession", &MetaServiceAsyncProcessor::setUpAndProcess_getSession<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"removeSession", &MetaServiceAsyncProcessor::setUpAndProcess_removeSession<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"killQuery", &MetaServiceAsyncProcessor::setUpAndProcess_killQuery<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"reportTaskFinish", &MetaServiceAsyncProcessor::setUpAndProcess_reportTaskFinish<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"listCluster", &MetaServiceAsyncProcessor::setUpAndProcess_listCluster<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"getMetaDirInfo", &MetaServiceAsyncProcessor::setUpAndProcess_getMetaDirInfo<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"verifyClientVersion", &MetaServiceAsyncProcessor::setUpAndProcess_verifyClientVersion<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
};

const MetaServiceAsyncProcessor::ProcessMap& MetaServiceAsyncProcessor::getCompactProtocolProcessMap() {
  return compactProcessMap_;
}

const MetaServiceAsyncProcessor::ProcessMap MetaServiceAsyncProcessor::compactProcessMap_ {
  {"createSpace", &MetaServiceAsyncProcessor::setUpAndProcess_createSpace<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"dropSpace", &MetaServiceAsyncProcessor::setUpAndProcess_dropSpace<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"getSpace", &MetaServiceAsyncProcessor::setUpAndProcess_getSpace<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"listSpaces", &MetaServiceAsyncProcessor::setUpAndProcess_listSpaces<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"createSpaceAs", &MetaServiceAsyncProcessor::setUpAndProcess_createSpaceAs<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"createTag", &MetaServiceAsyncProcessor::setUpAndProcess_createTag<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"alterTag", &MetaServiceAsyncProcessor::setUpAndProcess_alterTag<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"dropTag", &MetaServiceAsyncProcessor::setUpAndProcess_dropTag<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"getTag", &MetaServiceAsyncProcessor::setUpAndProcess_getTag<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"listTags", &MetaServiceAsyncProcessor::setUpAndProcess_listTags<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"createEdge", &MetaServiceAsyncProcessor::setUpAndProcess_createEdge<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"alterEdge", &MetaServiceAsyncProcessor::setUpAndProcess_alterEdge<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"dropEdge", &MetaServiceAsyncProcessor::setUpAndProcess_dropEdge<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"getEdge", &MetaServiceAsyncProcessor::setUpAndProcess_getEdge<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"listEdges", &MetaServiceAsyncProcessor::setUpAndProcess_listEdges<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"addHosts", &MetaServiceAsyncProcessor::setUpAndProcess_addHosts<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"addHostsIntoZone", &MetaServiceAsyncProcessor::setUpAndProcess_addHostsIntoZone<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"dropHosts", &MetaServiceAsyncProcessor::setUpAndProcess_dropHosts<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"listHosts", &MetaServiceAsyncProcessor::setUpAndProcess_listHosts<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"getPartsAlloc", &MetaServiceAsyncProcessor::setUpAndProcess_getPartsAlloc<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"listParts", &MetaServiceAsyncProcessor::setUpAndProcess_listParts<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"multiPut", &MetaServiceAsyncProcessor::setUpAndProcess_multiPut<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"get", &MetaServiceAsyncProcessor::setUpAndProcess_get<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"multiGet", &MetaServiceAsyncProcessor::setUpAndProcess_multiGet<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"remove", &MetaServiceAsyncProcessor::setUpAndProcess_remove<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"removeRange", &MetaServiceAsyncProcessor::setUpAndProcess_removeRange<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"scan", &MetaServiceAsyncProcessor::setUpAndProcess_scan<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"createTagIndex", &MetaServiceAsyncProcessor::setUpAndProcess_createTagIndex<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"dropTagIndex", &MetaServiceAsyncProcessor::setUpAndProcess_dropTagIndex<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"getTagIndex", &MetaServiceAsyncProcessor::setUpAndProcess_getTagIndex<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"listTagIndexes", &MetaServiceAsyncProcessor::setUpAndProcess_listTagIndexes<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"rebuildTagIndex", &MetaServiceAsyncProcessor::setUpAndProcess_rebuildTagIndex<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"listTagIndexStatus", &MetaServiceAsyncProcessor::setUpAndProcess_listTagIndexStatus<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"createEdgeIndex", &MetaServiceAsyncProcessor::setUpAndProcess_createEdgeIndex<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"dropEdgeIndex", &MetaServiceAsyncProcessor::setUpAndProcess_dropEdgeIndex<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"getEdgeIndex", &MetaServiceAsyncProcessor::setUpAndProcess_getEdgeIndex<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"listEdgeIndexes", &MetaServiceAsyncProcessor::setUpAndProcess_listEdgeIndexes<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"rebuildEdgeIndex", &MetaServiceAsyncProcessor::setUpAndProcess_rebuildEdgeIndex<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"listEdgeIndexStatus", &MetaServiceAsyncProcessor::setUpAndProcess_listEdgeIndexStatus<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"createUser", &MetaServiceAsyncProcessor::setUpAndProcess_createUser<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"dropUser", &MetaServiceAsyncProcessor::setUpAndProcess_dropUser<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"alterUser", &MetaServiceAsyncProcessor::setUpAndProcess_alterUser<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"grantRole", &MetaServiceAsyncProcessor::setUpAndProcess_grantRole<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"revokeRole", &MetaServiceAsyncProcessor::setUpAndProcess_revokeRole<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"listUsers", &MetaServiceAsyncProcessor::setUpAndProcess_listUsers<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"listRoles", &MetaServiceAsyncProcessor::setUpAndProcess_listRoles<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"getUserRoles", &MetaServiceAsyncProcessor::setUpAndProcess_getUserRoles<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"changePassword", &MetaServiceAsyncProcessor::setUpAndProcess_changePassword<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"heartBeat", &MetaServiceAsyncProcessor::setUpAndProcess_heartBeat<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"regConfig", &MetaServiceAsyncProcessor::setUpAndProcess_regConfig<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"getConfig", &MetaServiceAsyncProcessor::setUpAndProcess_getConfig<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"setConfig", &MetaServiceAsyncProcessor::setUpAndProcess_setConfig<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"listConfigs", &MetaServiceAsyncProcessor::setUpAndProcess_listConfigs<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"createSnapshot", &MetaServiceAsyncProcessor::setUpAndProcess_createSnapshot<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"dropSnapshot", &MetaServiceAsyncProcessor::setUpAndProcess_dropSnapshot<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"listSnapshots", &MetaServiceAsyncProcessor::setUpAndProcess_listSnapshots<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"runAdminJob", &MetaServiceAsyncProcessor::setUpAndProcess_runAdminJob<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"mergeZone", &MetaServiceAsyncProcessor::setUpAndProcess_mergeZone<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"dropZone", &MetaServiceAsyncProcessor::setUpAndProcess_dropZone<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"splitZone", &MetaServiceAsyncProcessor::setUpAndProcess_splitZone<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"renameZone", &MetaServiceAsyncProcessor::setUpAndProcess_renameZone<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"getZone", &MetaServiceAsyncProcessor::setUpAndProcess_getZone<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"listZones", &MetaServiceAsyncProcessor::setUpAndProcess_listZones<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"createBackup", &MetaServiceAsyncProcessor::setUpAndProcess_createBackup<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"restoreMeta", &MetaServiceAsyncProcessor::setUpAndProcess_restoreMeta<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"addListener", &MetaServiceAsyncProcessor::setUpAndProcess_addListener<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"removeListener", &MetaServiceAsyncProcessor::setUpAndProcess_removeListener<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"listListener", &MetaServiceAsyncProcessor::setUpAndProcess_listListener<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"getStats", &MetaServiceAsyncProcessor::setUpAndProcess_getStats<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"signInFTService", &MetaServiceAsyncProcessor::setUpAndProcess_signInFTService<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"signOutFTService", &MetaServiceAsyncProcessor::setUpAndProcess_signOutFTService<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"listFTClients", &MetaServiceAsyncProcessor::setUpAndProcess_listFTClients<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"createFTIndex", &MetaServiceAsyncProcessor::setUpAndProcess_createFTIndex<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"dropFTIndex", &MetaServiceAsyncProcessor::setUpAndProcess_dropFTIndex<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"listFTIndexes", &MetaServiceAsyncProcessor::setUpAndProcess_listFTIndexes<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"createSession", &MetaServiceAsyncProcessor::setUpAndProcess_createSession<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"updateSessions", &MetaServiceAsyncProcessor::setUpAndProcess_updateSessions<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"listSessions", &MetaServiceAsyncProcessor::setUpAndProcess_listSessions<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"getSession", &MetaServiceAsyncProcessor::setUpAndProcess_getSession<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"removeSession", &MetaServiceAsyncProcessor::setUpAndProcess_removeSession<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"killQuery", &MetaServiceAsyncProcessor::setUpAndProcess_killQuery<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"reportTaskFinish", &MetaServiceAsyncProcessor::setUpAndProcess_reportTaskFinish<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"listCluster", &MetaServiceAsyncProcessor::setUpAndProcess_listCluster<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"getMetaDirInfo", &MetaServiceAsyncProcessor::setUpAndProcess_getMetaDirInfo<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"verifyClientVersion", &MetaServiceAsyncProcessor::setUpAndProcess_verifyClientVersion<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
};

}}} // nebula::meta::cpp2
