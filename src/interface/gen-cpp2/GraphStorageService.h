/**
 * Autogenerated by Thrift for storage.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/gen/service_h.h>

#include "GraphStorageServiceAsyncClient.h"
#include "storage_types.h"
#include "common_types.h"
#include "meta_types.h"

namespace folly {
  class IOBuf;
  class IOBufQueue;
}
namespace apache { namespace thrift {
  class Cpp2RequestContext;
  class BinaryProtocolReader;
  class CompactProtocolReader;
  namespace transport { class THeader; }
}}

namespace nebula { namespace storage { namespace cpp2 {

class GraphStorageServiceSvAsyncIf {
 public:
  virtual ~GraphStorageServiceSvAsyncIf() {}
  virtual void async_tm_getNeighbors(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::GetNeighborsResponse>> callback, const  ::nebula::storage::cpp2::GetNeighborsRequest& p_req) = 0;
  virtual folly::Future< ::nebula::storage::cpp2::GetNeighborsResponse> future_getNeighbors(const  ::nebula::storage::cpp2::GetNeighborsRequest& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::storage::cpp2::GetNeighborsResponse> semifuture_getNeighbors(const  ::nebula::storage::cpp2::GetNeighborsRequest& p_req) = 0;
  virtual void async_tm_getProps(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::GetPropResponse>> callback, const  ::nebula::storage::cpp2::GetPropRequest& p_req) = 0;
  virtual folly::Future< ::nebula::storage::cpp2::GetPropResponse> future_getProps(const  ::nebula::storage::cpp2::GetPropRequest& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::storage::cpp2::GetPropResponse> semifuture_getProps(const  ::nebula::storage::cpp2::GetPropRequest& p_req) = 0;
  virtual void async_tm_addVertices(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::ExecResponse>> callback, const  ::nebula::storage::cpp2::AddVerticesRequest& p_req) = 0;
  virtual folly::Future< ::nebula::storage::cpp2::ExecResponse> future_addVertices(const  ::nebula::storage::cpp2::AddVerticesRequest& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::storage::cpp2::ExecResponse> semifuture_addVertices(const  ::nebula::storage::cpp2::AddVerticesRequest& p_req) = 0;
  virtual void async_tm_addEdges(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::ExecResponse>> callback, const  ::nebula::storage::cpp2::AddEdgesRequest& p_req) = 0;
  virtual folly::Future< ::nebula::storage::cpp2::ExecResponse> future_addEdges(const  ::nebula::storage::cpp2::AddEdgesRequest& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::storage::cpp2::ExecResponse> semifuture_addEdges(const  ::nebula::storage::cpp2::AddEdgesRequest& p_req) = 0;
  virtual void async_tm_deleteEdges(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::ExecResponse>> callback, const  ::nebula::storage::cpp2::DeleteEdgesRequest& p_req) = 0;
  virtual folly::Future< ::nebula::storage::cpp2::ExecResponse> future_deleteEdges(const  ::nebula::storage::cpp2::DeleteEdgesRequest& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::storage::cpp2::ExecResponse> semifuture_deleteEdges(const  ::nebula::storage::cpp2::DeleteEdgesRequest& p_req) = 0;
  virtual void async_tm_deleteVertices(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::ExecResponse>> callback, const  ::nebula::storage::cpp2::DeleteVerticesRequest& p_req) = 0;
  virtual folly::Future< ::nebula::storage::cpp2::ExecResponse> future_deleteVertices(const  ::nebula::storage::cpp2::DeleteVerticesRequest& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::storage::cpp2::ExecResponse> semifuture_deleteVertices(const  ::nebula::storage::cpp2::DeleteVerticesRequest& p_req) = 0;
  virtual void async_tm_deleteTags(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::ExecResponse>> callback, const  ::nebula::storage::cpp2::DeleteTagsRequest& p_req) = 0;
  virtual folly::Future< ::nebula::storage::cpp2::ExecResponse> future_deleteTags(const  ::nebula::storage::cpp2::DeleteTagsRequest& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::storage::cpp2::ExecResponse> semifuture_deleteTags(const  ::nebula::storage::cpp2::DeleteTagsRequest& p_req) = 0;
  virtual void async_tm_updateVertex(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::UpdateResponse>> callback, const  ::nebula::storage::cpp2::UpdateVertexRequest& p_req) = 0;
  virtual folly::Future< ::nebula::storage::cpp2::UpdateResponse> future_updateVertex(const  ::nebula::storage::cpp2::UpdateVertexRequest& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::storage::cpp2::UpdateResponse> semifuture_updateVertex(const  ::nebula::storage::cpp2::UpdateVertexRequest& p_req) = 0;
  virtual void async_tm_updateEdge(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::UpdateResponse>> callback, const  ::nebula::storage::cpp2::UpdateEdgeRequest& p_req) = 0;
  virtual folly::Future< ::nebula::storage::cpp2::UpdateResponse> future_updateEdge(const  ::nebula::storage::cpp2::UpdateEdgeRequest& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::storage::cpp2::UpdateResponse> semifuture_updateEdge(const  ::nebula::storage::cpp2::UpdateEdgeRequest& p_req) = 0;
  virtual void async_tm_scanVertex(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::ScanResponse>> callback, const  ::nebula::storage::cpp2::ScanVertexRequest& p_req) = 0;
  virtual folly::Future< ::nebula::storage::cpp2::ScanResponse> future_scanVertex(const  ::nebula::storage::cpp2::ScanVertexRequest& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::storage::cpp2::ScanResponse> semifuture_scanVertex(const  ::nebula::storage::cpp2::ScanVertexRequest& p_req) = 0;
  virtual void async_tm_scanEdge(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::ScanResponse>> callback, const  ::nebula::storage::cpp2::ScanEdgeRequest& p_req) = 0;
  virtual folly::Future< ::nebula::storage::cpp2::ScanResponse> future_scanEdge(const  ::nebula::storage::cpp2::ScanEdgeRequest& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::storage::cpp2::ScanResponse> semifuture_scanEdge(const  ::nebula::storage::cpp2::ScanEdgeRequest& p_req) = 0;
  virtual void async_tm_getUUID(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::GetUUIDResp>> callback, const  ::nebula::storage::cpp2::GetUUIDReq& p_req) = 0;
  virtual folly::Future< ::nebula::storage::cpp2::GetUUIDResp> future_getUUID(const  ::nebula::storage::cpp2::GetUUIDReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::storage::cpp2::GetUUIDResp> semifuture_getUUID(const  ::nebula::storage::cpp2::GetUUIDReq& p_req) = 0;
  virtual void async_tm_lookupIndex(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::LookupIndexResp>> callback, const  ::nebula::storage::cpp2::LookupIndexRequest& p_req) = 0;
  virtual folly::Future< ::nebula::storage::cpp2::LookupIndexResp> future_lookupIndex(const  ::nebula::storage::cpp2::LookupIndexRequest& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::storage::cpp2::LookupIndexResp> semifuture_lookupIndex(const  ::nebula::storage::cpp2::LookupIndexRequest& p_req) = 0;
  virtual void async_tm_lookupAndTraverse(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::GetNeighborsResponse>> callback, const  ::nebula::storage::cpp2::LookupAndTraverseRequest& p_req) = 0;
  virtual folly::Future< ::nebula::storage::cpp2::GetNeighborsResponse> future_lookupAndTraverse(const  ::nebula::storage::cpp2::LookupAndTraverseRequest& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::storage::cpp2::GetNeighborsResponse> semifuture_lookupAndTraverse(const  ::nebula::storage::cpp2::LookupAndTraverseRequest& p_req) = 0;
  virtual void async_tm_chainUpdateEdge(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::UpdateResponse>> callback, const  ::nebula::storage::cpp2::UpdateEdgeRequest& p_req) = 0;
  virtual folly::Future< ::nebula::storage::cpp2::UpdateResponse> future_chainUpdateEdge(const  ::nebula::storage::cpp2::UpdateEdgeRequest& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::storage::cpp2::UpdateResponse> semifuture_chainUpdateEdge(const  ::nebula::storage::cpp2::UpdateEdgeRequest& p_req) = 0;
  virtual void async_tm_chainAddEdges(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::ExecResponse>> callback, const  ::nebula::storage::cpp2::AddEdgesRequest& p_req) = 0;
  virtual folly::Future< ::nebula::storage::cpp2::ExecResponse> future_chainAddEdges(const  ::nebula::storage::cpp2::AddEdgesRequest& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::storage::cpp2::ExecResponse> semifuture_chainAddEdges(const  ::nebula::storage::cpp2::AddEdgesRequest& p_req) = 0;
  virtual void async_tm_get(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::KVGetResponse>> callback, const  ::nebula::storage::cpp2::KVGetRequest& p_req) = 0;
  virtual folly::Future< ::nebula::storage::cpp2::KVGetResponse> future_get(const  ::nebula::storage::cpp2::KVGetRequest& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::storage::cpp2::KVGetResponse> semifuture_get(const  ::nebula::storage::cpp2::KVGetRequest& p_req) = 0;
  virtual void async_tm_put(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::ExecResponse>> callback, const  ::nebula::storage::cpp2::KVPutRequest& p_req) = 0;
  virtual folly::Future< ::nebula::storage::cpp2::ExecResponse> future_put(const  ::nebula::storage::cpp2::KVPutRequest& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::storage::cpp2::ExecResponse> semifuture_put(const  ::nebula::storage::cpp2::KVPutRequest& p_req) = 0;
  virtual void async_tm_remove(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::ExecResponse>> callback, const  ::nebula::storage::cpp2::KVRemoveRequest& p_req) = 0;
  virtual folly::Future< ::nebula::storage::cpp2::ExecResponse> future_remove(const  ::nebula::storage::cpp2::KVRemoveRequest& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::storage::cpp2::ExecResponse> semifuture_remove(const  ::nebula::storage::cpp2::KVRemoveRequest& p_req) = 0;
};

class GraphStorageServiceAsyncProcessor;

class GraphStorageServiceSvIf : public GraphStorageServiceSvAsyncIf, public apache::thrift::ServerInterface {
 public:
  typedef GraphStorageServiceAsyncProcessor ProcessorType;
  std::unique_ptr<apache::thrift::AsyncProcessor> getProcessor() override;


  virtual void getNeighbors( ::nebula::storage::cpp2::GetNeighborsResponse& /*_return*/, const  ::nebula::storage::cpp2::GetNeighborsRequest& /*req*/);
  folly::Future< ::nebula::storage::cpp2::GetNeighborsResponse> future_getNeighbors(const  ::nebula::storage::cpp2::GetNeighborsRequest& p_req) override;
  folly::SemiFuture< ::nebula::storage::cpp2::GetNeighborsResponse> semifuture_getNeighbors(const  ::nebula::storage::cpp2::GetNeighborsRequest& p_req) override;
  void async_tm_getNeighbors(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::GetNeighborsResponse>> callback, const  ::nebula::storage::cpp2::GetNeighborsRequest& p_req) override;
  virtual void getProps( ::nebula::storage::cpp2::GetPropResponse& /*_return*/, const  ::nebula::storage::cpp2::GetPropRequest& /*req*/);
  folly::Future< ::nebula::storage::cpp2::GetPropResponse> future_getProps(const  ::nebula::storage::cpp2::GetPropRequest& p_req) override;
  folly::SemiFuture< ::nebula::storage::cpp2::GetPropResponse> semifuture_getProps(const  ::nebula::storage::cpp2::GetPropRequest& p_req) override;
  void async_tm_getProps(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::GetPropResponse>> callback, const  ::nebula::storage::cpp2::GetPropRequest& p_req) override;
  virtual void addVertices( ::nebula::storage::cpp2::ExecResponse& /*_return*/, const  ::nebula::storage::cpp2::AddVerticesRequest& /*req*/);
  folly::Future< ::nebula::storage::cpp2::ExecResponse> future_addVertices(const  ::nebula::storage::cpp2::AddVerticesRequest& p_req) override;
  folly::SemiFuture< ::nebula::storage::cpp2::ExecResponse> semifuture_addVertices(const  ::nebula::storage::cpp2::AddVerticesRequest& p_req) override;
  void async_tm_addVertices(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::ExecResponse>> callback, const  ::nebula::storage::cpp2::AddVerticesRequest& p_req) override;
  virtual void addEdges( ::nebula::storage::cpp2::ExecResponse& /*_return*/, const  ::nebula::storage::cpp2::AddEdgesRequest& /*req*/);
  folly::Future< ::nebula::storage::cpp2::ExecResponse> future_addEdges(const  ::nebula::storage::cpp2::AddEdgesRequest& p_req) override;
  folly::SemiFuture< ::nebula::storage::cpp2::ExecResponse> semifuture_addEdges(const  ::nebula::storage::cpp2::AddEdgesRequest& p_req) override;
  void async_tm_addEdges(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::ExecResponse>> callback, const  ::nebula::storage::cpp2::AddEdgesRequest& p_req) override;
  virtual void deleteEdges( ::nebula::storage::cpp2::ExecResponse& /*_return*/, const  ::nebula::storage::cpp2::DeleteEdgesRequest& /*req*/);
  folly::Future< ::nebula::storage::cpp2::ExecResponse> future_deleteEdges(const  ::nebula::storage::cpp2::DeleteEdgesRequest& p_req) override;
  folly::SemiFuture< ::nebula::storage::cpp2::ExecResponse> semifuture_deleteEdges(const  ::nebula::storage::cpp2::DeleteEdgesRequest& p_req) override;
  void async_tm_deleteEdges(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::ExecResponse>> callback, const  ::nebula::storage::cpp2::DeleteEdgesRequest& p_req) override;
  virtual void deleteVertices( ::nebula::storage::cpp2::ExecResponse& /*_return*/, const  ::nebula::storage::cpp2::DeleteVerticesRequest& /*req*/);
  folly::Future< ::nebula::storage::cpp2::ExecResponse> future_deleteVertices(const  ::nebula::storage::cpp2::DeleteVerticesRequest& p_req) override;
  folly::SemiFuture< ::nebula::storage::cpp2::ExecResponse> semifuture_deleteVertices(const  ::nebula::storage::cpp2::DeleteVerticesRequest& p_req) override;
  void async_tm_deleteVertices(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::ExecResponse>> callback, const  ::nebula::storage::cpp2::DeleteVerticesRequest& p_req) override;
  virtual void deleteTags( ::nebula::storage::cpp2::ExecResponse& /*_return*/, const  ::nebula::storage::cpp2::DeleteTagsRequest& /*req*/);
  folly::Future< ::nebula::storage::cpp2::ExecResponse> future_deleteTags(const  ::nebula::storage::cpp2::DeleteTagsRequest& p_req) override;
  folly::SemiFuture< ::nebula::storage::cpp2::ExecResponse> semifuture_deleteTags(const  ::nebula::storage::cpp2::DeleteTagsRequest& p_req) override;
  void async_tm_deleteTags(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::ExecResponse>> callback, const  ::nebula::storage::cpp2::DeleteTagsRequest& p_req) override;
  virtual void updateVertex( ::nebula::storage::cpp2::UpdateResponse& /*_return*/, const  ::nebula::storage::cpp2::UpdateVertexRequest& /*req*/);
  folly::Future< ::nebula::storage::cpp2::UpdateResponse> future_updateVertex(const  ::nebula::storage::cpp2::UpdateVertexRequest& p_req) override;
  folly::SemiFuture< ::nebula::storage::cpp2::UpdateResponse> semifuture_updateVertex(const  ::nebula::storage::cpp2::UpdateVertexRequest& p_req) override;
  void async_tm_updateVertex(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::UpdateResponse>> callback, const  ::nebula::storage::cpp2::UpdateVertexRequest& p_req) override;
  virtual void updateEdge( ::nebula::storage::cpp2::UpdateResponse& /*_return*/, const  ::nebula::storage::cpp2::UpdateEdgeRequest& /*req*/);
  folly::Future< ::nebula::storage::cpp2::UpdateResponse> future_updateEdge(const  ::nebula::storage::cpp2::UpdateEdgeRequest& p_req) override;
  folly::SemiFuture< ::nebula::storage::cpp2::UpdateResponse> semifuture_updateEdge(const  ::nebula::storage::cpp2::UpdateEdgeRequest& p_req) override;
  void async_tm_updateEdge(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::UpdateResponse>> callback, const  ::nebula::storage::cpp2::UpdateEdgeRequest& p_req) override;
  virtual void scanVertex( ::nebula::storage::cpp2::ScanResponse& /*_return*/, const  ::nebula::storage::cpp2::ScanVertexRequest& /*req*/);
  folly::Future< ::nebula::storage::cpp2::ScanResponse> future_scanVertex(const  ::nebula::storage::cpp2::ScanVertexRequest& p_req) override;
  folly::SemiFuture< ::nebula::storage::cpp2::ScanResponse> semifuture_scanVertex(const  ::nebula::storage::cpp2::ScanVertexRequest& p_req) override;
  void async_tm_scanVertex(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::ScanResponse>> callback, const  ::nebula::storage::cpp2::ScanVertexRequest& p_req) override;
  virtual void scanEdge( ::nebula::storage::cpp2::ScanResponse& /*_return*/, const  ::nebula::storage::cpp2::ScanEdgeRequest& /*req*/);
  folly::Future< ::nebula::storage::cpp2::ScanResponse> future_scanEdge(const  ::nebula::storage::cpp2::ScanEdgeRequest& p_req) override;
  folly::SemiFuture< ::nebula::storage::cpp2::ScanResponse> semifuture_scanEdge(const  ::nebula::storage::cpp2::ScanEdgeRequest& p_req) override;
  void async_tm_scanEdge(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::ScanResponse>> callback, const  ::nebula::storage::cpp2::ScanEdgeRequest& p_req) override;
  virtual void getUUID( ::nebula::storage::cpp2::GetUUIDResp& /*_return*/, const  ::nebula::storage::cpp2::GetUUIDReq& /*req*/);
  folly::Future< ::nebula::storage::cpp2::GetUUIDResp> future_getUUID(const  ::nebula::storage::cpp2::GetUUIDReq& p_req) override;
  folly::SemiFuture< ::nebula::storage::cpp2::GetUUIDResp> semifuture_getUUID(const  ::nebula::storage::cpp2::GetUUIDReq& p_req) override;
  void async_tm_getUUID(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::GetUUIDResp>> callback, const  ::nebula::storage::cpp2::GetUUIDReq& p_req) override;
  virtual void lookupIndex( ::nebula::storage::cpp2::LookupIndexResp& /*_return*/, const  ::nebula::storage::cpp2::LookupIndexRequest& /*req*/);
  folly::Future< ::nebula::storage::cpp2::LookupIndexResp> future_lookupIndex(const  ::nebula::storage::cpp2::LookupIndexRequest& p_req) override;
  folly::SemiFuture< ::nebula::storage::cpp2::LookupIndexResp> semifuture_lookupIndex(const  ::nebula::storage::cpp2::LookupIndexRequest& p_req) override;
  void async_tm_lookupIndex(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::LookupIndexResp>> callback, const  ::nebula::storage::cpp2::LookupIndexRequest& p_req) override;
  virtual void lookupAndTraverse( ::nebula::storage::cpp2::GetNeighborsResponse& /*_return*/, const  ::nebula::storage::cpp2::LookupAndTraverseRequest& /*req*/);
  folly::Future< ::nebula::storage::cpp2::GetNeighborsResponse> future_lookupAndTraverse(const  ::nebula::storage::cpp2::LookupAndTraverseRequest& p_req) override;
  folly::SemiFuture< ::nebula::storage::cpp2::GetNeighborsResponse> semifuture_lookupAndTraverse(const  ::nebula::storage::cpp2::LookupAndTraverseRequest& p_req) override;
  void async_tm_lookupAndTraverse(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::GetNeighborsResponse>> callback, const  ::nebula::storage::cpp2::LookupAndTraverseRequest& p_req) override;
  virtual void chainUpdateEdge( ::nebula::storage::cpp2::UpdateResponse& /*_return*/, const  ::nebula::storage::cpp2::UpdateEdgeRequest& /*req*/);
  folly::Future< ::nebula::storage::cpp2::UpdateResponse> future_chainUpdateEdge(const  ::nebula::storage::cpp2::UpdateEdgeRequest& p_req) override;
  folly::SemiFuture< ::nebula::storage::cpp2::UpdateResponse> semifuture_chainUpdateEdge(const  ::nebula::storage::cpp2::UpdateEdgeRequest& p_req) override;
  void async_tm_chainUpdateEdge(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::UpdateResponse>> callback, const  ::nebula::storage::cpp2::UpdateEdgeRequest& p_req) override;
  virtual void chainAddEdges( ::nebula::storage::cpp2::ExecResponse& /*_return*/, const  ::nebula::storage::cpp2::AddEdgesRequest& /*req*/);
  folly::Future< ::nebula::storage::cpp2::ExecResponse> future_chainAddEdges(const  ::nebula::storage::cpp2::AddEdgesRequest& p_req) override;
  folly::SemiFuture< ::nebula::storage::cpp2::ExecResponse> semifuture_chainAddEdges(const  ::nebula::storage::cpp2::AddEdgesRequest& p_req) override;
  void async_tm_chainAddEdges(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::ExecResponse>> callback, const  ::nebula::storage::cpp2::AddEdgesRequest& p_req) override;
  virtual void get( ::nebula::storage::cpp2::KVGetResponse& /*_return*/, const  ::nebula::storage::cpp2::KVGetRequest& /*req*/);
  folly::Future< ::nebula::storage::cpp2::KVGetResponse> future_get(const  ::nebula::storage::cpp2::KVGetRequest& p_req) override;
  folly::SemiFuture< ::nebula::storage::cpp2::KVGetResponse> semifuture_get(const  ::nebula::storage::cpp2::KVGetRequest& p_req) override;
  void async_tm_get(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::KVGetResponse>> callback, const  ::nebula::storage::cpp2::KVGetRequest& p_req) override;
  virtual void put( ::nebula::storage::cpp2::ExecResponse& /*_return*/, const  ::nebula::storage::cpp2::KVPutRequest& /*req*/);
  folly::Future< ::nebula::storage::cpp2::ExecResponse> future_put(const  ::nebula::storage::cpp2::KVPutRequest& p_req) override;
  folly::SemiFuture< ::nebula::storage::cpp2::ExecResponse> semifuture_put(const  ::nebula::storage::cpp2::KVPutRequest& p_req) override;
  void async_tm_put(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::ExecResponse>> callback, const  ::nebula::storage::cpp2::KVPutRequest& p_req) override;
  virtual void remove( ::nebula::storage::cpp2::ExecResponse& /*_return*/, const  ::nebula::storage::cpp2::KVRemoveRequest& /*req*/);
  folly::Future< ::nebula::storage::cpp2::ExecResponse> future_remove(const  ::nebula::storage::cpp2::KVRemoveRequest& p_req) override;
  folly::SemiFuture< ::nebula::storage::cpp2::ExecResponse> semifuture_remove(const  ::nebula::storage::cpp2::KVRemoveRequest& p_req) override;
  void async_tm_remove(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::ExecResponse>> callback, const  ::nebula::storage::cpp2::KVRemoveRequest& p_req) override;
};

class GraphStorageServiceSvNull : public GraphStorageServiceSvIf {
 public:
  void getNeighbors( ::nebula::storage::cpp2::GetNeighborsResponse& /*_return*/, const  ::nebula::storage::cpp2::GetNeighborsRequest& /*req*/) override;
  void getProps( ::nebula::storage::cpp2::GetPropResponse& /*_return*/, const  ::nebula::storage::cpp2::GetPropRequest& /*req*/) override;
  void addVertices( ::nebula::storage::cpp2::ExecResponse& /*_return*/, const  ::nebula::storage::cpp2::AddVerticesRequest& /*req*/) override;
  void addEdges( ::nebula::storage::cpp2::ExecResponse& /*_return*/, const  ::nebula::storage::cpp2::AddEdgesRequest& /*req*/) override;
  void deleteEdges( ::nebula::storage::cpp2::ExecResponse& /*_return*/, const  ::nebula::storage::cpp2::DeleteEdgesRequest& /*req*/) override;
  void deleteVertices( ::nebula::storage::cpp2::ExecResponse& /*_return*/, const  ::nebula::storage::cpp2::DeleteVerticesRequest& /*req*/) override;
  void deleteTags( ::nebula::storage::cpp2::ExecResponse& /*_return*/, const  ::nebula::storage::cpp2::DeleteTagsRequest& /*req*/) override;
  void updateVertex( ::nebula::storage::cpp2::UpdateResponse& /*_return*/, const  ::nebula::storage::cpp2::UpdateVertexRequest& /*req*/) override;
  void updateEdge( ::nebula::storage::cpp2::UpdateResponse& /*_return*/, const  ::nebula::storage::cpp2::UpdateEdgeRequest& /*req*/) override;
  void scanVertex( ::nebula::storage::cpp2::ScanResponse& /*_return*/, const  ::nebula::storage::cpp2::ScanVertexRequest& /*req*/) override;
  void scanEdge( ::nebula::storage::cpp2::ScanResponse& /*_return*/, const  ::nebula::storage::cpp2::ScanEdgeRequest& /*req*/) override;
  void getUUID( ::nebula::storage::cpp2::GetUUIDResp& /*_return*/, const  ::nebula::storage::cpp2::GetUUIDReq& /*req*/) override;
  void lookupIndex( ::nebula::storage::cpp2::LookupIndexResp& /*_return*/, const  ::nebula::storage::cpp2::LookupIndexRequest& /*req*/) override;
  void lookupAndTraverse( ::nebula::storage::cpp2::GetNeighborsResponse& /*_return*/, const  ::nebula::storage::cpp2::LookupAndTraverseRequest& /*req*/) override;
  void chainUpdateEdge( ::nebula::storage::cpp2::UpdateResponse& /*_return*/, const  ::nebula::storage::cpp2::UpdateEdgeRequest& /*req*/) override;
  void chainAddEdges( ::nebula::storage::cpp2::ExecResponse& /*_return*/, const  ::nebula::storage::cpp2::AddEdgesRequest& /*req*/) override;
  void get( ::nebula::storage::cpp2::KVGetResponse& /*_return*/, const  ::nebula::storage::cpp2::KVGetRequest& /*req*/) override;
  void put( ::nebula::storage::cpp2::ExecResponse& /*_return*/, const  ::nebula::storage::cpp2::KVPutRequest& /*req*/) override;
  void remove( ::nebula::storage::cpp2::ExecResponse& /*_return*/, const  ::nebula::storage::cpp2::KVRemoveRequest& /*req*/) override;
};

class GraphStorageServiceAsyncProcessor : public ::apache::thrift::GeneratedAsyncProcessor {
 public:
  const char* getServiceName() override;
  void getServiceMetadata(apache::thrift::metadata::ThriftServiceMetadataResponse& response) override;
  using BaseAsyncProcessor = void;
 protected:
  GraphStorageServiceSvIf* iface_;
 public:
  void processSerializedRequest(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) override;
 protected:
  std::shared_ptr<folly::RequestContext> getBaseContextForRequest() override;
 public:
  using ProcessFunc = GeneratedAsyncProcessor::ProcessFunc<GraphStorageServiceAsyncProcessor>;
  using ProcessMap = GeneratedAsyncProcessor::ProcessMap<ProcessFunc>;
  static const GraphStorageServiceAsyncProcessor::ProcessMap& getBinaryProtocolProcessMap();
  static const GraphStorageServiceAsyncProcessor::ProcessMap& getCompactProtocolProcessMap();
 private:
  static const GraphStorageServiceAsyncProcessor::ProcessMap binaryProcessMap_;
  static const GraphStorageServiceAsyncProcessor::ProcessMap compactProcessMap_;
 private:
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_getNeighbors(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_getNeighbors(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_getNeighbors(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::storage::cpp2::GetNeighborsResponse const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_getNeighbors(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_getProps(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_getProps(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_getProps(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::storage::cpp2::GetPropResponse const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_getProps(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_addVertices(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_addVertices(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_addVertices(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::storage::cpp2::ExecResponse const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_addVertices(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_addEdges(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_addEdges(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_addEdges(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::storage::cpp2::ExecResponse const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_addEdges(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_deleteEdges(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_deleteEdges(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_deleteEdges(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::storage::cpp2::ExecResponse const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_deleteEdges(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_deleteVertices(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_deleteVertices(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_deleteVertices(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::storage::cpp2::ExecResponse const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_deleteVertices(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_deleteTags(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_deleteTags(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_deleteTags(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::storage::cpp2::ExecResponse const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_deleteTags(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_updateVertex(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_updateVertex(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_updateVertex(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::storage::cpp2::UpdateResponse const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_updateVertex(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_updateEdge(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_updateEdge(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_updateEdge(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::storage::cpp2::UpdateResponse const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_updateEdge(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_scanVertex(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_scanVertex(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_scanVertex(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::storage::cpp2::ScanResponse const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_scanVertex(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_scanEdge(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_scanEdge(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_scanEdge(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::storage::cpp2::ScanResponse const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_scanEdge(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_getUUID(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_getUUID(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_getUUID(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::storage::cpp2::GetUUIDResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_getUUID(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_lookupIndex(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_lookupIndex(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_lookupIndex(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::storage::cpp2::LookupIndexResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_lookupIndex(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_lookupAndTraverse(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_lookupAndTraverse(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_lookupAndTraverse(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::storage::cpp2::GetNeighborsResponse const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_lookupAndTraverse(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_chainUpdateEdge(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_chainUpdateEdge(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_chainUpdateEdge(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::storage::cpp2::UpdateResponse const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_chainUpdateEdge(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_chainAddEdges(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_chainAddEdges(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_chainAddEdges(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::storage::cpp2::ExecResponse const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_chainAddEdges(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_get(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_get(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_get(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::storage::cpp2::KVGetResponse const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_get(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_put(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_put(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_put(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::storage::cpp2::ExecResponse const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_put(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_remove(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_remove(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_remove(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::storage::cpp2::ExecResponse const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_remove(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
 public:
  GraphStorageServiceAsyncProcessor(GraphStorageServiceSvIf* iface) :
      iface_(iface) {}

  virtual ~GraphStorageServiceAsyncProcessor() {}
};

}}} // nebula::storage::cpp2
