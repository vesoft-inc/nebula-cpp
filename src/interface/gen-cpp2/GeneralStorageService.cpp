/**
 * Autogenerated by Thrift for storage.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "GeneralStorageService.h"
#include "GeneralStorageService.tcc"
#include "storage_metadata.h"
#include <thrift/lib/cpp2/gen/service_cpp.h>

namespace nebula { namespace storage { namespace cpp2 {
std::unique_ptr<apache::thrift::AsyncProcessor> GeneralStorageServiceSvIf::getProcessor() {
  return std::make_unique<GeneralStorageServiceAsyncProcessor>(this);
}


void GeneralStorageServiceSvIf::get( ::nebula::storage::cpp2::KVGetResponse& /*_return*/, const  ::nebula::storage::cpp2::KVGetRequest& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("get");
}

folly::SemiFuture< ::nebula::storage::cpp2::KVGetResponse> GeneralStorageServiceSvIf::semifuture_get(const  ::nebula::storage::cpp2::KVGetRequest& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::storage::cpp2::KVGetResponse& _return) { get(_return, p_req); });
}

folly::Future< ::nebula::storage::cpp2::KVGetResponse> GeneralStorageServiceSvIf::future_get(const  ::nebula::storage::cpp2::KVGetRequest& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_get(p_req), std::move(ka));
}

void GeneralStorageServiceSvIf::async_tm_get(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::KVGetResponse>> callback, const  ::nebula::storage::cpp2::KVGetRequest& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_get(p_req);
  });
}

void GeneralStorageServiceSvIf::put( ::nebula::storage::cpp2::ExecResponse& /*_return*/, const  ::nebula::storage::cpp2::KVPutRequest& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("put");
}

folly::SemiFuture< ::nebula::storage::cpp2::ExecResponse> GeneralStorageServiceSvIf::semifuture_put(const  ::nebula::storage::cpp2::KVPutRequest& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::storage::cpp2::ExecResponse& _return) { put(_return, p_req); });
}

folly::Future< ::nebula::storage::cpp2::ExecResponse> GeneralStorageServiceSvIf::future_put(const  ::nebula::storage::cpp2::KVPutRequest& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_put(p_req), std::move(ka));
}

void GeneralStorageServiceSvIf::async_tm_put(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::ExecResponse>> callback, const  ::nebula::storage::cpp2::KVPutRequest& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_put(p_req);
  });
}

void GeneralStorageServiceSvIf::remove( ::nebula::storage::cpp2::ExecResponse& /*_return*/, const  ::nebula::storage::cpp2::KVRemoveRequest& /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("remove");
}

folly::SemiFuture< ::nebula::storage::cpp2::ExecResponse> GeneralStorageServiceSvIf::semifuture_remove(const  ::nebula::storage::cpp2::KVRemoveRequest& p_req) {
  return apache::thrift::detail::si::semifuture_returning([&]( ::nebula::storage::cpp2::ExecResponse& _return) { remove(_return, p_req); });
}

folly::Future< ::nebula::storage::cpp2::ExecResponse> GeneralStorageServiceSvIf::future_remove(const  ::nebula::storage::cpp2::KVRemoveRequest& p_req) {
  using Source = apache::thrift::concurrency::ThreadManager::Source;
  auto scope = getRequestContext()->getRequestExecutionScope();
  auto ka = getThreadManager()->getKeepAlive(std::move(scope), Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_remove(p_req), std::move(ka));
}

void GeneralStorageServiceSvIf::async_tm_remove(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::ExecResponse>> callback, const  ::nebula::storage::cpp2::KVRemoveRequest& p_req) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] {
    return future_remove(p_req);
  });
}

void GeneralStorageServiceSvNull::get( ::nebula::storage::cpp2::KVGetResponse& /*_return*/, const  ::nebula::storage::cpp2::KVGetRequest& /*req*/) {}

void GeneralStorageServiceSvNull::put( ::nebula::storage::cpp2::ExecResponse& /*_return*/, const  ::nebula::storage::cpp2::KVPutRequest& /*req*/) {}

void GeneralStorageServiceSvNull::remove( ::nebula::storage::cpp2::ExecResponse& /*_return*/, const  ::nebula::storage::cpp2::KVRemoveRequest& /*req*/) {}



const char* GeneralStorageServiceAsyncProcessor::getServiceName() {
  return "GeneralStorageService";
}

void GeneralStorageServiceAsyncProcessor::getServiceMetadata(apache::thrift::metadata::ThriftServiceMetadataResponse& response) {
  ::apache::thrift::detail::md::ServiceMetadata<GeneralStorageServiceSvIf>::gen(*response.metadata_ref(), *response.context_ref());
}

void GeneralStorageServiceAsyncProcessor::processSerializedRequest(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  apache::thrift::detail::ap::process(this, std::move(req), std::move(serializedRequest), protType, context, eb, tm);
}

std::shared_ptr<folly::RequestContext> GeneralStorageServiceAsyncProcessor::getBaseContextForRequest() {
  return iface_->getBaseContextForRequest();
}

const GeneralStorageServiceAsyncProcessor::ProcessMap& GeneralStorageServiceAsyncProcessor::getBinaryProtocolProcessMap() {
  return binaryProcessMap_;
}

const GeneralStorageServiceAsyncProcessor::ProcessMap GeneralStorageServiceAsyncProcessor::binaryProcessMap_ {
  {"get", &GeneralStorageServiceAsyncProcessor::setUpAndProcess_get<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"put", &GeneralStorageServiceAsyncProcessor::setUpAndProcess_put<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"remove", &GeneralStorageServiceAsyncProcessor::setUpAndProcess_remove<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
};

const GeneralStorageServiceAsyncProcessor::ProcessMap& GeneralStorageServiceAsyncProcessor::getCompactProtocolProcessMap() {
  return compactProcessMap_;
}

const GeneralStorageServiceAsyncProcessor::ProcessMap GeneralStorageServiceAsyncProcessor::compactProcessMap_ {
  {"get", &GeneralStorageServiceAsyncProcessor::setUpAndProcess_get<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"put", &GeneralStorageServiceAsyncProcessor::setUpAndProcess_put<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"remove", &GeneralStorageServiceAsyncProcessor::setUpAndProcess_remove<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
};

}}} // nebula::storage::cpp2
