/**
 * Autogenerated by Thrift for storage.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/gen/client_h.h>

#include "storage_types.h"
#include "common_types.h"
#include "meta_types.h"

namespace apache { namespace thrift {
  class Cpp2RequestContext;
  namespace detail { namespace ac { struct ClientRequestContext; }}
  namespace transport { class THeader; }
}}

namespace nebula { namespace storage { namespace cpp2 {

class StorageAdminServiceAsyncClient : public apache::thrift::GeneratedAsyncClient {
 public:
  using apache::thrift::GeneratedAsyncClient::GeneratedAsyncClient;

  char const* getServiceName() const noexcept override {
    return "StorageAdminService";
  }


  virtual void transLeader(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::nebula::storage::cpp2::TransLeaderReq& p_req);
  virtual void transLeader(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::nebula::storage::cpp2::TransLeaderReq& p_req);
 protected:
  void transLeaderImpl(const apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const  ::nebula::storage::cpp2::TransLeaderReq& p_req);
 public:

  virtual void sync_transLeader( ::nebula::storage::cpp2::AdminExecResp& _return, const  ::nebula::storage::cpp2::TransLeaderReq& p_req);
  virtual void sync_transLeader(apache::thrift::RpcOptions& rpcOptions,  ::nebula::storage::cpp2::AdminExecResp& _return, const  ::nebula::storage::cpp2::TransLeaderReq& p_req);

  virtual folly::Future< ::nebula::storage::cpp2::AdminExecResp> future_transLeader(const  ::nebula::storage::cpp2::TransLeaderReq& p_req);
  virtual folly::SemiFuture< ::nebula::storage::cpp2::AdminExecResp> semifuture_transLeader(const  ::nebula::storage::cpp2::TransLeaderReq& p_req);
  virtual folly::Future< ::nebula::storage::cpp2::AdminExecResp> future_transLeader(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::TransLeaderReq& p_req);
  virtual folly::SemiFuture< ::nebula::storage::cpp2::AdminExecResp> semifuture_transLeader(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::TransLeaderReq& p_req);
  virtual folly::Future<std::pair< ::nebula::storage::cpp2::AdminExecResp, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_transLeader(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::TransLeaderReq& p_req);
  virtual folly::SemiFuture<std::pair< ::nebula::storage::cpp2::AdminExecResp, std::unique_ptr<apache::thrift::transport::THeader>>> header_semifuture_transLeader(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::TransLeaderReq& p_req);

#if FOLLY_HAS_COROUTINES
  template <int = 0>
  folly::coro::Task< ::nebula::storage::cpp2::AdminExecResp> co_transLeader(const  ::nebula::storage::cpp2::TransLeaderReq& p_req) {
    return co_transLeader<false>(nullptr, p_req);
  }
  template <int = 0>
  folly::coro::Task< ::nebula::storage::cpp2::AdminExecResp> co_transLeader(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::TransLeaderReq& p_req) {
    return co_transLeader<true>(&rpcOptions, p_req);
  }
 private:
  template <bool hasRpcOptions>
  folly::coro::Task< ::nebula::storage::cpp2::AdminExecResp> co_transLeader(apache::thrift::RpcOptions* rpcOptions, const  ::nebula::storage::cpp2::TransLeaderReq& p_req) {
    const folly::CancellationToken& cancelToken =
        co_await folly::coro::co_current_cancellation_token;
    const bool cancellable = cancelToken.canBeCancelled();
    apache::thrift::ClientReceiveState returnState;
    apache::thrift::ClientSyncCallback<false> callback(&returnState);
    auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
    auto ctx = transLeaderCtx(rpcOptions);
    using CancellableCallback = apache::thrift::CancellableRequestClientCallback<false>;
    auto cancellableCallback = cancellable ? CancellableCallback::create(&callback, channel_) : nullptr;
    static const apache::thrift::RpcOptions defaultRpcOptions;
    auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(cancellableCallback ? (apache::thrift::RequestClientCallback*)cancellableCallback.get() : &callback);
    if constexpr (hasRpcOptions) {
      transLeaderImpl(*rpcOptions, ctx, std::move(wrappedCallback), p_req);
    } else {
      transLeaderImpl(defaultRpcOptions, ctx, std::move(wrappedCallback), p_req);
    }
    if (cancellable) {
      folly::CancellationCallback cb(cancelToken, [&] { CancellableCallback::cancel(std::move(cancellableCallback)); });
      co_await callback.co_waitUntilDone();
    } else {
      co_await callback.co_waitUntilDone();
    }
    if (returnState.isException()) {
      co_yield folly::coro::co_error(std::move(returnState.exception()));
    }
    returnState.resetProtocolId(protocolId);
    returnState.resetCtx(std::shared_ptr<apache::thrift::ContextStack>(ctx, &ctx->ctx));
    SCOPE_EXIT {
      if (hasRpcOptions && returnState.header() && !returnState.header()->getHeaders().empty()) {
        rpcOptions->setReadHeaders(returnState.header()->releaseHeaders());
      }
    };
     ::nebula::storage::cpp2::AdminExecResp _return;
    if (auto ew = recv_wrapped_transLeader(_return, returnState)) {
      co_yield folly::coro::co_error(std::move(ew));
    }
    co_return _return;
  }
 public:
#endif // FOLLY_HAS_COROUTINES

  virtual void transLeader(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::nebula::storage::cpp2::TransLeaderReq& p_req);


  static folly::exception_wrapper recv_wrapped_transLeader( ::nebula::storage::cpp2::AdminExecResp& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_transLeader( ::nebula::storage::cpp2::AdminExecResp& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_transLeader( ::nebula::storage::cpp2::AdminExecResp& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_transLeader( ::nebula::storage::cpp2::AdminExecResp& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  template <typename Protocol_>
  void transLeaderT(Protocol_* prot, apache::thrift::RpcOptions rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const  ::nebula::storage::cpp2::TransLeaderReq& p_req);
  std::shared_ptr<::apache::thrift::detail::ac::ClientRequestContext> transLeaderCtx(apache::thrift::RpcOptions* rpcOptions);
 public:
  virtual void addPart(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::nebula::storage::cpp2::AddPartReq& p_req);
  virtual void addPart(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::nebula::storage::cpp2::AddPartReq& p_req);
 protected:
  void addPartImpl(const apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const  ::nebula::storage::cpp2::AddPartReq& p_req);
 public:

  virtual void sync_addPart( ::nebula::storage::cpp2::AdminExecResp& _return, const  ::nebula::storage::cpp2::AddPartReq& p_req);
  virtual void sync_addPart(apache::thrift::RpcOptions& rpcOptions,  ::nebula::storage::cpp2::AdminExecResp& _return, const  ::nebula::storage::cpp2::AddPartReq& p_req);

  virtual folly::Future< ::nebula::storage::cpp2::AdminExecResp> future_addPart(const  ::nebula::storage::cpp2::AddPartReq& p_req);
  virtual folly::SemiFuture< ::nebula::storage::cpp2::AdminExecResp> semifuture_addPart(const  ::nebula::storage::cpp2::AddPartReq& p_req);
  virtual folly::Future< ::nebula::storage::cpp2::AdminExecResp> future_addPart(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::AddPartReq& p_req);
  virtual folly::SemiFuture< ::nebula::storage::cpp2::AdminExecResp> semifuture_addPart(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::AddPartReq& p_req);
  virtual folly::Future<std::pair< ::nebula::storage::cpp2::AdminExecResp, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_addPart(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::AddPartReq& p_req);
  virtual folly::SemiFuture<std::pair< ::nebula::storage::cpp2::AdminExecResp, std::unique_ptr<apache::thrift::transport::THeader>>> header_semifuture_addPart(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::AddPartReq& p_req);

#if FOLLY_HAS_COROUTINES
  template <int = 0>
  folly::coro::Task< ::nebula::storage::cpp2::AdminExecResp> co_addPart(const  ::nebula::storage::cpp2::AddPartReq& p_req) {
    return co_addPart<false>(nullptr, p_req);
  }
  template <int = 0>
  folly::coro::Task< ::nebula::storage::cpp2::AdminExecResp> co_addPart(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::AddPartReq& p_req) {
    return co_addPart<true>(&rpcOptions, p_req);
  }
 private:
  template <bool hasRpcOptions>
  folly::coro::Task< ::nebula::storage::cpp2::AdminExecResp> co_addPart(apache::thrift::RpcOptions* rpcOptions, const  ::nebula::storage::cpp2::AddPartReq& p_req) {
    const folly::CancellationToken& cancelToken =
        co_await folly::coro::co_current_cancellation_token;
    const bool cancellable = cancelToken.canBeCancelled();
    apache::thrift::ClientReceiveState returnState;
    apache::thrift::ClientSyncCallback<false> callback(&returnState);
    auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
    auto ctx = addPartCtx(rpcOptions);
    using CancellableCallback = apache::thrift::CancellableRequestClientCallback<false>;
    auto cancellableCallback = cancellable ? CancellableCallback::create(&callback, channel_) : nullptr;
    static const apache::thrift::RpcOptions defaultRpcOptions;
    auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(cancellableCallback ? (apache::thrift::RequestClientCallback*)cancellableCallback.get() : &callback);
    if constexpr (hasRpcOptions) {
      addPartImpl(*rpcOptions, ctx, std::move(wrappedCallback), p_req);
    } else {
      addPartImpl(defaultRpcOptions, ctx, std::move(wrappedCallback), p_req);
    }
    if (cancellable) {
      folly::CancellationCallback cb(cancelToken, [&] { CancellableCallback::cancel(std::move(cancellableCallback)); });
      co_await callback.co_waitUntilDone();
    } else {
      co_await callback.co_waitUntilDone();
    }
    if (returnState.isException()) {
      co_yield folly::coro::co_error(std::move(returnState.exception()));
    }
    returnState.resetProtocolId(protocolId);
    returnState.resetCtx(std::shared_ptr<apache::thrift::ContextStack>(ctx, &ctx->ctx));
    SCOPE_EXIT {
      if (hasRpcOptions && returnState.header() && !returnState.header()->getHeaders().empty()) {
        rpcOptions->setReadHeaders(returnState.header()->releaseHeaders());
      }
    };
     ::nebula::storage::cpp2::AdminExecResp _return;
    if (auto ew = recv_wrapped_addPart(_return, returnState)) {
      co_yield folly::coro::co_error(std::move(ew));
    }
    co_return _return;
  }
 public:
#endif // FOLLY_HAS_COROUTINES

  virtual void addPart(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::nebula::storage::cpp2::AddPartReq& p_req);


  static folly::exception_wrapper recv_wrapped_addPart( ::nebula::storage::cpp2::AdminExecResp& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_addPart( ::nebula::storage::cpp2::AdminExecResp& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_addPart( ::nebula::storage::cpp2::AdminExecResp& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_addPart( ::nebula::storage::cpp2::AdminExecResp& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  template <typename Protocol_>
  void addPartT(Protocol_* prot, apache::thrift::RpcOptions rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const  ::nebula::storage::cpp2::AddPartReq& p_req);
  std::shared_ptr<::apache::thrift::detail::ac::ClientRequestContext> addPartCtx(apache::thrift::RpcOptions* rpcOptions);
 public:
  virtual void addLearner(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::nebula::storage::cpp2::AddLearnerReq& p_req);
  virtual void addLearner(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::nebula::storage::cpp2::AddLearnerReq& p_req);
 protected:
  void addLearnerImpl(const apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const  ::nebula::storage::cpp2::AddLearnerReq& p_req);
 public:

  virtual void sync_addLearner( ::nebula::storage::cpp2::AdminExecResp& _return, const  ::nebula::storage::cpp2::AddLearnerReq& p_req);
  virtual void sync_addLearner(apache::thrift::RpcOptions& rpcOptions,  ::nebula::storage::cpp2::AdminExecResp& _return, const  ::nebula::storage::cpp2::AddLearnerReq& p_req);

  virtual folly::Future< ::nebula::storage::cpp2::AdminExecResp> future_addLearner(const  ::nebula::storage::cpp2::AddLearnerReq& p_req);
  virtual folly::SemiFuture< ::nebula::storage::cpp2::AdminExecResp> semifuture_addLearner(const  ::nebula::storage::cpp2::AddLearnerReq& p_req);
  virtual folly::Future< ::nebula::storage::cpp2::AdminExecResp> future_addLearner(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::AddLearnerReq& p_req);
  virtual folly::SemiFuture< ::nebula::storage::cpp2::AdminExecResp> semifuture_addLearner(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::AddLearnerReq& p_req);
  virtual folly::Future<std::pair< ::nebula::storage::cpp2::AdminExecResp, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_addLearner(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::AddLearnerReq& p_req);
  virtual folly::SemiFuture<std::pair< ::nebula::storage::cpp2::AdminExecResp, std::unique_ptr<apache::thrift::transport::THeader>>> header_semifuture_addLearner(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::AddLearnerReq& p_req);

#if FOLLY_HAS_COROUTINES
  template <int = 0>
  folly::coro::Task< ::nebula::storage::cpp2::AdminExecResp> co_addLearner(const  ::nebula::storage::cpp2::AddLearnerReq& p_req) {
    return co_addLearner<false>(nullptr, p_req);
  }
  template <int = 0>
  folly::coro::Task< ::nebula::storage::cpp2::AdminExecResp> co_addLearner(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::AddLearnerReq& p_req) {
    return co_addLearner<true>(&rpcOptions, p_req);
  }
 private:
  template <bool hasRpcOptions>
  folly::coro::Task< ::nebula::storage::cpp2::AdminExecResp> co_addLearner(apache::thrift::RpcOptions* rpcOptions, const  ::nebula::storage::cpp2::AddLearnerReq& p_req) {
    const folly::CancellationToken& cancelToken =
        co_await folly::coro::co_current_cancellation_token;
    const bool cancellable = cancelToken.canBeCancelled();
    apache::thrift::ClientReceiveState returnState;
    apache::thrift::ClientSyncCallback<false> callback(&returnState);
    auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
    auto ctx = addLearnerCtx(rpcOptions);
    using CancellableCallback = apache::thrift::CancellableRequestClientCallback<false>;
    auto cancellableCallback = cancellable ? CancellableCallback::create(&callback, channel_) : nullptr;
    static const apache::thrift::RpcOptions defaultRpcOptions;
    auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(cancellableCallback ? (apache::thrift::RequestClientCallback*)cancellableCallback.get() : &callback);
    if constexpr (hasRpcOptions) {
      addLearnerImpl(*rpcOptions, ctx, std::move(wrappedCallback), p_req);
    } else {
      addLearnerImpl(defaultRpcOptions, ctx, std::move(wrappedCallback), p_req);
    }
    if (cancellable) {
      folly::CancellationCallback cb(cancelToken, [&] { CancellableCallback::cancel(std::move(cancellableCallback)); });
      co_await callback.co_waitUntilDone();
    } else {
      co_await callback.co_waitUntilDone();
    }
    if (returnState.isException()) {
      co_yield folly::coro::co_error(std::move(returnState.exception()));
    }
    returnState.resetProtocolId(protocolId);
    returnState.resetCtx(std::shared_ptr<apache::thrift::ContextStack>(ctx, &ctx->ctx));
    SCOPE_EXIT {
      if (hasRpcOptions && returnState.header() && !returnState.header()->getHeaders().empty()) {
        rpcOptions->setReadHeaders(returnState.header()->releaseHeaders());
      }
    };
     ::nebula::storage::cpp2::AdminExecResp _return;
    if (auto ew = recv_wrapped_addLearner(_return, returnState)) {
      co_yield folly::coro::co_error(std::move(ew));
    }
    co_return _return;
  }
 public:
#endif // FOLLY_HAS_COROUTINES

  virtual void addLearner(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::nebula::storage::cpp2::AddLearnerReq& p_req);


  static folly::exception_wrapper recv_wrapped_addLearner( ::nebula::storage::cpp2::AdminExecResp& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_addLearner( ::nebula::storage::cpp2::AdminExecResp& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_addLearner( ::nebula::storage::cpp2::AdminExecResp& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_addLearner( ::nebula::storage::cpp2::AdminExecResp& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  template <typename Protocol_>
  void addLearnerT(Protocol_* prot, apache::thrift::RpcOptions rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const  ::nebula::storage::cpp2::AddLearnerReq& p_req);
  std::shared_ptr<::apache::thrift::detail::ac::ClientRequestContext> addLearnerCtx(apache::thrift::RpcOptions* rpcOptions);
 public:
  virtual void removePart(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::nebula::storage::cpp2::RemovePartReq& p_req);
  virtual void removePart(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::nebula::storage::cpp2::RemovePartReq& p_req);
 protected:
  void removePartImpl(const apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const  ::nebula::storage::cpp2::RemovePartReq& p_req);
 public:

  virtual void sync_removePart( ::nebula::storage::cpp2::AdminExecResp& _return, const  ::nebula::storage::cpp2::RemovePartReq& p_req);
  virtual void sync_removePart(apache::thrift::RpcOptions& rpcOptions,  ::nebula::storage::cpp2::AdminExecResp& _return, const  ::nebula::storage::cpp2::RemovePartReq& p_req);

  virtual folly::Future< ::nebula::storage::cpp2::AdminExecResp> future_removePart(const  ::nebula::storage::cpp2::RemovePartReq& p_req);
  virtual folly::SemiFuture< ::nebula::storage::cpp2::AdminExecResp> semifuture_removePart(const  ::nebula::storage::cpp2::RemovePartReq& p_req);
  virtual folly::Future< ::nebula::storage::cpp2::AdminExecResp> future_removePart(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::RemovePartReq& p_req);
  virtual folly::SemiFuture< ::nebula::storage::cpp2::AdminExecResp> semifuture_removePart(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::RemovePartReq& p_req);
  virtual folly::Future<std::pair< ::nebula::storage::cpp2::AdminExecResp, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_removePart(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::RemovePartReq& p_req);
  virtual folly::SemiFuture<std::pair< ::nebula::storage::cpp2::AdminExecResp, std::unique_ptr<apache::thrift::transport::THeader>>> header_semifuture_removePart(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::RemovePartReq& p_req);

#if FOLLY_HAS_COROUTINES
  template <int = 0>
  folly::coro::Task< ::nebula::storage::cpp2::AdminExecResp> co_removePart(const  ::nebula::storage::cpp2::RemovePartReq& p_req) {
    return co_removePart<false>(nullptr, p_req);
  }
  template <int = 0>
  folly::coro::Task< ::nebula::storage::cpp2::AdminExecResp> co_removePart(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::RemovePartReq& p_req) {
    return co_removePart<true>(&rpcOptions, p_req);
  }
 private:
  template <bool hasRpcOptions>
  folly::coro::Task< ::nebula::storage::cpp2::AdminExecResp> co_removePart(apache::thrift::RpcOptions* rpcOptions, const  ::nebula::storage::cpp2::RemovePartReq& p_req) {
    const folly::CancellationToken& cancelToken =
        co_await folly::coro::co_current_cancellation_token;
    const bool cancellable = cancelToken.canBeCancelled();
    apache::thrift::ClientReceiveState returnState;
    apache::thrift::ClientSyncCallback<false> callback(&returnState);
    auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
    auto ctx = removePartCtx(rpcOptions);
    using CancellableCallback = apache::thrift::CancellableRequestClientCallback<false>;
    auto cancellableCallback = cancellable ? CancellableCallback::create(&callback, channel_) : nullptr;
    static const apache::thrift::RpcOptions defaultRpcOptions;
    auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(cancellableCallback ? (apache::thrift::RequestClientCallback*)cancellableCallback.get() : &callback);
    if constexpr (hasRpcOptions) {
      removePartImpl(*rpcOptions, ctx, std::move(wrappedCallback), p_req);
    } else {
      removePartImpl(defaultRpcOptions, ctx, std::move(wrappedCallback), p_req);
    }
    if (cancellable) {
      folly::CancellationCallback cb(cancelToken, [&] { CancellableCallback::cancel(std::move(cancellableCallback)); });
      co_await callback.co_waitUntilDone();
    } else {
      co_await callback.co_waitUntilDone();
    }
    if (returnState.isException()) {
      co_yield folly::coro::co_error(std::move(returnState.exception()));
    }
    returnState.resetProtocolId(protocolId);
    returnState.resetCtx(std::shared_ptr<apache::thrift::ContextStack>(ctx, &ctx->ctx));
    SCOPE_EXIT {
      if (hasRpcOptions && returnState.header() && !returnState.header()->getHeaders().empty()) {
        rpcOptions->setReadHeaders(returnState.header()->releaseHeaders());
      }
    };
     ::nebula::storage::cpp2::AdminExecResp _return;
    if (auto ew = recv_wrapped_removePart(_return, returnState)) {
      co_yield folly::coro::co_error(std::move(ew));
    }
    co_return _return;
  }
 public:
#endif // FOLLY_HAS_COROUTINES

  virtual void removePart(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::nebula::storage::cpp2::RemovePartReq& p_req);


  static folly::exception_wrapper recv_wrapped_removePart( ::nebula::storage::cpp2::AdminExecResp& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_removePart( ::nebula::storage::cpp2::AdminExecResp& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_removePart( ::nebula::storage::cpp2::AdminExecResp& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_removePart( ::nebula::storage::cpp2::AdminExecResp& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  template <typename Protocol_>
  void removePartT(Protocol_* prot, apache::thrift::RpcOptions rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const  ::nebula::storage::cpp2::RemovePartReq& p_req);
  std::shared_ptr<::apache::thrift::detail::ac::ClientRequestContext> removePartCtx(apache::thrift::RpcOptions* rpcOptions);
 public:
  virtual void memberChange(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::nebula::storage::cpp2::MemberChangeReq& p_req);
  virtual void memberChange(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::nebula::storage::cpp2::MemberChangeReq& p_req);
 protected:
  void memberChangeImpl(const apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const  ::nebula::storage::cpp2::MemberChangeReq& p_req);
 public:

  virtual void sync_memberChange( ::nebula::storage::cpp2::AdminExecResp& _return, const  ::nebula::storage::cpp2::MemberChangeReq& p_req);
  virtual void sync_memberChange(apache::thrift::RpcOptions& rpcOptions,  ::nebula::storage::cpp2::AdminExecResp& _return, const  ::nebula::storage::cpp2::MemberChangeReq& p_req);

  virtual folly::Future< ::nebula::storage::cpp2::AdminExecResp> future_memberChange(const  ::nebula::storage::cpp2::MemberChangeReq& p_req);
  virtual folly::SemiFuture< ::nebula::storage::cpp2::AdminExecResp> semifuture_memberChange(const  ::nebula::storage::cpp2::MemberChangeReq& p_req);
  virtual folly::Future< ::nebula::storage::cpp2::AdminExecResp> future_memberChange(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::MemberChangeReq& p_req);
  virtual folly::SemiFuture< ::nebula::storage::cpp2::AdminExecResp> semifuture_memberChange(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::MemberChangeReq& p_req);
  virtual folly::Future<std::pair< ::nebula::storage::cpp2::AdminExecResp, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_memberChange(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::MemberChangeReq& p_req);
  virtual folly::SemiFuture<std::pair< ::nebula::storage::cpp2::AdminExecResp, std::unique_ptr<apache::thrift::transport::THeader>>> header_semifuture_memberChange(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::MemberChangeReq& p_req);

#if FOLLY_HAS_COROUTINES
  template <int = 0>
  folly::coro::Task< ::nebula::storage::cpp2::AdminExecResp> co_memberChange(const  ::nebula::storage::cpp2::MemberChangeReq& p_req) {
    return co_memberChange<false>(nullptr, p_req);
  }
  template <int = 0>
  folly::coro::Task< ::nebula::storage::cpp2::AdminExecResp> co_memberChange(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::MemberChangeReq& p_req) {
    return co_memberChange<true>(&rpcOptions, p_req);
  }
 private:
  template <bool hasRpcOptions>
  folly::coro::Task< ::nebula::storage::cpp2::AdminExecResp> co_memberChange(apache::thrift::RpcOptions* rpcOptions, const  ::nebula::storage::cpp2::MemberChangeReq& p_req) {
    const folly::CancellationToken& cancelToken =
        co_await folly::coro::co_current_cancellation_token;
    const bool cancellable = cancelToken.canBeCancelled();
    apache::thrift::ClientReceiveState returnState;
    apache::thrift::ClientSyncCallback<false> callback(&returnState);
    auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
    auto ctx = memberChangeCtx(rpcOptions);
    using CancellableCallback = apache::thrift::CancellableRequestClientCallback<false>;
    auto cancellableCallback = cancellable ? CancellableCallback::create(&callback, channel_) : nullptr;
    static const apache::thrift::RpcOptions defaultRpcOptions;
    auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(cancellableCallback ? (apache::thrift::RequestClientCallback*)cancellableCallback.get() : &callback);
    if constexpr (hasRpcOptions) {
      memberChangeImpl(*rpcOptions, ctx, std::move(wrappedCallback), p_req);
    } else {
      memberChangeImpl(defaultRpcOptions, ctx, std::move(wrappedCallback), p_req);
    }
    if (cancellable) {
      folly::CancellationCallback cb(cancelToken, [&] { CancellableCallback::cancel(std::move(cancellableCallback)); });
      co_await callback.co_waitUntilDone();
    } else {
      co_await callback.co_waitUntilDone();
    }
    if (returnState.isException()) {
      co_yield folly::coro::co_error(std::move(returnState.exception()));
    }
    returnState.resetProtocolId(protocolId);
    returnState.resetCtx(std::shared_ptr<apache::thrift::ContextStack>(ctx, &ctx->ctx));
    SCOPE_EXIT {
      if (hasRpcOptions && returnState.header() && !returnState.header()->getHeaders().empty()) {
        rpcOptions->setReadHeaders(returnState.header()->releaseHeaders());
      }
    };
     ::nebula::storage::cpp2::AdminExecResp _return;
    if (auto ew = recv_wrapped_memberChange(_return, returnState)) {
      co_yield folly::coro::co_error(std::move(ew));
    }
    co_return _return;
  }
 public:
#endif // FOLLY_HAS_COROUTINES

  virtual void memberChange(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::nebula::storage::cpp2::MemberChangeReq& p_req);


  static folly::exception_wrapper recv_wrapped_memberChange( ::nebula::storage::cpp2::AdminExecResp& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_memberChange( ::nebula::storage::cpp2::AdminExecResp& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_memberChange( ::nebula::storage::cpp2::AdminExecResp& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_memberChange( ::nebula::storage::cpp2::AdminExecResp& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  template <typename Protocol_>
  void memberChangeT(Protocol_* prot, apache::thrift::RpcOptions rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const  ::nebula::storage::cpp2::MemberChangeReq& p_req);
  std::shared_ptr<::apache::thrift::detail::ac::ClientRequestContext> memberChangeCtx(apache::thrift::RpcOptions* rpcOptions);
 public:
  virtual void waitingForCatchUpData(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::nebula::storage::cpp2::CatchUpDataReq& p_req);
  virtual void waitingForCatchUpData(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::nebula::storage::cpp2::CatchUpDataReq& p_req);
 protected:
  void waitingForCatchUpDataImpl(const apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const  ::nebula::storage::cpp2::CatchUpDataReq& p_req);
 public:

  virtual void sync_waitingForCatchUpData( ::nebula::storage::cpp2::AdminExecResp& _return, const  ::nebula::storage::cpp2::CatchUpDataReq& p_req);
  virtual void sync_waitingForCatchUpData(apache::thrift::RpcOptions& rpcOptions,  ::nebula::storage::cpp2::AdminExecResp& _return, const  ::nebula::storage::cpp2::CatchUpDataReq& p_req);

  virtual folly::Future< ::nebula::storage::cpp2::AdminExecResp> future_waitingForCatchUpData(const  ::nebula::storage::cpp2::CatchUpDataReq& p_req);
  virtual folly::SemiFuture< ::nebula::storage::cpp2::AdminExecResp> semifuture_waitingForCatchUpData(const  ::nebula::storage::cpp2::CatchUpDataReq& p_req);
  virtual folly::Future< ::nebula::storage::cpp2::AdminExecResp> future_waitingForCatchUpData(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::CatchUpDataReq& p_req);
  virtual folly::SemiFuture< ::nebula::storage::cpp2::AdminExecResp> semifuture_waitingForCatchUpData(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::CatchUpDataReq& p_req);
  virtual folly::Future<std::pair< ::nebula::storage::cpp2::AdminExecResp, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_waitingForCatchUpData(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::CatchUpDataReq& p_req);
  virtual folly::SemiFuture<std::pair< ::nebula::storage::cpp2::AdminExecResp, std::unique_ptr<apache::thrift::transport::THeader>>> header_semifuture_waitingForCatchUpData(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::CatchUpDataReq& p_req);

#if FOLLY_HAS_COROUTINES
  template <int = 0>
  folly::coro::Task< ::nebula::storage::cpp2::AdminExecResp> co_waitingForCatchUpData(const  ::nebula::storage::cpp2::CatchUpDataReq& p_req) {
    return co_waitingForCatchUpData<false>(nullptr, p_req);
  }
  template <int = 0>
  folly::coro::Task< ::nebula::storage::cpp2::AdminExecResp> co_waitingForCatchUpData(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::CatchUpDataReq& p_req) {
    return co_waitingForCatchUpData<true>(&rpcOptions, p_req);
  }
 private:
  template <bool hasRpcOptions>
  folly::coro::Task< ::nebula::storage::cpp2::AdminExecResp> co_waitingForCatchUpData(apache::thrift::RpcOptions* rpcOptions, const  ::nebula::storage::cpp2::CatchUpDataReq& p_req) {
    const folly::CancellationToken& cancelToken =
        co_await folly::coro::co_current_cancellation_token;
    const bool cancellable = cancelToken.canBeCancelled();
    apache::thrift::ClientReceiveState returnState;
    apache::thrift::ClientSyncCallback<false> callback(&returnState);
    auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
    auto ctx = waitingForCatchUpDataCtx(rpcOptions);
    using CancellableCallback = apache::thrift::CancellableRequestClientCallback<false>;
    auto cancellableCallback = cancellable ? CancellableCallback::create(&callback, channel_) : nullptr;
    static const apache::thrift::RpcOptions defaultRpcOptions;
    auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(cancellableCallback ? (apache::thrift::RequestClientCallback*)cancellableCallback.get() : &callback);
    if constexpr (hasRpcOptions) {
      waitingForCatchUpDataImpl(*rpcOptions, ctx, std::move(wrappedCallback), p_req);
    } else {
      waitingForCatchUpDataImpl(defaultRpcOptions, ctx, std::move(wrappedCallback), p_req);
    }
    if (cancellable) {
      folly::CancellationCallback cb(cancelToken, [&] { CancellableCallback::cancel(std::move(cancellableCallback)); });
      co_await callback.co_waitUntilDone();
    } else {
      co_await callback.co_waitUntilDone();
    }
    if (returnState.isException()) {
      co_yield folly::coro::co_error(std::move(returnState.exception()));
    }
    returnState.resetProtocolId(protocolId);
    returnState.resetCtx(std::shared_ptr<apache::thrift::ContextStack>(ctx, &ctx->ctx));
    SCOPE_EXIT {
      if (hasRpcOptions && returnState.header() && !returnState.header()->getHeaders().empty()) {
        rpcOptions->setReadHeaders(returnState.header()->releaseHeaders());
      }
    };
     ::nebula::storage::cpp2::AdminExecResp _return;
    if (auto ew = recv_wrapped_waitingForCatchUpData(_return, returnState)) {
      co_yield folly::coro::co_error(std::move(ew));
    }
    co_return _return;
  }
 public:
#endif // FOLLY_HAS_COROUTINES

  virtual void waitingForCatchUpData(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::nebula::storage::cpp2::CatchUpDataReq& p_req);


  static folly::exception_wrapper recv_wrapped_waitingForCatchUpData( ::nebula::storage::cpp2::AdminExecResp& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_waitingForCatchUpData( ::nebula::storage::cpp2::AdminExecResp& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_waitingForCatchUpData( ::nebula::storage::cpp2::AdminExecResp& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_waitingForCatchUpData( ::nebula::storage::cpp2::AdminExecResp& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  template <typename Protocol_>
  void waitingForCatchUpDataT(Protocol_* prot, apache::thrift::RpcOptions rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const  ::nebula::storage::cpp2::CatchUpDataReq& p_req);
  std::shared_ptr<::apache::thrift::detail::ac::ClientRequestContext> waitingForCatchUpDataCtx(apache::thrift::RpcOptions* rpcOptions);
 public:
  virtual void createCheckpoint(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::nebula::storage::cpp2::CreateCPRequest& p_req);
  virtual void createCheckpoint(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::nebula::storage::cpp2::CreateCPRequest& p_req);
 protected:
  void createCheckpointImpl(const apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const  ::nebula::storage::cpp2::CreateCPRequest& p_req);
 public:

  virtual void sync_createCheckpoint( ::nebula::storage::cpp2::CreateCPResp& _return, const  ::nebula::storage::cpp2::CreateCPRequest& p_req);
  virtual void sync_createCheckpoint(apache::thrift::RpcOptions& rpcOptions,  ::nebula::storage::cpp2::CreateCPResp& _return, const  ::nebula::storage::cpp2::CreateCPRequest& p_req);

  virtual folly::Future< ::nebula::storage::cpp2::CreateCPResp> future_createCheckpoint(const  ::nebula::storage::cpp2::CreateCPRequest& p_req);
  virtual folly::SemiFuture< ::nebula::storage::cpp2::CreateCPResp> semifuture_createCheckpoint(const  ::nebula::storage::cpp2::CreateCPRequest& p_req);
  virtual folly::Future< ::nebula::storage::cpp2::CreateCPResp> future_createCheckpoint(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::CreateCPRequest& p_req);
  virtual folly::SemiFuture< ::nebula::storage::cpp2::CreateCPResp> semifuture_createCheckpoint(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::CreateCPRequest& p_req);
  virtual folly::Future<std::pair< ::nebula::storage::cpp2::CreateCPResp, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_createCheckpoint(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::CreateCPRequest& p_req);
  virtual folly::SemiFuture<std::pair< ::nebula::storage::cpp2::CreateCPResp, std::unique_ptr<apache::thrift::transport::THeader>>> header_semifuture_createCheckpoint(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::CreateCPRequest& p_req);

#if FOLLY_HAS_COROUTINES
  template <int = 0>
  folly::coro::Task< ::nebula::storage::cpp2::CreateCPResp> co_createCheckpoint(const  ::nebula::storage::cpp2::CreateCPRequest& p_req) {
    return co_createCheckpoint<false>(nullptr, p_req);
  }
  template <int = 0>
  folly::coro::Task< ::nebula::storage::cpp2::CreateCPResp> co_createCheckpoint(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::CreateCPRequest& p_req) {
    return co_createCheckpoint<true>(&rpcOptions, p_req);
  }
 private:
  template <bool hasRpcOptions>
  folly::coro::Task< ::nebula::storage::cpp2::CreateCPResp> co_createCheckpoint(apache::thrift::RpcOptions* rpcOptions, const  ::nebula::storage::cpp2::CreateCPRequest& p_req) {
    const folly::CancellationToken& cancelToken =
        co_await folly::coro::co_current_cancellation_token;
    const bool cancellable = cancelToken.canBeCancelled();
    apache::thrift::ClientReceiveState returnState;
    apache::thrift::ClientSyncCallback<false> callback(&returnState);
    auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
    auto ctx = createCheckpointCtx(rpcOptions);
    using CancellableCallback = apache::thrift::CancellableRequestClientCallback<false>;
    auto cancellableCallback = cancellable ? CancellableCallback::create(&callback, channel_) : nullptr;
    static const apache::thrift::RpcOptions defaultRpcOptions;
    auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(cancellableCallback ? (apache::thrift::RequestClientCallback*)cancellableCallback.get() : &callback);
    if constexpr (hasRpcOptions) {
      createCheckpointImpl(*rpcOptions, ctx, std::move(wrappedCallback), p_req);
    } else {
      createCheckpointImpl(defaultRpcOptions, ctx, std::move(wrappedCallback), p_req);
    }
    if (cancellable) {
      folly::CancellationCallback cb(cancelToken, [&] { CancellableCallback::cancel(std::move(cancellableCallback)); });
      co_await callback.co_waitUntilDone();
    } else {
      co_await callback.co_waitUntilDone();
    }
    if (returnState.isException()) {
      co_yield folly::coro::co_error(std::move(returnState.exception()));
    }
    returnState.resetProtocolId(protocolId);
    returnState.resetCtx(std::shared_ptr<apache::thrift::ContextStack>(ctx, &ctx->ctx));
    SCOPE_EXIT {
      if (hasRpcOptions && returnState.header() && !returnState.header()->getHeaders().empty()) {
        rpcOptions->setReadHeaders(returnState.header()->releaseHeaders());
      }
    };
     ::nebula::storage::cpp2::CreateCPResp _return;
    if (auto ew = recv_wrapped_createCheckpoint(_return, returnState)) {
      co_yield folly::coro::co_error(std::move(ew));
    }
    co_return _return;
  }
 public:
#endif // FOLLY_HAS_COROUTINES

  virtual void createCheckpoint(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::nebula::storage::cpp2::CreateCPRequest& p_req);


  static folly::exception_wrapper recv_wrapped_createCheckpoint( ::nebula::storage::cpp2::CreateCPResp& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_createCheckpoint( ::nebula::storage::cpp2::CreateCPResp& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_createCheckpoint( ::nebula::storage::cpp2::CreateCPResp& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_createCheckpoint( ::nebula::storage::cpp2::CreateCPResp& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  template <typename Protocol_>
  void createCheckpointT(Protocol_* prot, apache::thrift::RpcOptions rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const  ::nebula::storage::cpp2::CreateCPRequest& p_req);
  std::shared_ptr<::apache::thrift::detail::ac::ClientRequestContext> createCheckpointCtx(apache::thrift::RpcOptions* rpcOptions);
 public:
  virtual void dropCheckpoint(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::nebula::storage::cpp2::DropCPRequest& p_req);
  virtual void dropCheckpoint(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::nebula::storage::cpp2::DropCPRequest& p_req);
 protected:
  void dropCheckpointImpl(const apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const  ::nebula::storage::cpp2::DropCPRequest& p_req);
 public:

  virtual void sync_dropCheckpoint( ::nebula::storage::cpp2::DropCPResp& _return, const  ::nebula::storage::cpp2::DropCPRequest& p_req);
  virtual void sync_dropCheckpoint(apache::thrift::RpcOptions& rpcOptions,  ::nebula::storage::cpp2::DropCPResp& _return, const  ::nebula::storage::cpp2::DropCPRequest& p_req);

  virtual folly::Future< ::nebula::storage::cpp2::DropCPResp> future_dropCheckpoint(const  ::nebula::storage::cpp2::DropCPRequest& p_req);
  virtual folly::SemiFuture< ::nebula::storage::cpp2::DropCPResp> semifuture_dropCheckpoint(const  ::nebula::storage::cpp2::DropCPRequest& p_req);
  virtual folly::Future< ::nebula::storage::cpp2::DropCPResp> future_dropCheckpoint(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::DropCPRequest& p_req);
  virtual folly::SemiFuture< ::nebula::storage::cpp2::DropCPResp> semifuture_dropCheckpoint(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::DropCPRequest& p_req);
  virtual folly::Future<std::pair< ::nebula::storage::cpp2::DropCPResp, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_dropCheckpoint(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::DropCPRequest& p_req);
  virtual folly::SemiFuture<std::pair< ::nebula::storage::cpp2::DropCPResp, std::unique_ptr<apache::thrift::transport::THeader>>> header_semifuture_dropCheckpoint(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::DropCPRequest& p_req);

#if FOLLY_HAS_COROUTINES
  template <int = 0>
  folly::coro::Task< ::nebula::storage::cpp2::DropCPResp> co_dropCheckpoint(const  ::nebula::storage::cpp2::DropCPRequest& p_req) {
    return co_dropCheckpoint<false>(nullptr, p_req);
  }
  template <int = 0>
  folly::coro::Task< ::nebula::storage::cpp2::DropCPResp> co_dropCheckpoint(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::DropCPRequest& p_req) {
    return co_dropCheckpoint<true>(&rpcOptions, p_req);
  }
 private:
  template <bool hasRpcOptions>
  folly::coro::Task< ::nebula::storage::cpp2::DropCPResp> co_dropCheckpoint(apache::thrift::RpcOptions* rpcOptions, const  ::nebula::storage::cpp2::DropCPRequest& p_req) {
    const folly::CancellationToken& cancelToken =
        co_await folly::coro::co_current_cancellation_token;
    const bool cancellable = cancelToken.canBeCancelled();
    apache::thrift::ClientReceiveState returnState;
    apache::thrift::ClientSyncCallback<false> callback(&returnState);
    auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
    auto ctx = dropCheckpointCtx(rpcOptions);
    using CancellableCallback = apache::thrift::CancellableRequestClientCallback<false>;
    auto cancellableCallback = cancellable ? CancellableCallback::create(&callback, channel_) : nullptr;
    static const apache::thrift::RpcOptions defaultRpcOptions;
    auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(cancellableCallback ? (apache::thrift::RequestClientCallback*)cancellableCallback.get() : &callback);
    if constexpr (hasRpcOptions) {
      dropCheckpointImpl(*rpcOptions, ctx, std::move(wrappedCallback), p_req);
    } else {
      dropCheckpointImpl(defaultRpcOptions, ctx, std::move(wrappedCallback), p_req);
    }
    if (cancellable) {
      folly::CancellationCallback cb(cancelToken, [&] { CancellableCallback::cancel(std::move(cancellableCallback)); });
      co_await callback.co_waitUntilDone();
    } else {
      co_await callback.co_waitUntilDone();
    }
    if (returnState.isException()) {
      co_yield folly::coro::co_error(std::move(returnState.exception()));
    }
    returnState.resetProtocolId(protocolId);
    returnState.resetCtx(std::shared_ptr<apache::thrift::ContextStack>(ctx, &ctx->ctx));
    SCOPE_EXIT {
      if (hasRpcOptions && returnState.header() && !returnState.header()->getHeaders().empty()) {
        rpcOptions->setReadHeaders(returnState.header()->releaseHeaders());
      }
    };
     ::nebula::storage::cpp2::DropCPResp _return;
    if (auto ew = recv_wrapped_dropCheckpoint(_return, returnState)) {
      co_yield folly::coro::co_error(std::move(ew));
    }
    co_return _return;
  }
 public:
#endif // FOLLY_HAS_COROUTINES

  virtual void dropCheckpoint(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::nebula::storage::cpp2::DropCPRequest& p_req);


  static folly::exception_wrapper recv_wrapped_dropCheckpoint( ::nebula::storage::cpp2::DropCPResp& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_dropCheckpoint( ::nebula::storage::cpp2::DropCPResp& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_dropCheckpoint( ::nebula::storage::cpp2::DropCPResp& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_dropCheckpoint( ::nebula::storage::cpp2::DropCPResp& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  template <typename Protocol_>
  void dropCheckpointT(Protocol_* prot, apache::thrift::RpcOptions rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const  ::nebula::storage::cpp2::DropCPRequest& p_req);
  std::shared_ptr<::apache::thrift::detail::ac::ClientRequestContext> dropCheckpointCtx(apache::thrift::RpcOptions* rpcOptions);
 public:
  virtual void blockingWrites(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::nebula::storage::cpp2::BlockingSignRequest& p_req);
  virtual void blockingWrites(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::nebula::storage::cpp2::BlockingSignRequest& p_req);
 protected:
  void blockingWritesImpl(const apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const  ::nebula::storage::cpp2::BlockingSignRequest& p_req);
 public:

  virtual void sync_blockingWrites( ::nebula::storage::cpp2::BlockingSignResp& _return, const  ::nebula::storage::cpp2::BlockingSignRequest& p_req);
  virtual void sync_blockingWrites(apache::thrift::RpcOptions& rpcOptions,  ::nebula::storage::cpp2::BlockingSignResp& _return, const  ::nebula::storage::cpp2::BlockingSignRequest& p_req);

  virtual folly::Future< ::nebula::storage::cpp2::BlockingSignResp> future_blockingWrites(const  ::nebula::storage::cpp2::BlockingSignRequest& p_req);
  virtual folly::SemiFuture< ::nebula::storage::cpp2::BlockingSignResp> semifuture_blockingWrites(const  ::nebula::storage::cpp2::BlockingSignRequest& p_req);
  virtual folly::Future< ::nebula::storage::cpp2::BlockingSignResp> future_blockingWrites(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::BlockingSignRequest& p_req);
  virtual folly::SemiFuture< ::nebula::storage::cpp2::BlockingSignResp> semifuture_blockingWrites(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::BlockingSignRequest& p_req);
  virtual folly::Future<std::pair< ::nebula::storage::cpp2::BlockingSignResp, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_blockingWrites(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::BlockingSignRequest& p_req);
  virtual folly::SemiFuture<std::pair< ::nebula::storage::cpp2::BlockingSignResp, std::unique_ptr<apache::thrift::transport::THeader>>> header_semifuture_blockingWrites(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::BlockingSignRequest& p_req);

#if FOLLY_HAS_COROUTINES
  template <int = 0>
  folly::coro::Task< ::nebula::storage::cpp2::BlockingSignResp> co_blockingWrites(const  ::nebula::storage::cpp2::BlockingSignRequest& p_req) {
    return co_blockingWrites<false>(nullptr, p_req);
  }
  template <int = 0>
  folly::coro::Task< ::nebula::storage::cpp2::BlockingSignResp> co_blockingWrites(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::BlockingSignRequest& p_req) {
    return co_blockingWrites<true>(&rpcOptions, p_req);
  }
 private:
  template <bool hasRpcOptions>
  folly::coro::Task< ::nebula::storage::cpp2::BlockingSignResp> co_blockingWrites(apache::thrift::RpcOptions* rpcOptions, const  ::nebula::storage::cpp2::BlockingSignRequest& p_req) {
    const folly::CancellationToken& cancelToken =
        co_await folly::coro::co_current_cancellation_token;
    const bool cancellable = cancelToken.canBeCancelled();
    apache::thrift::ClientReceiveState returnState;
    apache::thrift::ClientSyncCallback<false> callback(&returnState);
    auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
    auto ctx = blockingWritesCtx(rpcOptions);
    using CancellableCallback = apache::thrift::CancellableRequestClientCallback<false>;
    auto cancellableCallback = cancellable ? CancellableCallback::create(&callback, channel_) : nullptr;
    static const apache::thrift::RpcOptions defaultRpcOptions;
    auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(cancellableCallback ? (apache::thrift::RequestClientCallback*)cancellableCallback.get() : &callback);
    if constexpr (hasRpcOptions) {
      blockingWritesImpl(*rpcOptions, ctx, std::move(wrappedCallback), p_req);
    } else {
      blockingWritesImpl(defaultRpcOptions, ctx, std::move(wrappedCallback), p_req);
    }
    if (cancellable) {
      folly::CancellationCallback cb(cancelToken, [&] { CancellableCallback::cancel(std::move(cancellableCallback)); });
      co_await callback.co_waitUntilDone();
    } else {
      co_await callback.co_waitUntilDone();
    }
    if (returnState.isException()) {
      co_yield folly::coro::co_error(std::move(returnState.exception()));
    }
    returnState.resetProtocolId(protocolId);
    returnState.resetCtx(std::shared_ptr<apache::thrift::ContextStack>(ctx, &ctx->ctx));
    SCOPE_EXIT {
      if (hasRpcOptions && returnState.header() && !returnState.header()->getHeaders().empty()) {
        rpcOptions->setReadHeaders(returnState.header()->releaseHeaders());
      }
    };
     ::nebula::storage::cpp2::BlockingSignResp _return;
    if (auto ew = recv_wrapped_blockingWrites(_return, returnState)) {
      co_yield folly::coro::co_error(std::move(ew));
    }
    co_return _return;
  }
 public:
#endif // FOLLY_HAS_COROUTINES

  virtual void blockingWrites(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::nebula::storage::cpp2::BlockingSignRequest& p_req);


  static folly::exception_wrapper recv_wrapped_blockingWrites( ::nebula::storage::cpp2::BlockingSignResp& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_blockingWrites( ::nebula::storage::cpp2::BlockingSignResp& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_blockingWrites( ::nebula::storage::cpp2::BlockingSignResp& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_blockingWrites( ::nebula::storage::cpp2::BlockingSignResp& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  template <typename Protocol_>
  void blockingWritesT(Protocol_* prot, apache::thrift::RpcOptions rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const  ::nebula::storage::cpp2::BlockingSignRequest& p_req);
  std::shared_ptr<::apache::thrift::detail::ac::ClientRequestContext> blockingWritesCtx(apache::thrift::RpcOptions* rpcOptions);
 public:
  virtual void getLeaderParts(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::nebula::storage::cpp2::GetLeaderReq& p_req);
  virtual void getLeaderParts(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::nebula::storage::cpp2::GetLeaderReq& p_req);
 protected:
  void getLeaderPartsImpl(const apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const  ::nebula::storage::cpp2::GetLeaderReq& p_req);
 public:

  virtual void sync_getLeaderParts( ::nebula::storage::cpp2::GetLeaderPartsResp& _return, const  ::nebula::storage::cpp2::GetLeaderReq& p_req);
  virtual void sync_getLeaderParts(apache::thrift::RpcOptions& rpcOptions,  ::nebula::storage::cpp2::GetLeaderPartsResp& _return, const  ::nebula::storage::cpp2::GetLeaderReq& p_req);

  virtual folly::Future< ::nebula::storage::cpp2::GetLeaderPartsResp> future_getLeaderParts(const  ::nebula::storage::cpp2::GetLeaderReq& p_req);
  virtual folly::SemiFuture< ::nebula::storage::cpp2::GetLeaderPartsResp> semifuture_getLeaderParts(const  ::nebula::storage::cpp2::GetLeaderReq& p_req);
  virtual folly::Future< ::nebula::storage::cpp2::GetLeaderPartsResp> future_getLeaderParts(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::GetLeaderReq& p_req);
  virtual folly::SemiFuture< ::nebula::storage::cpp2::GetLeaderPartsResp> semifuture_getLeaderParts(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::GetLeaderReq& p_req);
  virtual folly::Future<std::pair< ::nebula::storage::cpp2::GetLeaderPartsResp, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_getLeaderParts(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::GetLeaderReq& p_req);
  virtual folly::SemiFuture<std::pair< ::nebula::storage::cpp2::GetLeaderPartsResp, std::unique_ptr<apache::thrift::transport::THeader>>> header_semifuture_getLeaderParts(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::GetLeaderReq& p_req);

#if FOLLY_HAS_COROUTINES
  template <int = 0>
  folly::coro::Task< ::nebula::storage::cpp2::GetLeaderPartsResp> co_getLeaderParts(const  ::nebula::storage::cpp2::GetLeaderReq& p_req) {
    return co_getLeaderParts<false>(nullptr, p_req);
  }
  template <int = 0>
  folly::coro::Task< ::nebula::storage::cpp2::GetLeaderPartsResp> co_getLeaderParts(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::GetLeaderReq& p_req) {
    return co_getLeaderParts<true>(&rpcOptions, p_req);
  }
 private:
  template <bool hasRpcOptions>
  folly::coro::Task< ::nebula::storage::cpp2::GetLeaderPartsResp> co_getLeaderParts(apache::thrift::RpcOptions* rpcOptions, const  ::nebula::storage::cpp2::GetLeaderReq& p_req) {
    const folly::CancellationToken& cancelToken =
        co_await folly::coro::co_current_cancellation_token;
    const bool cancellable = cancelToken.canBeCancelled();
    apache::thrift::ClientReceiveState returnState;
    apache::thrift::ClientSyncCallback<false> callback(&returnState);
    auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
    auto ctx = getLeaderPartsCtx(rpcOptions);
    using CancellableCallback = apache::thrift::CancellableRequestClientCallback<false>;
    auto cancellableCallback = cancellable ? CancellableCallback::create(&callback, channel_) : nullptr;
    static const apache::thrift::RpcOptions defaultRpcOptions;
    auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(cancellableCallback ? (apache::thrift::RequestClientCallback*)cancellableCallback.get() : &callback);
    if constexpr (hasRpcOptions) {
      getLeaderPartsImpl(*rpcOptions, ctx, std::move(wrappedCallback), p_req);
    } else {
      getLeaderPartsImpl(defaultRpcOptions, ctx, std::move(wrappedCallback), p_req);
    }
    if (cancellable) {
      folly::CancellationCallback cb(cancelToken, [&] { CancellableCallback::cancel(std::move(cancellableCallback)); });
      co_await callback.co_waitUntilDone();
    } else {
      co_await callback.co_waitUntilDone();
    }
    if (returnState.isException()) {
      co_yield folly::coro::co_error(std::move(returnState.exception()));
    }
    returnState.resetProtocolId(protocolId);
    returnState.resetCtx(std::shared_ptr<apache::thrift::ContextStack>(ctx, &ctx->ctx));
    SCOPE_EXIT {
      if (hasRpcOptions && returnState.header() && !returnState.header()->getHeaders().empty()) {
        rpcOptions->setReadHeaders(returnState.header()->releaseHeaders());
      }
    };
     ::nebula::storage::cpp2::GetLeaderPartsResp _return;
    if (auto ew = recv_wrapped_getLeaderParts(_return, returnState)) {
      co_yield folly::coro::co_error(std::move(ew));
    }
    co_return _return;
  }
 public:
#endif // FOLLY_HAS_COROUTINES

  virtual void getLeaderParts(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::nebula::storage::cpp2::GetLeaderReq& p_req);


  static folly::exception_wrapper recv_wrapped_getLeaderParts( ::nebula::storage::cpp2::GetLeaderPartsResp& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_getLeaderParts( ::nebula::storage::cpp2::GetLeaderPartsResp& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_getLeaderParts( ::nebula::storage::cpp2::GetLeaderPartsResp& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_getLeaderParts( ::nebula::storage::cpp2::GetLeaderPartsResp& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  template <typename Protocol_>
  void getLeaderPartsT(Protocol_* prot, apache::thrift::RpcOptions rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const  ::nebula::storage::cpp2::GetLeaderReq& p_req);
  std::shared_ptr<::apache::thrift::detail::ac::ClientRequestContext> getLeaderPartsCtx(apache::thrift::RpcOptions* rpcOptions);
 public:
  virtual void checkPeers(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::nebula::storage::cpp2::CheckPeersReq& p_req);
  virtual void checkPeers(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::nebula::storage::cpp2::CheckPeersReq& p_req);
 protected:
  void checkPeersImpl(const apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const  ::nebula::storage::cpp2::CheckPeersReq& p_req);
 public:

  virtual void sync_checkPeers( ::nebula::storage::cpp2::AdminExecResp& _return, const  ::nebula::storage::cpp2::CheckPeersReq& p_req);
  virtual void sync_checkPeers(apache::thrift::RpcOptions& rpcOptions,  ::nebula::storage::cpp2::AdminExecResp& _return, const  ::nebula::storage::cpp2::CheckPeersReq& p_req);

  virtual folly::Future< ::nebula::storage::cpp2::AdminExecResp> future_checkPeers(const  ::nebula::storage::cpp2::CheckPeersReq& p_req);
  virtual folly::SemiFuture< ::nebula::storage::cpp2::AdminExecResp> semifuture_checkPeers(const  ::nebula::storage::cpp2::CheckPeersReq& p_req);
  virtual folly::Future< ::nebula::storage::cpp2::AdminExecResp> future_checkPeers(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::CheckPeersReq& p_req);
  virtual folly::SemiFuture< ::nebula::storage::cpp2::AdminExecResp> semifuture_checkPeers(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::CheckPeersReq& p_req);
  virtual folly::Future<std::pair< ::nebula::storage::cpp2::AdminExecResp, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_checkPeers(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::CheckPeersReq& p_req);
  virtual folly::SemiFuture<std::pair< ::nebula::storage::cpp2::AdminExecResp, std::unique_ptr<apache::thrift::transport::THeader>>> header_semifuture_checkPeers(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::CheckPeersReq& p_req);

#if FOLLY_HAS_COROUTINES
  template <int = 0>
  folly::coro::Task< ::nebula::storage::cpp2::AdminExecResp> co_checkPeers(const  ::nebula::storage::cpp2::CheckPeersReq& p_req) {
    return co_checkPeers<false>(nullptr, p_req);
  }
  template <int = 0>
  folly::coro::Task< ::nebula::storage::cpp2::AdminExecResp> co_checkPeers(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::CheckPeersReq& p_req) {
    return co_checkPeers<true>(&rpcOptions, p_req);
  }
 private:
  template <bool hasRpcOptions>
  folly::coro::Task< ::nebula::storage::cpp2::AdminExecResp> co_checkPeers(apache::thrift::RpcOptions* rpcOptions, const  ::nebula::storage::cpp2::CheckPeersReq& p_req) {
    const folly::CancellationToken& cancelToken =
        co_await folly::coro::co_current_cancellation_token;
    const bool cancellable = cancelToken.canBeCancelled();
    apache::thrift::ClientReceiveState returnState;
    apache::thrift::ClientSyncCallback<false> callback(&returnState);
    auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
    auto ctx = checkPeersCtx(rpcOptions);
    using CancellableCallback = apache::thrift::CancellableRequestClientCallback<false>;
    auto cancellableCallback = cancellable ? CancellableCallback::create(&callback, channel_) : nullptr;
    static const apache::thrift::RpcOptions defaultRpcOptions;
    auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(cancellableCallback ? (apache::thrift::RequestClientCallback*)cancellableCallback.get() : &callback);
    if constexpr (hasRpcOptions) {
      checkPeersImpl(*rpcOptions, ctx, std::move(wrappedCallback), p_req);
    } else {
      checkPeersImpl(defaultRpcOptions, ctx, std::move(wrappedCallback), p_req);
    }
    if (cancellable) {
      folly::CancellationCallback cb(cancelToken, [&] { CancellableCallback::cancel(std::move(cancellableCallback)); });
      co_await callback.co_waitUntilDone();
    } else {
      co_await callback.co_waitUntilDone();
    }
    if (returnState.isException()) {
      co_yield folly::coro::co_error(std::move(returnState.exception()));
    }
    returnState.resetProtocolId(protocolId);
    returnState.resetCtx(std::shared_ptr<apache::thrift::ContextStack>(ctx, &ctx->ctx));
    SCOPE_EXIT {
      if (hasRpcOptions && returnState.header() && !returnState.header()->getHeaders().empty()) {
        rpcOptions->setReadHeaders(returnState.header()->releaseHeaders());
      }
    };
     ::nebula::storage::cpp2::AdminExecResp _return;
    if (auto ew = recv_wrapped_checkPeers(_return, returnState)) {
      co_yield folly::coro::co_error(std::move(ew));
    }
    co_return _return;
  }
 public:
#endif // FOLLY_HAS_COROUTINES

  virtual void checkPeers(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::nebula::storage::cpp2::CheckPeersReq& p_req);


  static folly::exception_wrapper recv_wrapped_checkPeers( ::nebula::storage::cpp2::AdminExecResp& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_checkPeers( ::nebula::storage::cpp2::AdminExecResp& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_checkPeers( ::nebula::storage::cpp2::AdminExecResp& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_checkPeers( ::nebula::storage::cpp2::AdminExecResp& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  template <typename Protocol_>
  void checkPeersT(Protocol_* prot, apache::thrift::RpcOptions rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const  ::nebula::storage::cpp2::CheckPeersReq& p_req);
  std::shared_ptr<::apache::thrift::detail::ac::ClientRequestContext> checkPeersCtx(apache::thrift::RpcOptions* rpcOptions);
 public:
  virtual void addAdminTask(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::nebula::storage::cpp2::AddTaskRequest& p_req);
  virtual void addAdminTask(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::nebula::storage::cpp2::AddTaskRequest& p_req);
 protected:
  void addAdminTaskImpl(const apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const  ::nebula::storage::cpp2::AddTaskRequest& p_req);
 public:

  virtual void sync_addAdminTask( ::nebula::storage::cpp2::AddTaskResp& _return, const  ::nebula::storage::cpp2::AddTaskRequest& p_req);
  virtual void sync_addAdminTask(apache::thrift::RpcOptions& rpcOptions,  ::nebula::storage::cpp2::AddTaskResp& _return, const  ::nebula::storage::cpp2::AddTaskRequest& p_req);

  virtual folly::Future< ::nebula::storage::cpp2::AddTaskResp> future_addAdminTask(const  ::nebula::storage::cpp2::AddTaskRequest& p_req);
  virtual folly::SemiFuture< ::nebula::storage::cpp2::AddTaskResp> semifuture_addAdminTask(const  ::nebula::storage::cpp2::AddTaskRequest& p_req);
  virtual folly::Future< ::nebula::storage::cpp2::AddTaskResp> future_addAdminTask(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::AddTaskRequest& p_req);
  virtual folly::SemiFuture< ::nebula::storage::cpp2::AddTaskResp> semifuture_addAdminTask(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::AddTaskRequest& p_req);
  virtual folly::Future<std::pair< ::nebula::storage::cpp2::AddTaskResp, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_addAdminTask(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::AddTaskRequest& p_req);
  virtual folly::SemiFuture<std::pair< ::nebula::storage::cpp2::AddTaskResp, std::unique_ptr<apache::thrift::transport::THeader>>> header_semifuture_addAdminTask(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::AddTaskRequest& p_req);

#if FOLLY_HAS_COROUTINES
  template <int = 0>
  folly::coro::Task< ::nebula::storage::cpp2::AddTaskResp> co_addAdminTask(const  ::nebula::storage::cpp2::AddTaskRequest& p_req) {
    return co_addAdminTask<false>(nullptr, p_req);
  }
  template <int = 0>
  folly::coro::Task< ::nebula::storage::cpp2::AddTaskResp> co_addAdminTask(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::AddTaskRequest& p_req) {
    return co_addAdminTask<true>(&rpcOptions, p_req);
  }
 private:
  template <bool hasRpcOptions>
  folly::coro::Task< ::nebula::storage::cpp2::AddTaskResp> co_addAdminTask(apache::thrift::RpcOptions* rpcOptions, const  ::nebula::storage::cpp2::AddTaskRequest& p_req) {
    const folly::CancellationToken& cancelToken =
        co_await folly::coro::co_current_cancellation_token;
    const bool cancellable = cancelToken.canBeCancelled();
    apache::thrift::ClientReceiveState returnState;
    apache::thrift::ClientSyncCallback<false> callback(&returnState);
    auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
    auto ctx = addAdminTaskCtx(rpcOptions);
    using CancellableCallback = apache::thrift::CancellableRequestClientCallback<false>;
    auto cancellableCallback = cancellable ? CancellableCallback::create(&callback, channel_) : nullptr;
    static const apache::thrift::RpcOptions defaultRpcOptions;
    auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(cancellableCallback ? (apache::thrift::RequestClientCallback*)cancellableCallback.get() : &callback);
    if constexpr (hasRpcOptions) {
      addAdminTaskImpl(*rpcOptions, ctx, std::move(wrappedCallback), p_req);
    } else {
      addAdminTaskImpl(defaultRpcOptions, ctx, std::move(wrappedCallback), p_req);
    }
    if (cancellable) {
      folly::CancellationCallback cb(cancelToken, [&] { CancellableCallback::cancel(std::move(cancellableCallback)); });
      co_await callback.co_waitUntilDone();
    } else {
      co_await callback.co_waitUntilDone();
    }
    if (returnState.isException()) {
      co_yield folly::coro::co_error(std::move(returnState.exception()));
    }
    returnState.resetProtocolId(protocolId);
    returnState.resetCtx(std::shared_ptr<apache::thrift::ContextStack>(ctx, &ctx->ctx));
    SCOPE_EXIT {
      if (hasRpcOptions && returnState.header() && !returnState.header()->getHeaders().empty()) {
        rpcOptions->setReadHeaders(returnState.header()->releaseHeaders());
      }
    };
     ::nebula::storage::cpp2::AddTaskResp _return;
    if (auto ew = recv_wrapped_addAdminTask(_return, returnState)) {
      co_yield folly::coro::co_error(std::move(ew));
    }
    co_return _return;
  }
 public:
#endif // FOLLY_HAS_COROUTINES

  virtual void addAdminTask(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::nebula::storage::cpp2::AddTaskRequest& p_req);


  static folly::exception_wrapper recv_wrapped_addAdminTask( ::nebula::storage::cpp2::AddTaskResp& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_addAdminTask( ::nebula::storage::cpp2::AddTaskResp& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_addAdminTask( ::nebula::storage::cpp2::AddTaskResp& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_addAdminTask( ::nebula::storage::cpp2::AddTaskResp& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  template <typename Protocol_>
  void addAdminTaskT(Protocol_* prot, apache::thrift::RpcOptions rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const  ::nebula::storage::cpp2::AddTaskRequest& p_req);
  std::shared_ptr<::apache::thrift::detail::ac::ClientRequestContext> addAdminTaskCtx(apache::thrift::RpcOptions* rpcOptions);
 public:
  virtual void stopAdminTask(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::nebula::storage::cpp2::StopTaskRequest& p_req);
  virtual void stopAdminTask(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::nebula::storage::cpp2::StopTaskRequest& p_req);
 protected:
  void stopAdminTaskImpl(const apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const  ::nebula::storage::cpp2::StopTaskRequest& p_req);
 public:

  virtual void sync_stopAdminTask( ::nebula::storage::cpp2::StopTaskResp& _return, const  ::nebula::storage::cpp2::StopTaskRequest& p_req);
  virtual void sync_stopAdminTask(apache::thrift::RpcOptions& rpcOptions,  ::nebula::storage::cpp2::StopTaskResp& _return, const  ::nebula::storage::cpp2::StopTaskRequest& p_req);

  virtual folly::Future< ::nebula::storage::cpp2::StopTaskResp> future_stopAdminTask(const  ::nebula::storage::cpp2::StopTaskRequest& p_req);
  virtual folly::SemiFuture< ::nebula::storage::cpp2::StopTaskResp> semifuture_stopAdminTask(const  ::nebula::storage::cpp2::StopTaskRequest& p_req);
  virtual folly::Future< ::nebula::storage::cpp2::StopTaskResp> future_stopAdminTask(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::StopTaskRequest& p_req);
  virtual folly::SemiFuture< ::nebula::storage::cpp2::StopTaskResp> semifuture_stopAdminTask(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::StopTaskRequest& p_req);
  virtual folly::Future<std::pair< ::nebula::storage::cpp2::StopTaskResp, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_stopAdminTask(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::StopTaskRequest& p_req);
  virtual folly::SemiFuture<std::pair< ::nebula::storage::cpp2::StopTaskResp, std::unique_ptr<apache::thrift::transport::THeader>>> header_semifuture_stopAdminTask(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::StopTaskRequest& p_req);

#if FOLLY_HAS_COROUTINES
  template <int = 0>
  folly::coro::Task< ::nebula::storage::cpp2::StopTaskResp> co_stopAdminTask(const  ::nebula::storage::cpp2::StopTaskRequest& p_req) {
    return co_stopAdminTask<false>(nullptr, p_req);
  }
  template <int = 0>
  folly::coro::Task< ::nebula::storage::cpp2::StopTaskResp> co_stopAdminTask(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::StopTaskRequest& p_req) {
    return co_stopAdminTask<true>(&rpcOptions, p_req);
  }
 private:
  template <bool hasRpcOptions>
  folly::coro::Task< ::nebula::storage::cpp2::StopTaskResp> co_stopAdminTask(apache::thrift::RpcOptions* rpcOptions, const  ::nebula::storage::cpp2::StopTaskRequest& p_req) {
    const folly::CancellationToken& cancelToken =
        co_await folly::coro::co_current_cancellation_token;
    const bool cancellable = cancelToken.canBeCancelled();
    apache::thrift::ClientReceiveState returnState;
    apache::thrift::ClientSyncCallback<false> callback(&returnState);
    auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
    auto ctx = stopAdminTaskCtx(rpcOptions);
    using CancellableCallback = apache::thrift::CancellableRequestClientCallback<false>;
    auto cancellableCallback = cancellable ? CancellableCallback::create(&callback, channel_) : nullptr;
    static const apache::thrift::RpcOptions defaultRpcOptions;
    auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(cancellableCallback ? (apache::thrift::RequestClientCallback*)cancellableCallback.get() : &callback);
    if constexpr (hasRpcOptions) {
      stopAdminTaskImpl(*rpcOptions, ctx, std::move(wrappedCallback), p_req);
    } else {
      stopAdminTaskImpl(defaultRpcOptions, ctx, std::move(wrappedCallback), p_req);
    }
    if (cancellable) {
      folly::CancellationCallback cb(cancelToken, [&] { CancellableCallback::cancel(std::move(cancellableCallback)); });
      co_await callback.co_waitUntilDone();
    } else {
      co_await callback.co_waitUntilDone();
    }
    if (returnState.isException()) {
      co_yield folly::coro::co_error(std::move(returnState.exception()));
    }
    returnState.resetProtocolId(protocolId);
    returnState.resetCtx(std::shared_ptr<apache::thrift::ContextStack>(ctx, &ctx->ctx));
    SCOPE_EXIT {
      if (hasRpcOptions && returnState.header() && !returnState.header()->getHeaders().empty()) {
        rpcOptions->setReadHeaders(returnState.header()->releaseHeaders());
      }
    };
     ::nebula::storage::cpp2::StopTaskResp _return;
    if (auto ew = recv_wrapped_stopAdminTask(_return, returnState)) {
      co_yield folly::coro::co_error(std::move(ew));
    }
    co_return _return;
  }
 public:
#endif // FOLLY_HAS_COROUTINES

  virtual void stopAdminTask(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::nebula::storage::cpp2::StopTaskRequest& p_req);


  static folly::exception_wrapper recv_wrapped_stopAdminTask( ::nebula::storage::cpp2::StopTaskResp& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_stopAdminTask( ::nebula::storage::cpp2::StopTaskResp& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_stopAdminTask( ::nebula::storage::cpp2::StopTaskResp& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_stopAdminTask( ::nebula::storage::cpp2::StopTaskResp& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  template <typename Protocol_>
  void stopAdminTaskT(Protocol_* prot, apache::thrift::RpcOptions rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const  ::nebula::storage::cpp2::StopTaskRequest& p_req);
  std::shared_ptr<::apache::thrift::detail::ac::ClientRequestContext> stopAdminTaskCtx(apache::thrift::RpcOptions* rpcOptions);
 public:
  virtual void clearSpace(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::nebula::storage::cpp2::ClearSpaceReq& p_req);
  virtual void clearSpace(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::nebula::storage::cpp2::ClearSpaceReq& p_req);
 protected:
  void clearSpaceImpl(const apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const  ::nebula::storage::cpp2::ClearSpaceReq& p_req);
 public:

  virtual void sync_clearSpace( ::nebula::storage::cpp2::ClearSpaceResp& _return, const  ::nebula::storage::cpp2::ClearSpaceReq& p_req);
  virtual void sync_clearSpace(apache::thrift::RpcOptions& rpcOptions,  ::nebula::storage::cpp2::ClearSpaceResp& _return, const  ::nebula::storage::cpp2::ClearSpaceReq& p_req);

  virtual folly::Future< ::nebula::storage::cpp2::ClearSpaceResp> future_clearSpace(const  ::nebula::storage::cpp2::ClearSpaceReq& p_req);
  virtual folly::SemiFuture< ::nebula::storage::cpp2::ClearSpaceResp> semifuture_clearSpace(const  ::nebula::storage::cpp2::ClearSpaceReq& p_req);
  virtual folly::Future< ::nebula::storage::cpp2::ClearSpaceResp> future_clearSpace(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::ClearSpaceReq& p_req);
  virtual folly::SemiFuture< ::nebula::storage::cpp2::ClearSpaceResp> semifuture_clearSpace(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::ClearSpaceReq& p_req);
  virtual folly::Future<std::pair< ::nebula::storage::cpp2::ClearSpaceResp, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_clearSpace(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::ClearSpaceReq& p_req);
  virtual folly::SemiFuture<std::pair< ::nebula::storage::cpp2::ClearSpaceResp, std::unique_ptr<apache::thrift::transport::THeader>>> header_semifuture_clearSpace(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::ClearSpaceReq& p_req);

#if FOLLY_HAS_COROUTINES
  template <int = 0>
  folly::coro::Task< ::nebula::storage::cpp2::ClearSpaceResp> co_clearSpace(const  ::nebula::storage::cpp2::ClearSpaceReq& p_req) {
    return co_clearSpace<false>(nullptr, p_req);
  }
  template <int = 0>
  folly::coro::Task< ::nebula::storage::cpp2::ClearSpaceResp> co_clearSpace(apache::thrift::RpcOptions& rpcOptions, const  ::nebula::storage::cpp2::ClearSpaceReq& p_req) {
    return co_clearSpace<true>(&rpcOptions, p_req);
  }
 private:
  template <bool hasRpcOptions>
  folly::coro::Task< ::nebula::storage::cpp2::ClearSpaceResp> co_clearSpace(apache::thrift::RpcOptions* rpcOptions, const  ::nebula::storage::cpp2::ClearSpaceReq& p_req) {
    const folly::CancellationToken& cancelToken =
        co_await folly::coro::co_current_cancellation_token;
    const bool cancellable = cancelToken.canBeCancelled();
    apache::thrift::ClientReceiveState returnState;
    apache::thrift::ClientSyncCallback<false> callback(&returnState);
    auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
    auto ctx = clearSpaceCtx(rpcOptions);
    using CancellableCallback = apache::thrift::CancellableRequestClientCallback<false>;
    auto cancellableCallback = cancellable ? CancellableCallback::create(&callback, channel_) : nullptr;
    static const apache::thrift::RpcOptions defaultRpcOptions;
    auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(cancellableCallback ? (apache::thrift::RequestClientCallback*)cancellableCallback.get() : &callback);
    if constexpr (hasRpcOptions) {
      clearSpaceImpl(*rpcOptions, ctx, std::move(wrappedCallback), p_req);
    } else {
      clearSpaceImpl(defaultRpcOptions, ctx, std::move(wrappedCallback), p_req);
    }
    if (cancellable) {
      folly::CancellationCallback cb(cancelToken, [&] { CancellableCallback::cancel(std::move(cancellableCallback)); });
      co_await callback.co_waitUntilDone();
    } else {
      co_await callback.co_waitUntilDone();
    }
    if (returnState.isException()) {
      co_yield folly::coro::co_error(std::move(returnState.exception()));
    }
    returnState.resetProtocolId(protocolId);
    returnState.resetCtx(std::shared_ptr<apache::thrift::ContextStack>(ctx, &ctx->ctx));
    SCOPE_EXIT {
      if (hasRpcOptions && returnState.header() && !returnState.header()->getHeaders().empty()) {
        rpcOptions->setReadHeaders(returnState.header()->releaseHeaders());
      }
    };
     ::nebula::storage::cpp2::ClearSpaceResp _return;
    if (auto ew = recv_wrapped_clearSpace(_return, returnState)) {
      co_yield folly::coro::co_error(std::move(ew));
    }
    co_return _return;
  }
 public:
#endif // FOLLY_HAS_COROUTINES

  virtual void clearSpace(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::nebula::storage::cpp2::ClearSpaceReq& p_req);


  static folly::exception_wrapper recv_wrapped_clearSpace( ::nebula::storage::cpp2::ClearSpaceResp& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_clearSpace( ::nebula::storage::cpp2::ClearSpaceResp& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_clearSpace( ::nebula::storage::cpp2::ClearSpaceResp& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_clearSpace( ::nebula::storage::cpp2::ClearSpaceResp& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  template <typename Protocol_>
  void clearSpaceT(Protocol_* prot, apache::thrift::RpcOptions rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const  ::nebula::storage::cpp2::ClearSpaceReq& p_req);
  std::shared_ptr<::apache::thrift::detail::ac::ClientRequestContext> clearSpaceCtx(apache::thrift::RpcOptions* rpcOptions);
 public:
};

}}} // nebula::storage::cpp2
