/**
 * Autogenerated by Thrift for storage.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/gen/service_h.h>

#include "InternalStorageServiceAsyncClient.h"
#include "storage_types.h"
#include "common_types.h"
#include "meta_types.h"

namespace folly {
  class IOBuf;
  class IOBufQueue;
}
namespace apache { namespace thrift {
  class Cpp2RequestContext;
  class BinaryProtocolReader;
  class CompactProtocolReader;
  namespace transport { class THeader; }
}}

namespace nebula { namespace storage { namespace cpp2 {

class InternalStorageServiceSvAsyncIf {
 public:
  virtual ~InternalStorageServiceSvAsyncIf() {}
  virtual void async_tm_chainAddEdges(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::ExecResponse>> callback, const  ::nebula::storage::cpp2::ChainAddEdgesRequest& p_req) = 0;
  virtual folly::Future< ::nebula::storage::cpp2::ExecResponse> future_chainAddEdges(const  ::nebula::storage::cpp2::ChainAddEdgesRequest& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::storage::cpp2::ExecResponse> semifuture_chainAddEdges(const  ::nebula::storage::cpp2::ChainAddEdgesRequest& p_req) = 0;
  virtual void async_tm_chainUpdateEdge(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::UpdateResponse>> callback, const  ::nebula::storage::cpp2::ChainUpdateEdgeRequest& p_req) = 0;
  virtual folly::Future< ::nebula::storage::cpp2::UpdateResponse> future_chainUpdateEdge(const  ::nebula::storage::cpp2::ChainUpdateEdgeRequest& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::storage::cpp2::UpdateResponse> semifuture_chainUpdateEdge(const  ::nebula::storage::cpp2::ChainUpdateEdgeRequest& p_req) = 0;
  virtual void async_tm_chainDeleteEdges(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::ExecResponse>> callback, const  ::nebula::storage::cpp2::ChainDeleteEdgesRequest& p_req) = 0;
  virtual folly::Future< ::nebula::storage::cpp2::ExecResponse> future_chainDeleteEdges(const  ::nebula::storage::cpp2::ChainDeleteEdgesRequest& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::storage::cpp2::ExecResponse> semifuture_chainDeleteEdges(const  ::nebula::storage::cpp2::ChainDeleteEdgesRequest& p_req) = 0;
};

class InternalStorageServiceAsyncProcessor;

class InternalStorageServiceSvIf : public InternalStorageServiceSvAsyncIf, public apache::thrift::ServerInterface {
 public:
  typedef InternalStorageServiceAsyncProcessor ProcessorType;
  std::unique_ptr<apache::thrift::AsyncProcessor> getProcessor() override;


  virtual void chainAddEdges( ::nebula::storage::cpp2::ExecResponse& /*_return*/, const  ::nebula::storage::cpp2::ChainAddEdgesRequest& /*req*/);
  folly::Future< ::nebula::storage::cpp2::ExecResponse> future_chainAddEdges(const  ::nebula::storage::cpp2::ChainAddEdgesRequest& p_req) override;
  folly::SemiFuture< ::nebula::storage::cpp2::ExecResponse> semifuture_chainAddEdges(const  ::nebula::storage::cpp2::ChainAddEdgesRequest& p_req) override;
  void async_tm_chainAddEdges(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::ExecResponse>> callback, const  ::nebula::storage::cpp2::ChainAddEdgesRequest& p_req) override;
  virtual void chainUpdateEdge( ::nebula::storage::cpp2::UpdateResponse& /*_return*/, const  ::nebula::storage::cpp2::ChainUpdateEdgeRequest& /*req*/);
  folly::Future< ::nebula::storage::cpp2::UpdateResponse> future_chainUpdateEdge(const  ::nebula::storage::cpp2::ChainUpdateEdgeRequest& p_req) override;
  folly::SemiFuture< ::nebula::storage::cpp2::UpdateResponse> semifuture_chainUpdateEdge(const  ::nebula::storage::cpp2::ChainUpdateEdgeRequest& p_req) override;
  void async_tm_chainUpdateEdge(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::UpdateResponse>> callback, const  ::nebula::storage::cpp2::ChainUpdateEdgeRequest& p_req) override;
  virtual void chainDeleteEdges( ::nebula::storage::cpp2::ExecResponse& /*_return*/, const  ::nebula::storage::cpp2::ChainDeleteEdgesRequest& /*req*/);
  folly::Future< ::nebula::storage::cpp2::ExecResponse> future_chainDeleteEdges(const  ::nebula::storage::cpp2::ChainDeleteEdgesRequest& p_req) override;
  folly::SemiFuture< ::nebula::storage::cpp2::ExecResponse> semifuture_chainDeleteEdges(const  ::nebula::storage::cpp2::ChainDeleteEdgesRequest& p_req) override;
  void async_tm_chainDeleteEdges(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::ExecResponse>> callback, const  ::nebula::storage::cpp2::ChainDeleteEdgesRequest& p_req) override;
};

class InternalStorageServiceSvNull : public InternalStorageServiceSvIf {
 public:
  void chainAddEdges( ::nebula::storage::cpp2::ExecResponse& /*_return*/, const  ::nebula::storage::cpp2::ChainAddEdgesRequest& /*req*/) override;
  void chainUpdateEdge( ::nebula::storage::cpp2::UpdateResponse& /*_return*/, const  ::nebula::storage::cpp2::ChainUpdateEdgeRequest& /*req*/) override;
  void chainDeleteEdges( ::nebula::storage::cpp2::ExecResponse& /*_return*/, const  ::nebula::storage::cpp2::ChainDeleteEdgesRequest& /*req*/) override;
};

class InternalStorageServiceAsyncProcessor : public ::apache::thrift::GeneratedAsyncProcessor {
 public:
  const char* getServiceName() override;
  void getServiceMetadata(apache::thrift::metadata::ThriftServiceMetadataResponse& response) override;
  using BaseAsyncProcessor = void;
 protected:
  InternalStorageServiceSvIf* iface_;
 public:
  void processSerializedRequest(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) override;
 protected:
  std::shared_ptr<folly::RequestContext> getBaseContextForRequest() override;
 public:
  using ProcessFunc = GeneratedAsyncProcessor::ProcessFunc<InternalStorageServiceAsyncProcessor>;
  using ProcessMap = GeneratedAsyncProcessor::ProcessMap<ProcessFunc>;
  static const InternalStorageServiceAsyncProcessor::ProcessMap& getBinaryProtocolProcessMap();
  static const InternalStorageServiceAsyncProcessor::ProcessMap& getCompactProtocolProcessMap();
 private:
  static const InternalStorageServiceAsyncProcessor::ProcessMap binaryProcessMap_;
  static const InternalStorageServiceAsyncProcessor::ProcessMap compactProcessMap_;
 private:
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_chainAddEdges(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_chainAddEdges(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_chainAddEdges(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::storage::cpp2::ExecResponse const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_chainAddEdges(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_chainUpdateEdge(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_chainUpdateEdge(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_chainUpdateEdge(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::storage::cpp2::UpdateResponse const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_chainUpdateEdge(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_chainDeleteEdges(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_chainDeleteEdges(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_chainDeleteEdges(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::storage::cpp2::ExecResponse const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_chainDeleteEdges(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
 public:
  InternalStorageServiceAsyncProcessor(InternalStorageServiceSvIf* iface) :
      iface_(iface) {}

  virtual ~InternalStorageServiceAsyncProcessor() {}
};

}}} // nebula::storage::cpp2
