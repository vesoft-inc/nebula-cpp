/**
 * Autogenerated by Thrift for storage.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/gen/service_h.h>

#include "StorageAdminServiceAsyncClient.h"
#include "storage_types.h"
#include "common_types.h"
#include "meta_types.h"

namespace folly {
  class IOBuf;
  class IOBufQueue;
}
namespace apache { namespace thrift {
  class Cpp2RequestContext;
  class BinaryProtocolReader;
  class CompactProtocolReader;
  namespace transport { class THeader; }
}}

namespace nebula { namespace storage { namespace cpp2 {

class StorageAdminServiceSvAsyncIf {
 public:
  virtual ~StorageAdminServiceSvAsyncIf() {}
  virtual void async_tm_transLeader(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::AdminExecResp>> callback, const  ::nebula::storage::cpp2::TransLeaderReq& p_req) = 0;
  virtual folly::Future< ::nebula::storage::cpp2::AdminExecResp> future_transLeader(const  ::nebula::storage::cpp2::TransLeaderReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::storage::cpp2::AdminExecResp> semifuture_transLeader(const  ::nebula::storage::cpp2::TransLeaderReq& p_req) = 0;
  virtual void async_tm_addPart(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::AdminExecResp>> callback, const  ::nebula::storage::cpp2::AddPartReq& p_req) = 0;
  virtual folly::Future< ::nebula::storage::cpp2::AdminExecResp> future_addPart(const  ::nebula::storage::cpp2::AddPartReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::storage::cpp2::AdminExecResp> semifuture_addPart(const  ::nebula::storage::cpp2::AddPartReq& p_req) = 0;
  virtual void async_tm_addLearner(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::AdminExecResp>> callback, const  ::nebula::storage::cpp2::AddLearnerReq& p_req) = 0;
  virtual folly::Future< ::nebula::storage::cpp2::AdminExecResp> future_addLearner(const  ::nebula::storage::cpp2::AddLearnerReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::storage::cpp2::AdminExecResp> semifuture_addLearner(const  ::nebula::storage::cpp2::AddLearnerReq& p_req) = 0;
  virtual void async_tm_removePart(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::AdminExecResp>> callback, const  ::nebula::storage::cpp2::RemovePartReq& p_req) = 0;
  virtual folly::Future< ::nebula::storage::cpp2::AdminExecResp> future_removePart(const  ::nebula::storage::cpp2::RemovePartReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::storage::cpp2::AdminExecResp> semifuture_removePart(const  ::nebula::storage::cpp2::RemovePartReq& p_req) = 0;
  virtual void async_tm_memberChange(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::AdminExecResp>> callback, const  ::nebula::storage::cpp2::MemberChangeReq& p_req) = 0;
  virtual folly::Future< ::nebula::storage::cpp2::AdminExecResp> future_memberChange(const  ::nebula::storage::cpp2::MemberChangeReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::storage::cpp2::AdminExecResp> semifuture_memberChange(const  ::nebula::storage::cpp2::MemberChangeReq& p_req) = 0;
  virtual void async_tm_waitingForCatchUpData(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::AdminExecResp>> callback, const  ::nebula::storage::cpp2::CatchUpDataReq& p_req) = 0;
  virtual folly::Future< ::nebula::storage::cpp2::AdminExecResp> future_waitingForCatchUpData(const  ::nebula::storage::cpp2::CatchUpDataReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::storage::cpp2::AdminExecResp> semifuture_waitingForCatchUpData(const  ::nebula::storage::cpp2::CatchUpDataReq& p_req) = 0;
  virtual void async_tm_createCheckpoint(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::CreateCPResp>> callback, const  ::nebula::storage::cpp2::CreateCPRequest& p_req) = 0;
  virtual folly::Future< ::nebula::storage::cpp2::CreateCPResp> future_createCheckpoint(const  ::nebula::storage::cpp2::CreateCPRequest& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::storage::cpp2::CreateCPResp> semifuture_createCheckpoint(const  ::nebula::storage::cpp2::CreateCPRequest& p_req) = 0;
  virtual void async_tm_dropCheckpoint(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::AdminExecResp>> callback, const  ::nebula::storage::cpp2::DropCPRequest& p_req) = 0;
  virtual folly::Future< ::nebula::storage::cpp2::AdminExecResp> future_dropCheckpoint(const  ::nebula::storage::cpp2::DropCPRequest& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::storage::cpp2::AdminExecResp> semifuture_dropCheckpoint(const  ::nebula::storage::cpp2::DropCPRequest& p_req) = 0;
  virtual void async_tm_blockingWrites(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::AdminExecResp>> callback, const  ::nebula::storage::cpp2::BlockingSignRequest& p_req) = 0;
  virtual folly::Future< ::nebula::storage::cpp2::AdminExecResp> future_blockingWrites(const  ::nebula::storage::cpp2::BlockingSignRequest& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::storage::cpp2::AdminExecResp> semifuture_blockingWrites(const  ::nebula::storage::cpp2::BlockingSignRequest& p_req) = 0;
  virtual void async_tm_rebuildTagIndex(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::AdminExecResp>> callback, const  ::nebula::storage::cpp2::RebuildIndexRequest& p_req) = 0;
  virtual folly::Future< ::nebula::storage::cpp2::AdminExecResp> future_rebuildTagIndex(const  ::nebula::storage::cpp2::RebuildIndexRequest& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::storage::cpp2::AdminExecResp> semifuture_rebuildTagIndex(const  ::nebula::storage::cpp2::RebuildIndexRequest& p_req) = 0;
  virtual void async_tm_rebuildEdgeIndex(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::AdminExecResp>> callback, const  ::nebula::storage::cpp2::RebuildIndexRequest& p_req) = 0;
  virtual folly::Future< ::nebula::storage::cpp2::AdminExecResp> future_rebuildEdgeIndex(const  ::nebula::storage::cpp2::RebuildIndexRequest& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::storage::cpp2::AdminExecResp> semifuture_rebuildEdgeIndex(const  ::nebula::storage::cpp2::RebuildIndexRequest& p_req) = 0;
  virtual void async_tm_getLeaderParts(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::GetLeaderPartsResp>> callback, const  ::nebula::storage::cpp2::GetLeaderReq& p_req) = 0;
  virtual folly::Future< ::nebula::storage::cpp2::GetLeaderPartsResp> future_getLeaderParts(const  ::nebula::storage::cpp2::GetLeaderReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::storage::cpp2::GetLeaderPartsResp> semifuture_getLeaderParts(const  ::nebula::storage::cpp2::GetLeaderReq& p_req) = 0;
  virtual void async_tm_checkPeers(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::AdminExecResp>> callback, const  ::nebula::storage::cpp2::CheckPeersReq& p_req) = 0;
  virtual folly::Future< ::nebula::storage::cpp2::AdminExecResp> future_checkPeers(const  ::nebula::storage::cpp2::CheckPeersReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::storage::cpp2::AdminExecResp> semifuture_checkPeers(const  ::nebula::storage::cpp2::CheckPeersReq& p_req) = 0;
  virtual void async_tm_addAdminTask(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::AdminExecResp>> callback, const  ::nebula::storage::cpp2::AddAdminTaskRequest& p_req) = 0;
  virtual folly::Future< ::nebula::storage::cpp2::AdminExecResp> future_addAdminTask(const  ::nebula::storage::cpp2::AddAdminTaskRequest& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::storage::cpp2::AdminExecResp> semifuture_addAdminTask(const  ::nebula::storage::cpp2::AddAdminTaskRequest& p_req) = 0;
  virtual void async_tm_stopAdminTask(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::AdminExecResp>> callback, const  ::nebula::storage::cpp2::StopAdminTaskRequest& p_req) = 0;
  virtual folly::Future< ::nebula::storage::cpp2::AdminExecResp> future_stopAdminTask(const  ::nebula::storage::cpp2::StopAdminTaskRequest& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::storage::cpp2::AdminExecResp> semifuture_stopAdminTask(const  ::nebula::storage::cpp2::StopAdminTaskRequest& p_req) = 0;
  virtual void async_tm_listClusterInfo(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::ListClusterInfoResp>> callback, const  ::nebula::storage::cpp2::ListClusterInfoReq& p_req) = 0;
  virtual folly::Future< ::nebula::storage::cpp2::ListClusterInfoResp> future_listClusterInfo(const  ::nebula::storage::cpp2::ListClusterInfoReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::storage::cpp2::ListClusterInfoResp> semifuture_listClusterInfo(const  ::nebula::storage::cpp2::ListClusterInfoReq& p_req) = 0;
};

class StorageAdminServiceAsyncProcessor;

class StorageAdminServiceSvIf : public StorageAdminServiceSvAsyncIf, public apache::thrift::ServerInterface {
 public:
  typedef StorageAdminServiceAsyncProcessor ProcessorType;
  std::unique_ptr<apache::thrift::AsyncProcessor> getProcessor() override;


  virtual void transLeader( ::nebula::storage::cpp2::AdminExecResp& /*_return*/, const  ::nebula::storage::cpp2::TransLeaderReq& /*req*/);
  folly::Future< ::nebula::storage::cpp2::AdminExecResp> future_transLeader(const  ::nebula::storage::cpp2::TransLeaderReq& p_req) override;
  folly::SemiFuture< ::nebula::storage::cpp2::AdminExecResp> semifuture_transLeader(const  ::nebula::storage::cpp2::TransLeaderReq& p_req) override;
  void async_tm_transLeader(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::AdminExecResp>> callback, const  ::nebula::storage::cpp2::TransLeaderReq& p_req) override;
  virtual void addPart( ::nebula::storage::cpp2::AdminExecResp& /*_return*/, const  ::nebula::storage::cpp2::AddPartReq& /*req*/);
  folly::Future< ::nebula::storage::cpp2::AdminExecResp> future_addPart(const  ::nebula::storage::cpp2::AddPartReq& p_req) override;
  folly::SemiFuture< ::nebula::storage::cpp2::AdminExecResp> semifuture_addPart(const  ::nebula::storage::cpp2::AddPartReq& p_req) override;
  void async_tm_addPart(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::AdminExecResp>> callback, const  ::nebula::storage::cpp2::AddPartReq& p_req) override;
  virtual void addLearner( ::nebula::storage::cpp2::AdminExecResp& /*_return*/, const  ::nebula::storage::cpp2::AddLearnerReq& /*req*/);
  folly::Future< ::nebula::storage::cpp2::AdminExecResp> future_addLearner(const  ::nebula::storage::cpp2::AddLearnerReq& p_req) override;
  folly::SemiFuture< ::nebula::storage::cpp2::AdminExecResp> semifuture_addLearner(const  ::nebula::storage::cpp2::AddLearnerReq& p_req) override;
  void async_tm_addLearner(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::AdminExecResp>> callback, const  ::nebula::storage::cpp2::AddLearnerReq& p_req) override;
  virtual void removePart( ::nebula::storage::cpp2::AdminExecResp& /*_return*/, const  ::nebula::storage::cpp2::RemovePartReq& /*req*/);
  folly::Future< ::nebula::storage::cpp2::AdminExecResp> future_removePart(const  ::nebula::storage::cpp2::RemovePartReq& p_req) override;
  folly::SemiFuture< ::nebula::storage::cpp2::AdminExecResp> semifuture_removePart(const  ::nebula::storage::cpp2::RemovePartReq& p_req) override;
  void async_tm_removePart(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::AdminExecResp>> callback, const  ::nebula::storage::cpp2::RemovePartReq& p_req) override;
  virtual void memberChange( ::nebula::storage::cpp2::AdminExecResp& /*_return*/, const  ::nebula::storage::cpp2::MemberChangeReq& /*req*/);
  folly::Future< ::nebula::storage::cpp2::AdminExecResp> future_memberChange(const  ::nebula::storage::cpp2::MemberChangeReq& p_req) override;
  folly::SemiFuture< ::nebula::storage::cpp2::AdminExecResp> semifuture_memberChange(const  ::nebula::storage::cpp2::MemberChangeReq& p_req) override;
  void async_tm_memberChange(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::AdminExecResp>> callback, const  ::nebula::storage::cpp2::MemberChangeReq& p_req) override;
  virtual void waitingForCatchUpData( ::nebula::storage::cpp2::AdminExecResp& /*_return*/, const  ::nebula::storage::cpp2::CatchUpDataReq& /*req*/);
  folly::Future< ::nebula::storage::cpp2::AdminExecResp> future_waitingForCatchUpData(const  ::nebula::storage::cpp2::CatchUpDataReq& p_req) override;
  folly::SemiFuture< ::nebula::storage::cpp2::AdminExecResp> semifuture_waitingForCatchUpData(const  ::nebula::storage::cpp2::CatchUpDataReq& p_req) override;
  void async_tm_waitingForCatchUpData(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::AdminExecResp>> callback, const  ::nebula::storage::cpp2::CatchUpDataReq& p_req) override;
  virtual void createCheckpoint( ::nebula::storage::cpp2::CreateCPResp& /*_return*/, const  ::nebula::storage::cpp2::CreateCPRequest& /*req*/);
  folly::Future< ::nebula::storage::cpp2::CreateCPResp> future_createCheckpoint(const  ::nebula::storage::cpp2::CreateCPRequest& p_req) override;
  folly::SemiFuture< ::nebula::storage::cpp2::CreateCPResp> semifuture_createCheckpoint(const  ::nebula::storage::cpp2::CreateCPRequest& p_req) override;
  void async_tm_createCheckpoint(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::CreateCPResp>> callback, const  ::nebula::storage::cpp2::CreateCPRequest& p_req) override;
  virtual void dropCheckpoint( ::nebula::storage::cpp2::AdminExecResp& /*_return*/, const  ::nebula::storage::cpp2::DropCPRequest& /*req*/);
  folly::Future< ::nebula::storage::cpp2::AdminExecResp> future_dropCheckpoint(const  ::nebula::storage::cpp2::DropCPRequest& p_req) override;
  folly::SemiFuture< ::nebula::storage::cpp2::AdminExecResp> semifuture_dropCheckpoint(const  ::nebula::storage::cpp2::DropCPRequest& p_req) override;
  void async_tm_dropCheckpoint(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::AdminExecResp>> callback, const  ::nebula::storage::cpp2::DropCPRequest& p_req) override;
  virtual void blockingWrites( ::nebula::storage::cpp2::AdminExecResp& /*_return*/, const  ::nebula::storage::cpp2::BlockingSignRequest& /*req*/);
  folly::Future< ::nebula::storage::cpp2::AdminExecResp> future_blockingWrites(const  ::nebula::storage::cpp2::BlockingSignRequest& p_req) override;
  folly::SemiFuture< ::nebula::storage::cpp2::AdminExecResp> semifuture_blockingWrites(const  ::nebula::storage::cpp2::BlockingSignRequest& p_req) override;
  void async_tm_blockingWrites(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::AdminExecResp>> callback, const  ::nebula::storage::cpp2::BlockingSignRequest& p_req) override;
  virtual void rebuildTagIndex( ::nebula::storage::cpp2::AdminExecResp& /*_return*/, const  ::nebula::storage::cpp2::RebuildIndexRequest& /*req*/);
  folly::Future< ::nebula::storage::cpp2::AdminExecResp> future_rebuildTagIndex(const  ::nebula::storage::cpp2::RebuildIndexRequest& p_req) override;
  folly::SemiFuture< ::nebula::storage::cpp2::AdminExecResp> semifuture_rebuildTagIndex(const  ::nebula::storage::cpp2::RebuildIndexRequest& p_req) override;
  void async_tm_rebuildTagIndex(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::AdminExecResp>> callback, const  ::nebula::storage::cpp2::RebuildIndexRequest& p_req) override;
  virtual void rebuildEdgeIndex( ::nebula::storage::cpp2::AdminExecResp& /*_return*/, const  ::nebula::storage::cpp2::RebuildIndexRequest& /*req*/);
  folly::Future< ::nebula::storage::cpp2::AdminExecResp> future_rebuildEdgeIndex(const  ::nebula::storage::cpp2::RebuildIndexRequest& p_req) override;
  folly::SemiFuture< ::nebula::storage::cpp2::AdminExecResp> semifuture_rebuildEdgeIndex(const  ::nebula::storage::cpp2::RebuildIndexRequest& p_req) override;
  void async_tm_rebuildEdgeIndex(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::AdminExecResp>> callback, const  ::nebula::storage::cpp2::RebuildIndexRequest& p_req) override;
  virtual void getLeaderParts( ::nebula::storage::cpp2::GetLeaderPartsResp& /*_return*/, const  ::nebula::storage::cpp2::GetLeaderReq& /*req*/);
  folly::Future< ::nebula::storage::cpp2::GetLeaderPartsResp> future_getLeaderParts(const  ::nebula::storage::cpp2::GetLeaderReq& p_req) override;
  folly::SemiFuture< ::nebula::storage::cpp2::GetLeaderPartsResp> semifuture_getLeaderParts(const  ::nebula::storage::cpp2::GetLeaderReq& p_req) override;
  void async_tm_getLeaderParts(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::GetLeaderPartsResp>> callback, const  ::nebula::storage::cpp2::GetLeaderReq& p_req) override;
  virtual void checkPeers( ::nebula::storage::cpp2::AdminExecResp& /*_return*/, const  ::nebula::storage::cpp2::CheckPeersReq& /*req*/);
  folly::Future< ::nebula::storage::cpp2::AdminExecResp> future_checkPeers(const  ::nebula::storage::cpp2::CheckPeersReq& p_req) override;
  folly::SemiFuture< ::nebula::storage::cpp2::AdminExecResp> semifuture_checkPeers(const  ::nebula::storage::cpp2::CheckPeersReq& p_req) override;
  void async_tm_checkPeers(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::AdminExecResp>> callback, const  ::nebula::storage::cpp2::CheckPeersReq& p_req) override;
  virtual void addAdminTask( ::nebula::storage::cpp2::AdminExecResp& /*_return*/, const  ::nebula::storage::cpp2::AddAdminTaskRequest& /*req*/);
  folly::Future< ::nebula::storage::cpp2::AdminExecResp> future_addAdminTask(const  ::nebula::storage::cpp2::AddAdminTaskRequest& p_req) override;
  folly::SemiFuture< ::nebula::storage::cpp2::AdminExecResp> semifuture_addAdminTask(const  ::nebula::storage::cpp2::AddAdminTaskRequest& p_req) override;
  void async_tm_addAdminTask(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::AdminExecResp>> callback, const  ::nebula::storage::cpp2::AddAdminTaskRequest& p_req) override;
  virtual void stopAdminTask( ::nebula::storage::cpp2::AdminExecResp& /*_return*/, const  ::nebula::storage::cpp2::StopAdminTaskRequest& /*req*/);
  folly::Future< ::nebula::storage::cpp2::AdminExecResp> future_stopAdminTask(const  ::nebula::storage::cpp2::StopAdminTaskRequest& p_req) override;
  folly::SemiFuture< ::nebula::storage::cpp2::AdminExecResp> semifuture_stopAdminTask(const  ::nebula::storage::cpp2::StopAdminTaskRequest& p_req) override;
  void async_tm_stopAdminTask(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::AdminExecResp>> callback, const  ::nebula::storage::cpp2::StopAdminTaskRequest& p_req) override;
  virtual void listClusterInfo( ::nebula::storage::cpp2::ListClusterInfoResp& /*_return*/, const  ::nebula::storage::cpp2::ListClusterInfoReq& /*req*/);
  folly::Future< ::nebula::storage::cpp2::ListClusterInfoResp> future_listClusterInfo(const  ::nebula::storage::cpp2::ListClusterInfoReq& p_req) override;
  folly::SemiFuture< ::nebula::storage::cpp2::ListClusterInfoResp> semifuture_listClusterInfo(const  ::nebula::storage::cpp2::ListClusterInfoReq& p_req) override;
  void async_tm_listClusterInfo(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::storage::cpp2::ListClusterInfoResp>> callback, const  ::nebula::storage::cpp2::ListClusterInfoReq& p_req) override;
};

class StorageAdminServiceSvNull : public StorageAdminServiceSvIf {
 public:
  void transLeader( ::nebula::storage::cpp2::AdminExecResp& /*_return*/, const  ::nebula::storage::cpp2::TransLeaderReq& /*req*/) override;
  void addPart( ::nebula::storage::cpp2::AdminExecResp& /*_return*/, const  ::nebula::storage::cpp2::AddPartReq& /*req*/) override;
  void addLearner( ::nebula::storage::cpp2::AdminExecResp& /*_return*/, const  ::nebula::storage::cpp2::AddLearnerReq& /*req*/) override;
  void removePart( ::nebula::storage::cpp2::AdminExecResp& /*_return*/, const  ::nebula::storage::cpp2::RemovePartReq& /*req*/) override;
  void memberChange( ::nebula::storage::cpp2::AdminExecResp& /*_return*/, const  ::nebula::storage::cpp2::MemberChangeReq& /*req*/) override;
  void waitingForCatchUpData( ::nebula::storage::cpp2::AdminExecResp& /*_return*/, const  ::nebula::storage::cpp2::CatchUpDataReq& /*req*/) override;
  void createCheckpoint( ::nebula::storage::cpp2::CreateCPResp& /*_return*/, const  ::nebula::storage::cpp2::CreateCPRequest& /*req*/) override;
  void dropCheckpoint( ::nebula::storage::cpp2::AdminExecResp& /*_return*/, const  ::nebula::storage::cpp2::DropCPRequest& /*req*/) override;
  void blockingWrites( ::nebula::storage::cpp2::AdminExecResp& /*_return*/, const  ::nebula::storage::cpp2::BlockingSignRequest& /*req*/) override;
  void rebuildTagIndex( ::nebula::storage::cpp2::AdminExecResp& /*_return*/, const  ::nebula::storage::cpp2::RebuildIndexRequest& /*req*/) override;
  void rebuildEdgeIndex( ::nebula::storage::cpp2::AdminExecResp& /*_return*/, const  ::nebula::storage::cpp2::RebuildIndexRequest& /*req*/) override;
  void getLeaderParts( ::nebula::storage::cpp2::GetLeaderPartsResp& /*_return*/, const  ::nebula::storage::cpp2::GetLeaderReq& /*req*/) override;
  void checkPeers( ::nebula::storage::cpp2::AdminExecResp& /*_return*/, const  ::nebula::storage::cpp2::CheckPeersReq& /*req*/) override;
  void addAdminTask( ::nebula::storage::cpp2::AdminExecResp& /*_return*/, const  ::nebula::storage::cpp2::AddAdminTaskRequest& /*req*/) override;
  void stopAdminTask( ::nebula::storage::cpp2::AdminExecResp& /*_return*/, const  ::nebula::storage::cpp2::StopAdminTaskRequest& /*req*/) override;
  void listClusterInfo( ::nebula::storage::cpp2::ListClusterInfoResp& /*_return*/, const  ::nebula::storage::cpp2::ListClusterInfoReq& /*req*/) override;
};

class StorageAdminServiceAsyncProcessor : public ::apache::thrift::GeneratedAsyncProcessor {
 public:
  const char* getServiceName() override;
  void getServiceMetadata(apache::thrift::metadata::ThriftServiceMetadataResponse& response) override;
  using BaseAsyncProcessor = void;
 protected:
  StorageAdminServiceSvIf* iface_;
 public:
  void processSerializedRequest(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) override;
 protected:
  std::shared_ptr<folly::RequestContext> getBaseContextForRequest() override;
 public:
  using ProcessFunc = GeneratedAsyncProcessor::ProcessFunc<StorageAdminServiceAsyncProcessor>;
  using ProcessMap = GeneratedAsyncProcessor::ProcessMap<ProcessFunc>;
  static const StorageAdminServiceAsyncProcessor::ProcessMap& getBinaryProtocolProcessMap();
  static const StorageAdminServiceAsyncProcessor::ProcessMap& getCompactProtocolProcessMap();
 private:
  static const StorageAdminServiceAsyncProcessor::ProcessMap binaryProcessMap_;
  static const StorageAdminServiceAsyncProcessor::ProcessMap compactProcessMap_;
 private:
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_transLeader(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_transLeader(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_transLeader(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::storage::cpp2::AdminExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_transLeader(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_addPart(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_addPart(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_addPart(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::storage::cpp2::AdminExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_addPart(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_addLearner(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_addLearner(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_addLearner(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::storage::cpp2::AdminExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_addLearner(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_removePart(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_removePart(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_removePart(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::storage::cpp2::AdminExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_removePart(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_memberChange(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_memberChange(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_memberChange(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::storage::cpp2::AdminExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_memberChange(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_waitingForCatchUpData(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_waitingForCatchUpData(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_waitingForCatchUpData(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::storage::cpp2::AdminExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_waitingForCatchUpData(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_createCheckpoint(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_createCheckpoint(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_createCheckpoint(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::storage::cpp2::CreateCPResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_createCheckpoint(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_dropCheckpoint(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_dropCheckpoint(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_dropCheckpoint(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::storage::cpp2::AdminExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_dropCheckpoint(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_blockingWrites(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_blockingWrites(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_blockingWrites(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::storage::cpp2::AdminExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_blockingWrites(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_rebuildTagIndex(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_rebuildTagIndex(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_rebuildTagIndex(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::storage::cpp2::AdminExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_rebuildTagIndex(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_rebuildEdgeIndex(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_rebuildEdgeIndex(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_rebuildEdgeIndex(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::storage::cpp2::AdminExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_rebuildEdgeIndex(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_getLeaderParts(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_getLeaderParts(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_getLeaderParts(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::storage::cpp2::GetLeaderPartsResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_getLeaderParts(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_checkPeers(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_checkPeers(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_checkPeers(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::storage::cpp2::AdminExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_checkPeers(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_addAdminTask(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_addAdminTask(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_addAdminTask(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::storage::cpp2::AdminExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_addAdminTask(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_stopAdminTask(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_stopAdminTask(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_stopAdminTask(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::storage::cpp2::AdminExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_stopAdminTask(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_listClusterInfo(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_listClusterInfo(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_listClusterInfo(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::storage::cpp2::ListClusterInfoResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_listClusterInfo(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
 public:
  StorageAdminServiceAsyncProcessor(StorageAdminServiceSvIf* iface) :
      iface_(iface) {}

  virtual ~StorageAdminServiceAsyncProcessor() {}
};

}}} // nebula::storage::cpp2
