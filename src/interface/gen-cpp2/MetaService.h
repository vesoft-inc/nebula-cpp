/**
 * Autogenerated by Thrift for meta.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/gen/service_h.h>

#include "MetaServiceAsyncClient.h"
#include "meta_types.h"
#include "common_types.h"

namespace folly {
  class IOBuf;
  class IOBufQueue;
}
namespace apache { namespace thrift {
  class Cpp2RequestContext;
  class BinaryProtocolReader;
  class CompactProtocolReader;
  namespace transport { class THeader; }
}}

namespace nebula { namespace meta { namespace cpp2 {

class MetaServiceSvAsyncIf {
 public:
  virtual ~MetaServiceSvAsyncIf() {}
  virtual void async_tm_createSpace(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::CreateSpaceReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_createSpace(const  ::nebula::meta::cpp2::CreateSpaceReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_createSpace(const  ::nebula::meta::cpp2::CreateSpaceReq& p_req) = 0;
  virtual void async_tm_dropSpace(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::DropSpaceReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_dropSpace(const  ::nebula::meta::cpp2::DropSpaceReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_dropSpace(const  ::nebula::meta::cpp2::DropSpaceReq& p_req) = 0;
  virtual void async_tm_getSpace(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::GetSpaceResp>> callback, const  ::nebula::meta::cpp2::GetSpaceReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::GetSpaceResp> future_getSpace(const  ::nebula::meta::cpp2::GetSpaceReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::GetSpaceResp> semifuture_getSpace(const  ::nebula::meta::cpp2::GetSpaceReq& p_req) = 0;
  virtual void async_tm_listSpaces(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListSpacesResp>> callback, const  ::nebula::meta::cpp2::ListSpacesReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ListSpacesResp> future_listSpaces(const  ::nebula::meta::cpp2::ListSpacesReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ListSpacesResp> semifuture_listSpaces(const  ::nebula::meta::cpp2::ListSpacesReq& p_req) = 0;
  virtual void async_tm_createSpaceAs(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::CreateSpaceAsReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_createSpaceAs(const  ::nebula::meta::cpp2::CreateSpaceAsReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_createSpaceAs(const  ::nebula::meta::cpp2::CreateSpaceAsReq& p_req) = 0;
  virtual void async_tm_createTag(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::CreateTagReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_createTag(const  ::nebula::meta::cpp2::CreateTagReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_createTag(const  ::nebula::meta::cpp2::CreateTagReq& p_req) = 0;
  virtual void async_tm_alterTag(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::AlterTagReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_alterTag(const  ::nebula::meta::cpp2::AlterTagReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_alterTag(const  ::nebula::meta::cpp2::AlterTagReq& p_req) = 0;
  virtual void async_tm_dropTag(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::DropTagReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_dropTag(const  ::nebula::meta::cpp2::DropTagReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_dropTag(const  ::nebula::meta::cpp2::DropTagReq& p_req) = 0;
  virtual void async_tm_getTag(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::GetTagResp>> callback, const  ::nebula::meta::cpp2::GetTagReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::GetTagResp> future_getTag(const  ::nebula::meta::cpp2::GetTagReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::GetTagResp> semifuture_getTag(const  ::nebula::meta::cpp2::GetTagReq& p_req) = 0;
  virtual void async_tm_listTags(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListTagsResp>> callback, const  ::nebula::meta::cpp2::ListTagsReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ListTagsResp> future_listTags(const  ::nebula::meta::cpp2::ListTagsReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ListTagsResp> semifuture_listTags(const  ::nebula::meta::cpp2::ListTagsReq& p_req) = 0;
  virtual void async_tm_createEdge(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::CreateEdgeReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_createEdge(const  ::nebula::meta::cpp2::CreateEdgeReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_createEdge(const  ::nebula::meta::cpp2::CreateEdgeReq& p_req) = 0;
  virtual void async_tm_alterEdge(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::AlterEdgeReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_alterEdge(const  ::nebula::meta::cpp2::AlterEdgeReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_alterEdge(const  ::nebula::meta::cpp2::AlterEdgeReq& p_req) = 0;
  virtual void async_tm_dropEdge(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::DropEdgeReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_dropEdge(const  ::nebula::meta::cpp2::DropEdgeReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_dropEdge(const  ::nebula::meta::cpp2::DropEdgeReq& p_req) = 0;
  virtual void async_tm_getEdge(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::GetEdgeResp>> callback, const  ::nebula::meta::cpp2::GetEdgeReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::GetEdgeResp> future_getEdge(const  ::nebula::meta::cpp2::GetEdgeReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::GetEdgeResp> semifuture_getEdge(const  ::nebula::meta::cpp2::GetEdgeReq& p_req) = 0;
  virtual void async_tm_listEdges(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListEdgesResp>> callback, const  ::nebula::meta::cpp2::ListEdgesReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ListEdgesResp> future_listEdges(const  ::nebula::meta::cpp2::ListEdgesReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ListEdgesResp> semifuture_listEdges(const  ::nebula::meta::cpp2::ListEdgesReq& p_req) = 0;
  virtual void async_tm_listHosts(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListHostsResp>> callback, const  ::nebula::meta::cpp2::ListHostsReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ListHostsResp> future_listHosts(const  ::nebula::meta::cpp2::ListHostsReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ListHostsResp> semifuture_listHosts(const  ::nebula::meta::cpp2::ListHostsReq& p_req) = 0;
  virtual void async_tm_getPartsAlloc(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::GetPartsAllocResp>> callback, const  ::nebula::meta::cpp2::GetPartsAllocReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::GetPartsAllocResp> future_getPartsAlloc(const  ::nebula::meta::cpp2::GetPartsAllocReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::GetPartsAllocResp> semifuture_getPartsAlloc(const  ::nebula::meta::cpp2::GetPartsAllocReq& p_req) = 0;
  virtual void async_tm_listParts(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListPartsResp>> callback, const  ::nebula::meta::cpp2::ListPartsReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ListPartsResp> future_listParts(const  ::nebula::meta::cpp2::ListPartsReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ListPartsResp> semifuture_listParts(const  ::nebula::meta::cpp2::ListPartsReq& p_req) = 0;
  virtual void async_tm_multiPut(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::MultiPutReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_multiPut(const  ::nebula::meta::cpp2::MultiPutReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_multiPut(const  ::nebula::meta::cpp2::MultiPutReq& p_req) = 0;
  virtual void async_tm_get(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::GetResp>> callback, const  ::nebula::meta::cpp2::GetReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::GetResp> future_get(const  ::nebula::meta::cpp2::GetReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::GetResp> semifuture_get(const  ::nebula::meta::cpp2::GetReq& p_req) = 0;
  virtual void async_tm_multiGet(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::MultiGetResp>> callback, const  ::nebula::meta::cpp2::MultiGetReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::MultiGetResp> future_multiGet(const  ::nebula::meta::cpp2::MultiGetReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::MultiGetResp> semifuture_multiGet(const  ::nebula::meta::cpp2::MultiGetReq& p_req) = 0;
  virtual void async_tm_remove(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::RemoveReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_remove(const  ::nebula::meta::cpp2::RemoveReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_remove(const  ::nebula::meta::cpp2::RemoveReq& p_req) = 0;
  virtual void async_tm_removeRange(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::RemoveRangeReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_removeRange(const  ::nebula::meta::cpp2::RemoveRangeReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_removeRange(const  ::nebula::meta::cpp2::RemoveRangeReq& p_req) = 0;
  virtual void async_tm_scan(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ScanResp>> callback, const  ::nebula::meta::cpp2::ScanReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ScanResp> future_scan(const  ::nebula::meta::cpp2::ScanReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ScanResp> semifuture_scan(const  ::nebula::meta::cpp2::ScanReq& p_req) = 0;
  virtual void async_tm_createTagIndex(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::CreateTagIndexReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_createTagIndex(const  ::nebula::meta::cpp2::CreateTagIndexReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_createTagIndex(const  ::nebula::meta::cpp2::CreateTagIndexReq& p_req) = 0;
  virtual void async_tm_dropTagIndex(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::DropTagIndexReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_dropTagIndex(const  ::nebula::meta::cpp2::DropTagIndexReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_dropTagIndex(const  ::nebula::meta::cpp2::DropTagIndexReq& p_req) = 0;
  virtual void async_tm_getTagIndex(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::GetTagIndexResp>> callback, const  ::nebula::meta::cpp2::GetTagIndexReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::GetTagIndexResp> future_getTagIndex(const  ::nebula::meta::cpp2::GetTagIndexReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::GetTagIndexResp> semifuture_getTagIndex(const  ::nebula::meta::cpp2::GetTagIndexReq& p_req) = 0;
  virtual void async_tm_listTagIndexes(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListTagIndexesResp>> callback, const  ::nebula::meta::cpp2::ListTagIndexesReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ListTagIndexesResp> future_listTagIndexes(const  ::nebula::meta::cpp2::ListTagIndexesReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ListTagIndexesResp> semifuture_listTagIndexes(const  ::nebula::meta::cpp2::ListTagIndexesReq& p_req) = 0;
  virtual void async_tm_rebuildTagIndex(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::RebuildIndexReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_rebuildTagIndex(const  ::nebula::meta::cpp2::RebuildIndexReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_rebuildTagIndex(const  ::nebula::meta::cpp2::RebuildIndexReq& p_req) = 0;
  virtual void async_tm_listTagIndexStatus(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListIndexStatusResp>> callback, const  ::nebula::meta::cpp2::ListIndexStatusReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ListIndexStatusResp> future_listTagIndexStatus(const  ::nebula::meta::cpp2::ListIndexStatusReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ListIndexStatusResp> semifuture_listTagIndexStatus(const  ::nebula::meta::cpp2::ListIndexStatusReq& p_req) = 0;
  virtual void async_tm_createEdgeIndex(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::CreateEdgeIndexReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_createEdgeIndex(const  ::nebula::meta::cpp2::CreateEdgeIndexReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_createEdgeIndex(const  ::nebula::meta::cpp2::CreateEdgeIndexReq& p_req) = 0;
  virtual void async_tm_dropEdgeIndex(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::DropEdgeIndexReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_dropEdgeIndex(const  ::nebula::meta::cpp2::DropEdgeIndexReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_dropEdgeIndex(const  ::nebula::meta::cpp2::DropEdgeIndexReq& p_req) = 0;
  virtual void async_tm_getEdgeIndex(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::GetEdgeIndexResp>> callback, const  ::nebula::meta::cpp2::GetEdgeIndexReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::GetEdgeIndexResp> future_getEdgeIndex(const  ::nebula::meta::cpp2::GetEdgeIndexReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::GetEdgeIndexResp> semifuture_getEdgeIndex(const  ::nebula::meta::cpp2::GetEdgeIndexReq& p_req) = 0;
  virtual void async_tm_listEdgeIndexes(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListEdgeIndexesResp>> callback, const  ::nebula::meta::cpp2::ListEdgeIndexesReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ListEdgeIndexesResp> future_listEdgeIndexes(const  ::nebula::meta::cpp2::ListEdgeIndexesReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ListEdgeIndexesResp> semifuture_listEdgeIndexes(const  ::nebula::meta::cpp2::ListEdgeIndexesReq& p_req) = 0;
  virtual void async_tm_rebuildEdgeIndex(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::RebuildIndexReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_rebuildEdgeIndex(const  ::nebula::meta::cpp2::RebuildIndexReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_rebuildEdgeIndex(const  ::nebula::meta::cpp2::RebuildIndexReq& p_req) = 0;
  virtual void async_tm_listEdgeIndexStatus(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListIndexStatusResp>> callback, const  ::nebula::meta::cpp2::ListIndexStatusReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ListIndexStatusResp> future_listEdgeIndexStatus(const  ::nebula::meta::cpp2::ListIndexStatusReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ListIndexStatusResp> semifuture_listEdgeIndexStatus(const  ::nebula::meta::cpp2::ListIndexStatusReq& p_req) = 0;
  virtual void async_tm_createUser(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::CreateUserReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_createUser(const  ::nebula::meta::cpp2::CreateUserReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_createUser(const  ::nebula::meta::cpp2::CreateUserReq& p_req) = 0;
  virtual void async_tm_dropUser(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::DropUserReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_dropUser(const  ::nebula::meta::cpp2::DropUserReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_dropUser(const  ::nebula::meta::cpp2::DropUserReq& p_req) = 0;
  virtual void async_tm_alterUser(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::AlterUserReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_alterUser(const  ::nebula::meta::cpp2::AlterUserReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_alterUser(const  ::nebula::meta::cpp2::AlterUserReq& p_req) = 0;
  virtual void async_tm_grantRole(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::GrantRoleReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_grantRole(const  ::nebula::meta::cpp2::GrantRoleReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_grantRole(const  ::nebula::meta::cpp2::GrantRoleReq& p_req) = 0;
  virtual void async_tm_revokeRole(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::RevokeRoleReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_revokeRole(const  ::nebula::meta::cpp2::RevokeRoleReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_revokeRole(const  ::nebula::meta::cpp2::RevokeRoleReq& p_req) = 0;
  virtual void async_tm_listUsers(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListUsersResp>> callback, const  ::nebula::meta::cpp2::ListUsersReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ListUsersResp> future_listUsers(const  ::nebula::meta::cpp2::ListUsersReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ListUsersResp> semifuture_listUsers(const  ::nebula::meta::cpp2::ListUsersReq& p_req) = 0;
  virtual void async_tm_listRoles(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListRolesResp>> callback, const  ::nebula::meta::cpp2::ListRolesReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ListRolesResp> future_listRoles(const  ::nebula::meta::cpp2::ListRolesReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ListRolesResp> semifuture_listRoles(const  ::nebula::meta::cpp2::ListRolesReq& p_req) = 0;
  virtual void async_tm_getUserRoles(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListRolesResp>> callback, const  ::nebula::meta::cpp2::GetUserRolesReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ListRolesResp> future_getUserRoles(const  ::nebula::meta::cpp2::GetUserRolesReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ListRolesResp> semifuture_getUserRoles(const  ::nebula::meta::cpp2::GetUserRolesReq& p_req) = 0;
  virtual void async_tm_changePassword(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::ChangePasswordReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_changePassword(const  ::nebula::meta::cpp2::ChangePasswordReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_changePassword(const  ::nebula::meta::cpp2::ChangePasswordReq& p_req) = 0;
  virtual void async_tm_heartBeat(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::HBResp>> callback, const  ::nebula::meta::cpp2::HBReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::HBResp> future_heartBeat(const  ::nebula::meta::cpp2::HBReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::HBResp> semifuture_heartBeat(const  ::nebula::meta::cpp2::HBReq& p_req) = 0;
  virtual void async_tm_balance(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::BalanceResp>> callback, const  ::nebula::meta::cpp2::BalanceReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::BalanceResp> future_balance(const  ::nebula::meta::cpp2::BalanceReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::BalanceResp> semifuture_balance(const  ::nebula::meta::cpp2::BalanceReq& p_req) = 0;
  virtual void async_tm_leaderBalance(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::LeaderBalanceReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_leaderBalance(const  ::nebula::meta::cpp2::LeaderBalanceReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_leaderBalance(const  ::nebula::meta::cpp2::LeaderBalanceReq& p_req) = 0;
  virtual void async_tm_regConfig(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::RegConfigReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_regConfig(const  ::nebula::meta::cpp2::RegConfigReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_regConfig(const  ::nebula::meta::cpp2::RegConfigReq& p_req) = 0;
  virtual void async_tm_getConfig(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::GetConfigResp>> callback, const  ::nebula::meta::cpp2::GetConfigReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::GetConfigResp> future_getConfig(const  ::nebula::meta::cpp2::GetConfigReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::GetConfigResp> semifuture_getConfig(const  ::nebula::meta::cpp2::GetConfigReq& p_req) = 0;
  virtual void async_tm_setConfig(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::SetConfigReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_setConfig(const  ::nebula::meta::cpp2::SetConfigReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_setConfig(const  ::nebula::meta::cpp2::SetConfigReq& p_req) = 0;
  virtual void async_tm_listConfigs(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListConfigsResp>> callback, const  ::nebula::meta::cpp2::ListConfigsReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ListConfigsResp> future_listConfigs(const  ::nebula::meta::cpp2::ListConfigsReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ListConfigsResp> semifuture_listConfigs(const  ::nebula::meta::cpp2::ListConfigsReq& p_req) = 0;
  virtual void async_tm_createSnapshot(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::CreateSnapshotReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_createSnapshot(const  ::nebula::meta::cpp2::CreateSnapshotReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_createSnapshot(const  ::nebula::meta::cpp2::CreateSnapshotReq& p_req) = 0;
  virtual void async_tm_dropSnapshot(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::DropSnapshotReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_dropSnapshot(const  ::nebula::meta::cpp2::DropSnapshotReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_dropSnapshot(const  ::nebula::meta::cpp2::DropSnapshotReq& p_req) = 0;
  virtual void async_tm_listSnapshots(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListSnapshotsResp>> callback, const  ::nebula::meta::cpp2::ListSnapshotsReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ListSnapshotsResp> future_listSnapshots(const  ::nebula::meta::cpp2::ListSnapshotsReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ListSnapshotsResp> semifuture_listSnapshots(const  ::nebula::meta::cpp2::ListSnapshotsReq& p_req) = 0;
  virtual void async_tm_runAdminJob(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::AdminJobResp>> callback, const  ::nebula::meta::cpp2::AdminJobReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::AdminJobResp> future_runAdminJob(const  ::nebula::meta::cpp2::AdminJobReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::AdminJobResp> semifuture_runAdminJob(const  ::nebula::meta::cpp2::AdminJobReq& p_req) = 0;
  virtual void async_tm_addZone(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::AddZoneReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_addZone(const  ::nebula::meta::cpp2::AddZoneReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_addZone(const  ::nebula::meta::cpp2::AddZoneReq& p_req) = 0;
  virtual void async_tm_dropZone(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::DropZoneReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_dropZone(const  ::nebula::meta::cpp2::DropZoneReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_dropZone(const  ::nebula::meta::cpp2::DropZoneReq& p_req) = 0;
  virtual void async_tm_addHostIntoZone(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::AddHostIntoZoneReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_addHostIntoZone(const  ::nebula::meta::cpp2::AddHostIntoZoneReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_addHostIntoZone(const  ::nebula::meta::cpp2::AddHostIntoZoneReq& p_req) = 0;
  virtual void async_tm_dropHostFromZone(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::DropHostFromZoneReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_dropHostFromZone(const  ::nebula::meta::cpp2::DropHostFromZoneReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_dropHostFromZone(const  ::nebula::meta::cpp2::DropHostFromZoneReq& p_req) = 0;
  virtual void async_tm_getZone(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::GetZoneResp>> callback, const  ::nebula::meta::cpp2::GetZoneReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::GetZoneResp> future_getZone(const  ::nebula::meta::cpp2::GetZoneReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::GetZoneResp> semifuture_getZone(const  ::nebula::meta::cpp2::GetZoneReq& p_req) = 0;
  virtual void async_tm_listZones(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListZonesResp>> callback, const  ::nebula::meta::cpp2::ListZonesReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ListZonesResp> future_listZones(const  ::nebula::meta::cpp2::ListZonesReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ListZonesResp> semifuture_listZones(const  ::nebula::meta::cpp2::ListZonesReq& p_req) = 0;
  virtual void async_tm_addGroup(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::AddGroupReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_addGroup(const  ::nebula::meta::cpp2::AddGroupReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_addGroup(const  ::nebula::meta::cpp2::AddGroupReq& p_req) = 0;
  virtual void async_tm_dropGroup(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::DropGroupReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_dropGroup(const  ::nebula::meta::cpp2::DropGroupReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_dropGroup(const  ::nebula::meta::cpp2::DropGroupReq& p_req) = 0;
  virtual void async_tm_addZoneIntoGroup(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::AddZoneIntoGroupReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_addZoneIntoGroup(const  ::nebula::meta::cpp2::AddZoneIntoGroupReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_addZoneIntoGroup(const  ::nebula::meta::cpp2::AddZoneIntoGroupReq& p_req) = 0;
  virtual void async_tm_dropZoneFromGroup(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::DropZoneFromGroupReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_dropZoneFromGroup(const  ::nebula::meta::cpp2::DropZoneFromGroupReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_dropZoneFromGroup(const  ::nebula::meta::cpp2::DropZoneFromGroupReq& p_req) = 0;
  virtual void async_tm_getGroup(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::GetGroupResp>> callback, const  ::nebula::meta::cpp2::GetGroupReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::GetGroupResp> future_getGroup(const  ::nebula::meta::cpp2::GetGroupReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::GetGroupResp> semifuture_getGroup(const  ::nebula::meta::cpp2::GetGroupReq& p_req) = 0;
  virtual void async_tm_listGroups(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListGroupsResp>> callback, const  ::nebula::meta::cpp2::ListGroupsReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ListGroupsResp> future_listGroups(const  ::nebula::meta::cpp2::ListGroupsReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ListGroupsResp> semifuture_listGroups(const  ::nebula::meta::cpp2::ListGroupsReq& p_req) = 0;
  virtual void async_tm_createBackup(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::CreateBackupResp>> callback, const  ::nebula::meta::cpp2::CreateBackupReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::CreateBackupResp> future_createBackup(const  ::nebula::meta::cpp2::CreateBackupReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::CreateBackupResp> semifuture_createBackup(const  ::nebula::meta::cpp2::CreateBackupReq& p_req) = 0;
  virtual void async_tm_restoreMeta(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::RestoreMetaReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_restoreMeta(const  ::nebula::meta::cpp2::RestoreMetaReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_restoreMeta(const  ::nebula::meta::cpp2::RestoreMetaReq& p_req) = 0;
  virtual void async_tm_addListener(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::AddListenerReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_addListener(const  ::nebula::meta::cpp2::AddListenerReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_addListener(const  ::nebula::meta::cpp2::AddListenerReq& p_req) = 0;
  virtual void async_tm_removeListener(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::RemoveListenerReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_removeListener(const  ::nebula::meta::cpp2::RemoveListenerReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_removeListener(const  ::nebula::meta::cpp2::RemoveListenerReq& p_req) = 0;
  virtual void async_tm_listListener(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListListenerResp>> callback, const  ::nebula::meta::cpp2::ListListenerReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ListListenerResp> future_listListener(const  ::nebula::meta::cpp2::ListListenerReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ListListenerResp> semifuture_listListener(const  ::nebula::meta::cpp2::ListListenerReq& p_req) = 0;
  virtual void async_tm_getStats(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::GetStatsResp>> callback, const  ::nebula::meta::cpp2::GetStatsReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::GetStatsResp> future_getStats(const  ::nebula::meta::cpp2::GetStatsReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::GetStatsResp> semifuture_getStats(const  ::nebula::meta::cpp2::GetStatsReq& p_req) = 0;
  virtual void async_tm_signInFTService(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::SignInFTServiceReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_signInFTService(const  ::nebula::meta::cpp2::SignInFTServiceReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_signInFTService(const  ::nebula::meta::cpp2::SignInFTServiceReq& p_req) = 0;
  virtual void async_tm_signOutFTService(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::SignOutFTServiceReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_signOutFTService(const  ::nebula::meta::cpp2::SignOutFTServiceReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_signOutFTService(const  ::nebula::meta::cpp2::SignOutFTServiceReq& p_req) = 0;
  virtual void async_tm_listFTClients(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListFTClientsResp>> callback, const  ::nebula::meta::cpp2::ListFTClientsReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ListFTClientsResp> future_listFTClients(const  ::nebula::meta::cpp2::ListFTClientsReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ListFTClientsResp> semifuture_listFTClients(const  ::nebula::meta::cpp2::ListFTClientsReq& p_req) = 0;
  virtual void async_tm_createFTIndex(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::CreateFTIndexReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_createFTIndex(const  ::nebula::meta::cpp2::CreateFTIndexReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_createFTIndex(const  ::nebula::meta::cpp2::CreateFTIndexReq& p_req) = 0;
  virtual void async_tm_dropFTIndex(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::DropFTIndexReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_dropFTIndex(const  ::nebula::meta::cpp2::DropFTIndexReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_dropFTIndex(const  ::nebula::meta::cpp2::DropFTIndexReq& p_req) = 0;
  virtual void async_tm_listFTIndexes(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListFTIndexesResp>> callback, const  ::nebula::meta::cpp2::ListFTIndexesReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ListFTIndexesResp> future_listFTIndexes(const  ::nebula::meta::cpp2::ListFTIndexesReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ListFTIndexesResp> semifuture_listFTIndexes(const  ::nebula::meta::cpp2::ListFTIndexesReq& p_req) = 0;
  virtual void async_tm_createSession(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::CreateSessionResp>> callback, const  ::nebula::meta::cpp2::CreateSessionReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::CreateSessionResp> future_createSession(const  ::nebula::meta::cpp2::CreateSessionReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::CreateSessionResp> semifuture_createSession(const  ::nebula::meta::cpp2::CreateSessionReq& p_req) = 0;
  virtual void async_tm_updateSessions(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::UpdateSessionsResp>> callback, const  ::nebula::meta::cpp2::UpdateSessionsReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::UpdateSessionsResp> future_updateSessions(const  ::nebula::meta::cpp2::UpdateSessionsReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::UpdateSessionsResp> semifuture_updateSessions(const  ::nebula::meta::cpp2::UpdateSessionsReq& p_req) = 0;
  virtual void async_tm_listSessions(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListSessionsResp>> callback, const  ::nebula::meta::cpp2::ListSessionsReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ListSessionsResp> future_listSessions(const  ::nebula::meta::cpp2::ListSessionsReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ListSessionsResp> semifuture_listSessions(const  ::nebula::meta::cpp2::ListSessionsReq& p_req) = 0;
  virtual void async_tm_getSession(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::GetSessionResp>> callback, const  ::nebula::meta::cpp2::GetSessionReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::GetSessionResp> future_getSession(const  ::nebula::meta::cpp2::GetSessionReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::GetSessionResp> semifuture_getSession(const  ::nebula::meta::cpp2::GetSessionReq& p_req) = 0;
  virtual void async_tm_removeSession(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::RemoveSessionReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_removeSession(const  ::nebula::meta::cpp2::RemoveSessionReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_removeSession(const  ::nebula::meta::cpp2::RemoveSessionReq& p_req) = 0;
  virtual void async_tm_killQuery(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::KillQueryReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_killQuery(const  ::nebula::meta::cpp2::KillQueryReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_killQuery(const  ::nebula::meta::cpp2::KillQueryReq& p_req) = 0;
  virtual void async_tm_reportTaskFinish(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::ReportTaskReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ExecResp> future_reportTaskFinish(const  ::nebula::meta::cpp2::ReportTaskReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_reportTaskFinish(const  ::nebula::meta::cpp2::ReportTaskReq& p_req) = 0;
  virtual void async_tm_listCluster(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListClusterInfoResp>> callback, const  ::nebula::meta::cpp2::ListClusterInfoReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::ListClusterInfoResp> future_listCluster(const  ::nebula::meta::cpp2::ListClusterInfoReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::ListClusterInfoResp> semifuture_listCluster(const  ::nebula::meta::cpp2::ListClusterInfoReq& p_req) = 0;
  virtual void async_tm_getMetaDirInfo(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::GetMetaDirInfoResp>> callback, const  ::nebula::meta::cpp2::GetMetaDirInfoReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::GetMetaDirInfoResp> future_getMetaDirInfo(const  ::nebula::meta::cpp2::GetMetaDirInfoReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::GetMetaDirInfoResp> semifuture_getMetaDirInfo(const  ::nebula::meta::cpp2::GetMetaDirInfoReq& p_req) = 0;
  virtual void async_tm_verifyClientVersion(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::VerifyClientVersionResp>> callback, const  ::nebula::meta::cpp2::VerifyClientVersionReq& p_req) = 0;
  virtual folly::Future< ::nebula::meta::cpp2::VerifyClientVersionResp> future_verifyClientVersion(const  ::nebula::meta::cpp2::VerifyClientVersionReq& p_req) = 0;
  virtual folly::SemiFuture< ::nebula::meta::cpp2::VerifyClientVersionResp> semifuture_verifyClientVersion(const  ::nebula::meta::cpp2::VerifyClientVersionReq& p_req) = 0;
};

class MetaServiceAsyncProcessor;

class MetaServiceSvIf : public MetaServiceSvAsyncIf, public apache::thrift::ServerInterface {
 public:
  typedef MetaServiceAsyncProcessor ProcessorType;
  std::unique_ptr<apache::thrift::AsyncProcessor> getProcessor() override;


  virtual void createSpace( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::CreateSpaceReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_createSpace(const  ::nebula::meta::cpp2::CreateSpaceReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_createSpace(const  ::nebula::meta::cpp2::CreateSpaceReq& p_req) override;
  void async_tm_createSpace(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::CreateSpaceReq& p_req) override;
  virtual void dropSpace( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::DropSpaceReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_dropSpace(const  ::nebula::meta::cpp2::DropSpaceReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_dropSpace(const  ::nebula::meta::cpp2::DropSpaceReq& p_req) override;
  void async_tm_dropSpace(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::DropSpaceReq& p_req) override;
  virtual void getSpace( ::nebula::meta::cpp2::GetSpaceResp& /*_return*/, const  ::nebula::meta::cpp2::GetSpaceReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::GetSpaceResp> future_getSpace(const  ::nebula::meta::cpp2::GetSpaceReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::GetSpaceResp> semifuture_getSpace(const  ::nebula::meta::cpp2::GetSpaceReq& p_req) override;
  void async_tm_getSpace(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::GetSpaceResp>> callback, const  ::nebula::meta::cpp2::GetSpaceReq& p_req) override;
  virtual void listSpaces( ::nebula::meta::cpp2::ListSpacesResp& /*_return*/, const  ::nebula::meta::cpp2::ListSpacesReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ListSpacesResp> future_listSpaces(const  ::nebula::meta::cpp2::ListSpacesReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ListSpacesResp> semifuture_listSpaces(const  ::nebula::meta::cpp2::ListSpacesReq& p_req) override;
  void async_tm_listSpaces(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListSpacesResp>> callback, const  ::nebula::meta::cpp2::ListSpacesReq& p_req) override;
  virtual void createSpaceAs( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::CreateSpaceAsReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_createSpaceAs(const  ::nebula::meta::cpp2::CreateSpaceAsReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_createSpaceAs(const  ::nebula::meta::cpp2::CreateSpaceAsReq& p_req) override;
  void async_tm_createSpaceAs(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::CreateSpaceAsReq& p_req) override;
  virtual void createTag( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::CreateTagReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_createTag(const  ::nebula::meta::cpp2::CreateTagReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_createTag(const  ::nebula::meta::cpp2::CreateTagReq& p_req) override;
  void async_tm_createTag(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::CreateTagReq& p_req) override;
  virtual void alterTag( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::AlterTagReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_alterTag(const  ::nebula::meta::cpp2::AlterTagReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_alterTag(const  ::nebula::meta::cpp2::AlterTagReq& p_req) override;
  void async_tm_alterTag(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::AlterTagReq& p_req) override;
  virtual void dropTag( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::DropTagReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_dropTag(const  ::nebula::meta::cpp2::DropTagReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_dropTag(const  ::nebula::meta::cpp2::DropTagReq& p_req) override;
  void async_tm_dropTag(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::DropTagReq& p_req) override;
  virtual void getTag( ::nebula::meta::cpp2::GetTagResp& /*_return*/, const  ::nebula::meta::cpp2::GetTagReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::GetTagResp> future_getTag(const  ::nebula::meta::cpp2::GetTagReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::GetTagResp> semifuture_getTag(const  ::nebula::meta::cpp2::GetTagReq& p_req) override;
  void async_tm_getTag(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::GetTagResp>> callback, const  ::nebula::meta::cpp2::GetTagReq& p_req) override;
  virtual void listTags( ::nebula::meta::cpp2::ListTagsResp& /*_return*/, const  ::nebula::meta::cpp2::ListTagsReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ListTagsResp> future_listTags(const  ::nebula::meta::cpp2::ListTagsReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ListTagsResp> semifuture_listTags(const  ::nebula::meta::cpp2::ListTagsReq& p_req) override;
  void async_tm_listTags(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListTagsResp>> callback, const  ::nebula::meta::cpp2::ListTagsReq& p_req) override;
  virtual void createEdge( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::CreateEdgeReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_createEdge(const  ::nebula::meta::cpp2::CreateEdgeReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_createEdge(const  ::nebula::meta::cpp2::CreateEdgeReq& p_req) override;
  void async_tm_createEdge(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::CreateEdgeReq& p_req) override;
  virtual void alterEdge( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::AlterEdgeReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_alterEdge(const  ::nebula::meta::cpp2::AlterEdgeReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_alterEdge(const  ::nebula::meta::cpp2::AlterEdgeReq& p_req) override;
  void async_tm_alterEdge(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::AlterEdgeReq& p_req) override;
  virtual void dropEdge( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::DropEdgeReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_dropEdge(const  ::nebula::meta::cpp2::DropEdgeReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_dropEdge(const  ::nebula::meta::cpp2::DropEdgeReq& p_req) override;
  void async_tm_dropEdge(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::DropEdgeReq& p_req) override;
  virtual void getEdge( ::nebula::meta::cpp2::GetEdgeResp& /*_return*/, const  ::nebula::meta::cpp2::GetEdgeReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::GetEdgeResp> future_getEdge(const  ::nebula::meta::cpp2::GetEdgeReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::GetEdgeResp> semifuture_getEdge(const  ::nebula::meta::cpp2::GetEdgeReq& p_req) override;
  void async_tm_getEdge(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::GetEdgeResp>> callback, const  ::nebula::meta::cpp2::GetEdgeReq& p_req) override;
  virtual void listEdges( ::nebula::meta::cpp2::ListEdgesResp& /*_return*/, const  ::nebula::meta::cpp2::ListEdgesReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ListEdgesResp> future_listEdges(const  ::nebula::meta::cpp2::ListEdgesReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ListEdgesResp> semifuture_listEdges(const  ::nebula::meta::cpp2::ListEdgesReq& p_req) override;
  void async_tm_listEdges(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListEdgesResp>> callback, const  ::nebula::meta::cpp2::ListEdgesReq& p_req) override;
  virtual void listHosts( ::nebula::meta::cpp2::ListHostsResp& /*_return*/, const  ::nebula::meta::cpp2::ListHostsReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ListHostsResp> future_listHosts(const  ::nebula::meta::cpp2::ListHostsReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ListHostsResp> semifuture_listHosts(const  ::nebula::meta::cpp2::ListHostsReq& p_req) override;
  void async_tm_listHosts(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListHostsResp>> callback, const  ::nebula::meta::cpp2::ListHostsReq& p_req) override;
  virtual void getPartsAlloc( ::nebula::meta::cpp2::GetPartsAllocResp& /*_return*/, const  ::nebula::meta::cpp2::GetPartsAllocReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::GetPartsAllocResp> future_getPartsAlloc(const  ::nebula::meta::cpp2::GetPartsAllocReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::GetPartsAllocResp> semifuture_getPartsAlloc(const  ::nebula::meta::cpp2::GetPartsAllocReq& p_req) override;
  void async_tm_getPartsAlloc(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::GetPartsAllocResp>> callback, const  ::nebula::meta::cpp2::GetPartsAllocReq& p_req) override;
  virtual void listParts( ::nebula::meta::cpp2::ListPartsResp& /*_return*/, const  ::nebula::meta::cpp2::ListPartsReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ListPartsResp> future_listParts(const  ::nebula::meta::cpp2::ListPartsReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ListPartsResp> semifuture_listParts(const  ::nebula::meta::cpp2::ListPartsReq& p_req) override;
  void async_tm_listParts(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListPartsResp>> callback, const  ::nebula::meta::cpp2::ListPartsReq& p_req) override;
  virtual void multiPut( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::MultiPutReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_multiPut(const  ::nebula::meta::cpp2::MultiPutReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_multiPut(const  ::nebula::meta::cpp2::MultiPutReq& p_req) override;
  void async_tm_multiPut(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::MultiPutReq& p_req) override;
  virtual void get( ::nebula::meta::cpp2::GetResp& /*_return*/, const  ::nebula::meta::cpp2::GetReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::GetResp> future_get(const  ::nebula::meta::cpp2::GetReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::GetResp> semifuture_get(const  ::nebula::meta::cpp2::GetReq& p_req) override;
  void async_tm_get(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::GetResp>> callback, const  ::nebula::meta::cpp2::GetReq& p_req) override;
  virtual void multiGet( ::nebula::meta::cpp2::MultiGetResp& /*_return*/, const  ::nebula::meta::cpp2::MultiGetReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::MultiGetResp> future_multiGet(const  ::nebula::meta::cpp2::MultiGetReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::MultiGetResp> semifuture_multiGet(const  ::nebula::meta::cpp2::MultiGetReq& p_req) override;
  void async_tm_multiGet(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::MultiGetResp>> callback, const  ::nebula::meta::cpp2::MultiGetReq& p_req) override;
  virtual void remove( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::RemoveReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_remove(const  ::nebula::meta::cpp2::RemoveReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_remove(const  ::nebula::meta::cpp2::RemoveReq& p_req) override;
  void async_tm_remove(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::RemoveReq& p_req) override;
  virtual void removeRange( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::RemoveRangeReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_removeRange(const  ::nebula::meta::cpp2::RemoveRangeReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_removeRange(const  ::nebula::meta::cpp2::RemoveRangeReq& p_req) override;
  void async_tm_removeRange(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::RemoveRangeReq& p_req) override;
  virtual void scan( ::nebula::meta::cpp2::ScanResp& /*_return*/, const  ::nebula::meta::cpp2::ScanReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ScanResp> future_scan(const  ::nebula::meta::cpp2::ScanReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ScanResp> semifuture_scan(const  ::nebula::meta::cpp2::ScanReq& p_req) override;
  void async_tm_scan(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ScanResp>> callback, const  ::nebula::meta::cpp2::ScanReq& p_req) override;
  virtual void createTagIndex( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::CreateTagIndexReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_createTagIndex(const  ::nebula::meta::cpp2::CreateTagIndexReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_createTagIndex(const  ::nebula::meta::cpp2::CreateTagIndexReq& p_req) override;
  void async_tm_createTagIndex(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::CreateTagIndexReq& p_req) override;
  virtual void dropTagIndex( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::DropTagIndexReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_dropTagIndex(const  ::nebula::meta::cpp2::DropTagIndexReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_dropTagIndex(const  ::nebula::meta::cpp2::DropTagIndexReq& p_req) override;
  void async_tm_dropTagIndex(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::DropTagIndexReq& p_req) override;
  virtual void getTagIndex( ::nebula::meta::cpp2::GetTagIndexResp& /*_return*/, const  ::nebula::meta::cpp2::GetTagIndexReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::GetTagIndexResp> future_getTagIndex(const  ::nebula::meta::cpp2::GetTagIndexReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::GetTagIndexResp> semifuture_getTagIndex(const  ::nebula::meta::cpp2::GetTagIndexReq& p_req) override;
  void async_tm_getTagIndex(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::GetTagIndexResp>> callback, const  ::nebula::meta::cpp2::GetTagIndexReq& p_req) override;
  virtual void listTagIndexes( ::nebula::meta::cpp2::ListTagIndexesResp& /*_return*/, const  ::nebula::meta::cpp2::ListTagIndexesReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ListTagIndexesResp> future_listTagIndexes(const  ::nebula::meta::cpp2::ListTagIndexesReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ListTagIndexesResp> semifuture_listTagIndexes(const  ::nebula::meta::cpp2::ListTagIndexesReq& p_req) override;
  void async_tm_listTagIndexes(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListTagIndexesResp>> callback, const  ::nebula::meta::cpp2::ListTagIndexesReq& p_req) override;
  virtual void rebuildTagIndex( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::RebuildIndexReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_rebuildTagIndex(const  ::nebula::meta::cpp2::RebuildIndexReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_rebuildTagIndex(const  ::nebula::meta::cpp2::RebuildIndexReq& p_req) override;
  void async_tm_rebuildTagIndex(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::RebuildIndexReq& p_req) override;
  virtual void listTagIndexStatus( ::nebula::meta::cpp2::ListIndexStatusResp& /*_return*/, const  ::nebula::meta::cpp2::ListIndexStatusReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ListIndexStatusResp> future_listTagIndexStatus(const  ::nebula::meta::cpp2::ListIndexStatusReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ListIndexStatusResp> semifuture_listTagIndexStatus(const  ::nebula::meta::cpp2::ListIndexStatusReq& p_req) override;
  void async_tm_listTagIndexStatus(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListIndexStatusResp>> callback, const  ::nebula::meta::cpp2::ListIndexStatusReq& p_req) override;
  virtual void createEdgeIndex( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::CreateEdgeIndexReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_createEdgeIndex(const  ::nebula::meta::cpp2::CreateEdgeIndexReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_createEdgeIndex(const  ::nebula::meta::cpp2::CreateEdgeIndexReq& p_req) override;
  void async_tm_createEdgeIndex(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::CreateEdgeIndexReq& p_req) override;
  virtual void dropEdgeIndex( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::DropEdgeIndexReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_dropEdgeIndex(const  ::nebula::meta::cpp2::DropEdgeIndexReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_dropEdgeIndex(const  ::nebula::meta::cpp2::DropEdgeIndexReq& p_req) override;
  void async_tm_dropEdgeIndex(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::DropEdgeIndexReq& p_req) override;
  virtual void getEdgeIndex( ::nebula::meta::cpp2::GetEdgeIndexResp& /*_return*/, const  ::nebula::meta::cpp2::GetEdgeIndexReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::GetEdgeIndexResp> future_getEdgeIndex(const  ::nebula::meta::cpp2::GetEdgeIndexReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::GetEdgeIndexResp> semifuture_getEdgeIndex(const  ::nebula::meta::cpp2::GetEdgeIndexReq& p_req) override;
  void async_tm_getEdgeIndex(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::GetEdgeIndexResp>> callback, const  ::nebula::meta::cpp2::GetEdgeIndexReq& p_req) override;
  virtual void listEdgeIndexes( ::nebula::meta::cpp2::ListEdgeIndexesResp& /*_return*/, const  ::nebula::meta::cpp2::ListEdgeIndexesReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ListEdgeIndexesResp> future_listEdgeIndexes(const  ::nebula::meta::cpp2::ListEdgeIndexesReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ListEdgeIndexesResp> semifuture_listEdgeIndexes(const  ::nebula::meta::cpp2::ListEdgeIndexesReq& p_req) override;
  void async_tm_listEdgeIndexes(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListEdgeIndexesResp>> callback, const  ::nebula::meta::cpp2::ListEdgeIndexesReq& p_req) override;
  virtual void rebuildEdgeIndex( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::RebuildIndexReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_rebuildEdgeIndex(const  ::nebula::meta::cpp2::RebuildIndexReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_rebuildEdgeIndex(const  ::nebula::meta::cpp2::RebuildIndexReq& p_req) override;
  void async_tm_rebuildEdgeIndex(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::RebuildIndexReq& p_req) override;
  virtual void listEdgeIndexStatus( ::nebula::meta::cpp2::ListIndexStatusResp& /*_return*/, const  ::nebula::meta::cpp2::ListIndexStatusReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ListIndexStatusResp> future_listEdgeIndexStatus(const  ::nebula::meta::cpp2::ListIndexStatusReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ListIndexStatusResp> semifuture_listEdgeIndexStatus(const  ::nebula::meta::cpp2::ListIndexStatusReq& p_req) override;
  void async_tm_listEdgeIndexStatus(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListIndexStatusResp>> callback, const  ::nebula::meta::cpp2::ListIndexStatusReq& p_req) override;
  virtual void createUser( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::CreateUserReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_createUser(const  ::nebula::meta::cpp2::CreateUserReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_createUser(const  ::nebula::meta::cpp2::CreateUserReq& p_req) override;
  void async_tm_createUser(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::CreateUserReq& p_req) override;
  virtual void dropUser( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::DropUserReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_dropUser(const  ::nebula::meta::cpp2::DropUserReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_dropUser(const  ::nebula::meta::cpp2::DropUserReq& p_req) override;
  void async_tm_dropUser(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::DropUserReq& p_req) override;
  virtual void alterUser( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::AlterUserReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_alterUser(const  ::nebula::meta::cpp2::AlterUserReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_alterUser(const  ::nebula::meta::cpp2::AlterUserReq& p_req) override;
  void async_tm_alterUser(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::AlterUserReq& p_req) override;
  virtual void grantRole( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::GrantRoleReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_grantRole(const  ::nebula::meta::cpp2::GrantRoleReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_grantRole(const  ::nebula::meta::cpp2::GrantRoleReq& p_req) override;
  void async_tm_grantRole(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::GrantRoleReq& p_req) override;
  virtual void revokeRole( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::RevokeRoleReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_revokeRole(const  ::nebula::meta::cpp2::RevokeRoleReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_revokeRole(const  ::nebula::meta::cpp2::RevokeRoleReq& p_req) override;
  void async_tm_revokeRole(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::RevokeRoleReq& p_req) override;
  virtual void listUsers( ::nebula::meta::cpp2::ListUsersResp& /*_return*/, const  ::nebula::meta::cpp2::ListUsersReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ListUsersResp> future_listUsers(const  ::nebula::meta::cpp2::ListUsersReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ListUsersResp> semifuture_listUsers(const  ::nebula::meta::cpp2::ListUsersReq& p_req) override;
  void async_tm_listUsers(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListUsersResp>> callback, const  ::nebula::meta::cpp2::ListUsersReq& p_req) override;
  virtual void listRoles( ::nebula::meta::cpp2::ListRolesResp& /*_return*/, const  ::nebula::meta::cpp2::ListRolesReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ListRolesResp> future_listRoles(const  ::nebula::meta::cpp2::ListRolesReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ListRolesResp> semifuture_listRoles(const  ::nebula::meta::cpp2::ListRolesReq& p_req) override;
  void async_tm_listRoles(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListRolesResp>> callback, const  ::nebula::meta::cpp2::ListRolesReq& p_req) override;
  virtual void getUserRoles( ::nebula::meta::cpp2::ListRolesResp& /*_return*/, const  ::nebula::meta::cpp2::GetUserRolesReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ListRolesResp> future_getUserRoles(const  ::nebula::meta::cpp2::GetUserRolesReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ListRolesResp> semifuture_getUserRoles(const  ::nebula::meta::cpp2::GetUserRolesReq& p_req) override;
  void async_tm_getUserRoles(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListRolesResp>> callback, const  ::nebula::meta::cpp2::GetUserRolesReq& p_req) override;
  virtual void changePassword( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::ChangePasswordReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_changePassword(const  ::nebula::meta::cpp2::ChangePasswordReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_changePassword(const  ::nebula::meta::cpp2::ChangePasswordReq& p_req) override;
  void async_tm_changePassword(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::ChangePasswordReq& p_req) override;
  virtual void heartBeat( ::nebula::meta::cpp2::HBResp& /*_return*/, const  ::nebula::meta::cpp2::HBReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::HBResp> future_heartBeat(const  ::nebula::meta::cpp2::HBReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::HBResp> semifuture_heartBeat(const  ::nebula::meta::cpp2::HBReq& p_req) override;
  void async_tm_heartBeat(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::HBResp>> callback, const  ::nebula::meta::cpp2::HBReq& p_req) override;
  virtual void balance( ::nebula::meta::cpp2::BalanceResp& /*_return*/, const  ::nebula::meta::cpp2::BalanceReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::BalanceResp> future_balance(const  ::nebula::meta::cpp2::BalanceReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::BalanceResp> semifuture_balance(const  ::nebula::meta::cpp2::BalanceReq& p_req) override;
  void async_tm_balance(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::BalanceResp>> callback, const  ::nebula::meta::cpp2::BalanceReq& p_req) override;
  virtual void leaderBalance( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::LeaderBalanceReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_leaderBalance(const  ::nebula::meta::cpp2::LeaderBalanceReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_leaderBalance(const  ::nebula::meta::cpp2::LeaderBalanceReq& p_req) override;
  void async_tm_leaderBalance(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::LeaderBalanceReq& p_req) override;
  virtual void regConfig( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::RegConfigReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_regConfig(const  ::nebula::meta::cpp2::RegConfigReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_regConfig(const  ::nebula::meta::cpp2::RegConfigReq& p_req) override;
  void async_tm_regConfig(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::RegConfigReq& p_req) override;
  virtual void getConfig( ::nebula::meta::cpp2::GetConfigResp& /*_return*/, const  ::nebula::meta::cpp2::GetConfigReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::GetConfigResp> future_getConfig(const  ::nebula::meta::cpp2::GetConfigReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::GetConfigResp> semifuture_getConfig(const  ::nebula::meta::cpp2::GetConfigReq& p_req) override;
  void async_tm_getConfig(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::GetConfigResp>> callback, const  ::nebula::meta::cpp2::GetConfigReq& p_req) override;
  virtual void setConfig( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::SetConfigReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_setConfig(const  ::nebula::meta::cpp2::SetConfigReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_setConfig(const  ::nebula::meta::cpp2::SetConfigReq& p_req) override;
  void async_tm_setConfig(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::SetConfigReq& p_req) override;
  virtual void listConfigs( ::nebula::meta::cpp2::ListConfigsResp& /*_return*/, const  ::nebula::meta::cpp2::ListConfigsReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ListConfigsResp> future_listConfigs(const  ::nebula::meta::cpp2::ListConfigsReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ListConfigsResp> semifuture_listConfigs(const  ::nebula::meta::cpp2::ListConfigsReq& p_req) override;
  void async_tm_listConfigs(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListConfigsResp>> callback, const  ::nebula::meta::cpp2::ListConfigsReq& p_req) override;
  virtual void createSnapshot( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::CreateSnapshotReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_createSnapshot(const  ::nebula::meta::cpp2::CreateSnapshotReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_createSnapshot(const  ::nebula::meta::cpp2::CreateSnapshotReq& p_req) override;
  void async_tm_createSnapshot(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::CreateSnapshotReq& p_req) override;
  virtual void dropSnapshot( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::DropSnapshotReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_dropSnapshot(const  ::nebula::meta::cpp2::DropSnapshotReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_dropSnapshot(const  ::nebula::meta::cpp2::DropSnapshotReq& p_req) override;
  void async_tm_dropSnapshot(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::DropSnapshotReq& p_req) override;
  virtual void listSnapshots( ::nebula::meta::cpp2::ListSnapshotsResp& /*_return*/, const  ::nebula::meta::cpp2::ListSnapshotsReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ListSnapshotsResp> future_listSnapshots(const  ::nebula::meta::cpp2::ListSnapshotsReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ListSnapshotsResp> semifuture_listSnapshots(const  ::nebula::meta::cpp2::ListSnapshotsReq& p_req) override;
  void async_tm_listSnapshots(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListSnapshotsResp>> callback, const  ::nebula::meta::cpp2::ListSnapshotsReq& p_req) override;
  virtual void runAdminJob( ::nebula::meta::cpp2::AdminJobResp& /*_return*/, const  ::nebula::meta::cpp2::AdminJobReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::AdminJobResp> future_runAdminJob(const  ::nebula::meta::cpp2::AdminJobReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::AdminJobResp> semifuture_runAdminJob(const  ::nebula::meta::cpp2::AdminJobReq& p_req) override;
  void async_tm_runAdminJob(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::AdminJobResp>> callback, const  ::nebula::meta::cpp2::AdminJobReq& p_req) override;
  virtual void addZone( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::AddZoneReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_addZone(const  ::nebula::meta::cpp2::AddZoneReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_addZone(const  ::nebula::meta::cpp2::AddZoneReq& p_req) override;
  void async_tm_addZone(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::AddZoneReq& p_req) override;
  virtual void dropZone( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::DropZoneReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_dropZone(const  ::nebula::meta::cpp2::DropZoneReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_dropZone(const  ::nebula::meta::cpp2::DropZoneReq& p_req) override;
  void async_tm_dropZone(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::DropZoneReq& p_req) override;
  virtual void addHostIntoZone( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::AddHostIntoZoneReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_addHostIntoZone(const  ::nebula::meta::cpp2::AddHostIntoZoneReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_addHostIntoZone(const  ::nebula::meta::cpp2::AddHostIntoZoneReq& p_req) override;
  void async_tm_addHostIntoZone(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::AddHostIntoZoneReq& p_req) override;
  virtual void dropHostFromZone( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::DropHostFromZoneReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_dropHostFromZone(const  ::nebula::meta::cpp2::DropHostFromZoneReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_dropHostFromZone(const  ::nebula::meta::cpp2::DropHostFromZoneReq& p_req) override;
  void async_tm_dropHostFromZone(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::DropHostFromZoneReq& p_req) override;
  virtual void getZone( ::nebula::meta::cpp2::GetZoneResp& /*_return*/, const  ::nebula::meta::cpp2::GetZoneReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::GetZoneResp> future_getZone(const  ::nebula::meta::cpp2::GetZoneReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::GetZoneResp> semifuture_getZone(const  ::nebula::meta::cpp2::GetZoneReq& p_req) override;
  void async_tm_getZone(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::GetZoneResp>> callback, const  ::nebula::meta::cpp2::GetZoneReq& p_req) override;
  virtual void listZones( ::nebula::meta::cpp2::ListZonesResp& /*_return*/, const  ::nebula::meta::cpp2::ListZonesReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ListZonesResp> future_listZones(const  ::nebula::meta::cpp2::ListZonesReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ListZonesResp> semifuture_listZones(const  ::nebula::meta::cpp2::ListZonesReq& p_req) override;
  void async_tm_listZones(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListZonesResp>> callback, const  ::nebula::meta::cpp2::ListZonesReq& p_req) override;
  virtual void addGroup( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::AddGroupReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_addGroup(const  ::nebula::meta::cpp2::AddGroupReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_addGroup(const  ::nebula::meta::cpp2::AddGroupReq& p_req) override;
  void async_tm_addGroup(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::AddGroupReq& p_req) override;
  virtual void dropGroup( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::DropGroupReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_dropGroup(const  ::nebula::meta::cpp2::DropGroupReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_dropGroup(const  ::nebula::meta::cpp2::DropGroupReq& p_req) override;
  void async_tm_dropGroup(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::DropGroupReq& p_req) override;
  virtual void addZoneIntoGroup( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::AddZoneIntoGroupReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_addZoneIntoGroup(const  ::nebula::meta::cpp2::AddZoneIntoGroupReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_addZoneIntoGroup(const  ::nebula::meta::cpp2::AddZoneIntoGroupReq& p_req) override;
  void async_tm_addZoneIntoGroup(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::AddZoneIntoGroupReq& p_req) override;
  virtual void dropZoneFromGroup( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::DropZoneFromGroupReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_dropZoneFromGroup(const  ::nebula::meta::cpp2::DropZoneFromGroupReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_dropZoneFromGroup(const  ::nebula::meta::cpp2::DropZoneFromGroupReq& p_req) override;
  void async_tm_dropZoneFromGroup(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::DropZoneFromGroupReq& p_req) override;
  virtual void getGroup( ::nebula::meta::cpp2::GetGroupResp& /*_return*/, const  ::nebula::meta::cpp2::GetGroupReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::GetGroupResp> future_getGroup(const  ::nebula::meta::cpp2::GetGroupReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::GetGroupResp> semifuture_getGroup(const  ::nebula::meta::cpp2::GetGroupReq& p_req) override;
  void async_tm_getGroup(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::GetGroupResp>> callback, const  ::nebula::meta::cpp2::GetGroupReq& p_req) override;
  virtual void listGroups( ::nebula::meta::cpp2::ListGroupsResp& /*_return*/, const  ::nebula::meta::cpp2::ListGroupsReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ListGroupsResp> future_listGroups(const  ::nebula::meta::cpp2::ListGroupsReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ListGroupsResp> semifuture_listGroups(const  ::nebula::meta::cpp2::ListGroupsReq& p_req) override;
  void async_tm_listGroups(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListGroupsResp>> callback, const  ::nebula::meta::cpp2::ListGroupsReq& p_req) override;
  virtual void createBackup( ::nebula::meta::cpp2::CreateBackupResp& /*_return*/, const  ::nebula::meta::cpp2::CreateBackupReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::CreateBackupResp> future_createBackup(const  ::nebula::meta::cpp2::CreateBackupReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::CreateBackupResp> semifuture_createBackup(const  ::nebula::meta::cpp2::CreateBackupReq& p_req) override;
  void async_tm_createBackup(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::CreateBackupResp>> callback, const  ::nebula::meta::cpp2::CreateBackupReq& p_req) override;
  virtual void restoreMeta( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::RestoreMetaReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_restoreMeta(const  ::nebula::meta::cpp2::RestoreMetaReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_restoreMeta(const  ::nebula::meta::cpp2::RestoreMetaReq& p_req) override;
  void async_tm_restoreMeta(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::RestoreMetaReq& p_req) override;
  virtual void addListener( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::AddListenerReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_addListener(const  ::nebula::meta::cpp2::AddListenerReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_addListener(const  ::nebula::meta::cpp2::AddListenerReq& p_req) override;
  void async_tm_addListener(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::AddListenerReq& p_req) override;
  virtual void removeListener( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::RemoveListenerReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_removeListener(const  ::nebula::meta::cpp2::RemoveListenerReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_removeListener(const  ::nebula::meta::cpp2::RemoveListenerReq& p_req) override;
  void async_tm_removeListener(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::RemoveListenerReq& p_req) override;
  virtual void listListener( ::nebula::meta::cpp2::ListListenerResp& /*_return*/, const  ::nebula::meta::cpp2::ListListenerReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ListListenerResp> future_listListener(const  ::nebula::meta::cpp2::ListListenerReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ListListenerResp> semifuture_listListener(const  ::nebula::meta::cpp2::ListListenerReq& p_req) override;
  void async_tm_listListener(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListListenerResp>> callback, const  ::nebula::meta::cpp2::ListListenerReq& p_req) override;
  virtual void getStats( ::nebula::meta::cpp2::GetStatsResp& /*_return*/, const  ::nebula::meta::cpp2::GetStatsReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::GetStatsResp> future_getStats(const  ::nebula::meta::cpp2::GetStatsReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::GetStatsResp> semifuture_getStats(const  ::nebula::meta::cpp2::GetStatsReq& p_req) override;
  void async_tm_getStats(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::GetStatsResp>> callback, const  ::nebula::meta::cpp2::GetStatsReq& p_req) override;
  virtual void signInFTService( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::SignInFTServiceReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_signInFTService(const  ::nebula::meta::cpp2::SignInFTServiceReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_signInFTService(const  ::nebula::meta::cpp2::SignInFTServiceReq& p_req) override;
  void async_tm_signInFTService(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::SignInFTServiceReq& p_req) override;
  virtual void signOutFTService( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::SignOutFTServiceReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_signOutFTService(const  ::nebula::meta::cpp2::SignOutFTServiceReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_signOutFTService(const  ::nebula::meta::cpp2::SignOutFTServiceReq& p_req) override;
  void async_tm_signOutFTService(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::SignOutFTServiceReq& p_req) override;
  virtual void listFTClients( ::nebula::meta::cpp2::ListFTClientsResp& /*_return*/, const  ::nebula::meta::cpp2::ListFTClientsReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ListFTClientsResp> future_listFTClients(const  ::nebula::meta::cpp2::ListFTClientsReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ListFTClientsResp> semifuture_listFTClients(const  ::nebula::meta::cpp2::ListFTClientsReq& p_req) override;
  void async_tm_listFTClients(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListFTClientsResp>> callback, const  ::nebula::meta::cpp2::ListFTClientsReq& p_req) override;
  virtual void createFTIndex( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::CreateFTIndexReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_createFTIndex(const  ::nebula::meta::cpp2::CreateFTIndexReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_createFTIndex(const  ::nebula::meta::cpp2::CreateFTIndexReq& p_req) override;
  void async_tm_createFTIndex(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::CreateFTIndexReq& p_req) override;
  virtual void dropFTIndex( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::DropFTIndexReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_dropFTIndex(const  ::nebula::meta::cpp2::DropFTIndexReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_dropFTIndex(const  ::nebula::meta::cpp2::DropFTIndexReq& p_req) override;
  void async_tm_dropFTIndex(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::DropFTIndexReq& p_req) override;
  virtual void listFTIndexes( ::nebula::meta::cpp2::ListFTIndexesResp& /*_return*/, const  ::nebula::meta::cpp2::ListFTIndexesReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ListFTIndexesResp> future_listFTIndexes(const  ::nebula::meta::cpp2::ListFTIndexesReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ListFTIndexesResp> semifuture_listFTIndexes(const  ::nebula::meta::cpp2::ListFTIndexesReq& p_req) override;
  void async_tm_listFTIndexes(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListFTIndexesResp>> callback, const  ::nebula::meta::cpp2::ListFTIndexesReq& p_req) override;
  virtual void createSession( ::nebula::meta::cpp2::CreateSessionResp& /*_return*/, const  ::nebula::meta::cpp2::CreateSessionReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::CreateSessionResp> future_createSession(const  ::nebula::meta::cpp2::CreateSessionReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::CreateSessionResp> semifuture_createSession(const  ::nebula::meta::cpp2::CreateSessionReq& p_req) override;
  void async_tm_createSession(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::CreateSessionResp>> callback, const  ::nebula::meta::cpp2::CreateSessionReq& p_req) override;
  virtual void updateSessions( ::nebula::meta::cpp2::UpdateSessionsResp& /*_return*/, const  ::nebula::meta::cpp2::UpdateSessionsReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::UpdateSessionsResp> future_updateSessions(const  ::nebula::meta::cpp2::UpdateSessionsReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::UpdateSessionsResp> semifuture_updateSessions(const  ::nebula::meta::cpp2::UpdateSessionsReq& p_req) override;
  void async_tm_updateSessions(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::UpdateSessionsResp>> callback, const  ::nebula::meta::cpp2::UpdateSessionsReq& p_req) override;
  virtual void listSessions( ::nebula::meta::cpp2::ListSessionsResp& /*_return*/, const  ::nebula::meta::cpp2::ListSessionsReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ListSessionsResp> future_listSessions(const  ::nebula::meta::cpp2::ListSessionsReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ListSessionsResp> semifuture_listSessions(const  ::nebula::meta::cpp2::ListSessionsReq& p_req) override;
  void async_tm_listSessions(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListSessionsResp>> callback, const  ::nebula::meta::cpp2::ListSessionsReq& p_req) override;
  virtual void getSession( ::nebula::meta::cpp2::GetSessionResp& /*_return*/, const  ::nebula::meta::cpp2::GetSessionReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::GetSessionResp> future_getSession(const  ::nebula::meta::cpp2::GetSessionReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::GetSessionResp> semifuture_getSession(const  ::nebula::meta::cpp2::GetSessionReq& p_req) override;
  void async_tm_getSession(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::GetSessionResp>> callback, const  ::nebula::meta::cpp2::GetSessionReq& p_req) override;
  virtual void removeSession( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::RemoveSessionReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_removeSession(const  ::nebula::meta::cpp2::RemoveSessionReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_removeSession(const  ::nebula::meta::cpp2::RemoveSessionReq& p_req) override;
  void async_tm_removeSession(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::RemoveSessionReq& p_req) override;
  virtual void killQuery( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::KillQueryReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_killQuery(const  ::nebula::meta::cpp2::KillQueryReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_killQuery(const  ::nebula::meta::cpp2::KillQueryReq& p_req) override;
  void async_tm_killQuery(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::KillQueryReq& p_req) override;
  virtual void reportTaskFinish( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::ReportTaskReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ExecResp> future_reportTaskFinish(const  ::nebula::meta::cpp2::ReportTaskReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ExecResp> semifuture_reportTaskFinish(const  ::nebula::meta::cpp2::ReportTaskReq& p_req) override;
  void async_tm_reportTaskFinish(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ExecResp>> callback, const  ::nebula::meta::cpp2::ReportTaskReq& p_req) override;
  virtual void listCluster( ::nebula::meta::cpp2::ListClusterInfoResp& /*_return*/, const  ::nebula::meta::cpp2::ListClusterInfoReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::ListClusterInfoResp> future_listCluster(const  ::nebula::meta::cpp2::ListClusterInfoReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::ListClusterInfoResp> semifuture_listCluster(const  ::nebula::meta::cpp2::ListClusterInfoReq& p_req) override;
  void async_tm_listCluster(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::ListClusterInfoResp>> callback, const  ::nebula::meta::cpp2::ListClusterInfoReq& p_req) override;
  virtual void getMetaDirInfo( ::nebula::meta::cpp2::GetMetaDirInfoResp& /*_return*/, const  ::nebula::meta::cpp2::GetMetaDirInfoReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::GetMetaDirInfoResp> future_getMetaDirInfo(const  ::nebula::meta::cpp2::GetMetaDirInfoReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::GetMetaDirInfoResp> semifuture_getMetaDirInfo(const  ::nebula::meta::cpp2::GetMetaDirInfoReq& p_req) override;
  void async_tm_getMetaDirInfo(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::GetMetaDirInfoResp>> callback, const  ::nebula::meta::cpp2::GetMetaDirInfoReq& p_req) override;
  virtual void verifyClientVersion( ::nebula::meta::cpp2::VerifyClientVersionResp& /*_return*/, const  ::nebula::meta::cpp2::VerifyClientVersionReq& /*req*/);
  folly::Future< ::nebula::meta::cpp2::VerifyClientVersionResp> future_verifyClientVersion(const  ::nebula::meta::cpp2::VerifyClientVersionReq& p_req) override;
  folly::SemiFuture< ::nebula::meta::cpp2::VerifyClientVersionResp> semifuture_verifyClientVersion(const  ::nebula::meta::cpp2::VerifyClientVersionReq& p_req) override;
  void async_tm_verifyClientVersion(std::unique_ptr<apache::thrift::HandlerCallback< ::nebula::meta::cpp2::VerifyClientVersionResp>> callback, const  ::nebula::meta::cpp2::VerifyClientVersionReq& p_req) override;
};

class MetaServiceSvNull : public MetaServiceSvIf {
 public:
  void createSpace( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::CreateSpaceReq& /*req*/) override;
  void dropSpace( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::DropSpaceReq& /*req*/) override;
  void getSpace( ::nebula::meta::cpp2::GetSpaceResp& /*_return*/, const  ::nebula::meta::cpp2::GetSpaceReq& /*req*/) override;
  void listSpaces( ::nebula::meta::cpp2::ListSpacesResp& /*_return*/, const  ::nebula::meta::cpp2::ListSpacesReq& /*req*/) override;
  void createSpaceAs( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::CreateSpaceAsReq& /*req*/) override;
  void createTag( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::CreateTagReq& /*req*/) override;
  void alterTag( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::AlterTagReq& /*req*/) override;
  void dropTag( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::DropTagReq& /*req*/) override;
  void getTag( ::nebula::meta::cpp2::GetTagResp& /*_return*/, const  ::nebula::meta::cpp2::GetTagReq& /*req*/) override;
  void listTags( ::nebula::meta::cpp2::ListTagsResp& /*_return*/, const  ::nebula::meta::cpp2::ListTagsReq& /*req*/) override;
  void createEdge( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::CreateEdgeReq& /*req*/) override;
  void alterEdge( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::AlterEdgeReq& /*req*/) override;
  void dropEdge( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::DropEdgeReq& /*req*/) override;
  void getEdge( ::nebula::meta::cpp2::GetEdgeResp& /*_return*/, const  ::nebula::meta::cpp2::GetEdgeReq& /*req*/) override;
  void listEdges( ::nebula::meta::cpp2::ListEdgesResp& /*_return*/, const  ::nebula::meta::cpp2::ListEdgesReq& /*req*/) override;
  void listHosts( ::nebula::meta::cpp2::ListHostsResp& /*_return*/, const  ::nebula::meta::cpp2::ListHostsReq& /*req*/) override;
  void getPartsAlloc( ::nebula::meta::cpp2::GetPartsAllocResp& /*_return*/, const  ::nebula::meta::cpp2::GetPartsAllocReq& /*req*/) override;
  void listParts( ::nebula::meta::cpp2::ListPartsResp& /*_return*/, const  ::nebula::meta::cpp2::ListPartsReq& /*req*/) override;
  void multiPut( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::MultiPutReq& /*req*/) override;
  void get( ::nebula::meta::cpp2::GetResp& /*_return*/, const  ::nebula::meta::cpp2::GetReq& /*req*/) override;
  void multiGet( ::nebula::meta::cpp2::MultiGetResp& /*_return*/, const  ::nebula::meta::cpp2::MultiGetReq& /*req*/) override;
  void remove( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::RemoveReq& /*req*/) override;
  void removeRange( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::RemoveRangeReq& /*req*/) override;
  void scan( ::nebula::meta::cpp2::ScanResp& /*_return*/, const  ::nebula::meta::cpp2::ScanReq& /*req*/) override;
  void createTagIndex( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::CreateTagIndexReq& /*req*/) override;
  void dropTagIndex( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::DropTagIndexReq& /*req*/) override;
  void getTagIndex( ::nebula::meta::cpp2::GetTagIndexResp& /*_return*/, const  ::nebula::meta::cpp2::GetTagIndexReq& /*req*/) override;
  void listTagIndexes( ::nebula::meta::cpp2::ListTagIndexesResp& /*_return*/, const  ::nebula::meta::cpp2::ListTagIndexesReq& /*req*/) override;
  void rebuildTagIndex( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::RebuildIndexReq& /*req*/) override;
  void listTagIndexStatus( ::nebula::meta::cpp2::ListIndexStatusResp& /*_return*/, const  ::nebula::meta::cpp2::ListIndexStatusReq& /*req*/) override;
  void createEdgeIndex( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::CreateEdgeIndexReq& /*req*/) override;
  void dropEdgeIndex( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::DropEdgeIndexReq& /*req*/) override;
  void getEdgeIndex( ::nebula::meta::cpp2::GetEdgeIndexResp& /*_return*/, const  ::nebula::meta::cpp2::GetEdgeIndexReq& /*req*/) override;
  void listEdgeIndexes( ::nebula::meta::cpp2::ListEdgeIndexesResp& /*_return*/, const  ::nebula::meta::cpp2::ListEdgeIndexesReq& /*req*/) override;
  void rebuildEdgeIndex( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::RebuildIndexReq& /*req*/) override;
  void listEdgeIndexStatus( ::nebula::meta::cpp2::ListIndexStatusResp& /*_return*/, const  ::nebula::meta::cpp2::ListIndexStatusReq& /*req*/) override;
  void createUser( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::CreateUserReq& /*req*/) override;
  void dropUser( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::DropUserReq& /*req*/) override;
  void alterUser( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::AlterUserReq& /*req*/) override;
  void grantRole( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::GrantRoleReq& /*req*/) override;
  void revokeRole( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::RevokeRoleReq& /*req*/) override;
  void listUsers( ::nebula::meta::cpp2::ListUsersResp& /*_return*/, const  ::nebula::meta::cpp2::ListUsersReq& /*req*/) override;
  void listRoles( ::nebula::meta::cpp2::ListRolesResp& /*_return*/, const  ::nebula::meta::cpp2::ListRolesReq& /*req*/) override;
  void getUserRoles( ::nebula::meta::cpp2::ListRolesResp& /*_return*/, const  ::nebula::meta::cpp2::GetUserRolesReq& /*req*/) override;
  void changePassword( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::ChangePasswordReq& /*req*/) override;
  void heartBeat( ::nebula::meta::cpp2::HBResp& /*_return*/, const  ::nebula::meta::cpp2::HBReq& /*req*/) override;
  void balance( ::nebula::meta::cpp2::BalanceResp& /*_return*/, const  ::nebula::meta::cpp2::BalanceReq& /*req*/) override;
  void leaderBalance( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::LeaderBalanceReq& /*req*/) override;
  void regConfig( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::RegConfigReq& /*req*/) override;
  void getConfig( ::nebula::meta::cpp2::GetConfigResp& /*_return*/, const  ::nebula::meta::cpp2::GetConfigReq& /*req*/) override;
  void setConfig( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::SetConfigReq& /*req*/) override;
  void listConfigs( ::nebula::meta::cpp2::ListConfigsResp& /*_return*/, const  ::nebula::meta::cpp2::ListConfigsReq& /*req*/) override;
  void createSnapshot( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::CreateSnapshotReq& /*req*/) override;
  void dropSnapshot( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::DropSnapshotReq& /*req*/) override;
  void listSnapshots( ::nebula::meta::cpp2::ListSnapshotsResp& /*_return*/, const  ::nebula::meta::cpp2::ListSnapshotsReq& /*req*/) override;
  void runAdminJob( ::nebula::meta::cpp2::AdminJobResp& /*_return*/, const  ::nebula::meta::cpp2::AdminJobReq& /*req*/) override;
  void addZone( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::AddZoneReq& /*req*/) override;
  void dropZone( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::DropZoneReq& /*req*/) override;
  void addHostIntoZone( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::AddHostIntoZoneReq& /*req*/) override;
  void dropHostFromZone( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::DropHostFromZoneReq& /*req*/) override;
  void getZone( ::nebula::meta::cpp2::GetZoneResp& /*_return*/, const  ::nebula::meta::cpp2::GetZoneReq& /*req*/) override;
  void listZones( ::nebula::meta::cpp2::ListZonesResp& /*_return*/, const  ::nebula::meta::cpp2::ListZonesReq& /*req*/) override;
  void addGroup( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::AddGroupReq& /*req*/) override;
  void dropGroup( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::DropGroupReq& /*req*/) override;
  void addZoneIntoGroup( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::AddZoneIntoGroupReq& /*req*/) override;
  void dropZoneFromGroup( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::DropZoneFromGroupReq& /*req*/) override;
  void getGroup( ::nebula::meta::cpp2::GetGroupResp& /*_return*/, const  ::nebula::meta::cpp2::GetGroupReq& /*req*/) override;
  void listGroups( ::nebula::meta::cpp2::ListGroupsResp& /*_return*/, const  ::nebula::meta::cpp2::ListGroupsReq& /*req*/) override;
  void createBackup( ::nebula::meta::cpp2::CreateBackupResp& /*_return*/, const  ::nebula::meta::cpp2::CreateBackupReq& /*req*/) override;
  void restoreMeta( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::RestoreMetaReq& /*req*/) override;
  void addListener( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::AddListenerReq& /*req*/) override;
  void removeListener( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::RemoveListenerReq& /*req*/) override;
  void listListener( ::nebula::meta::cpp2::ListListenerResp& /*_return*/, const  ::nebula::meta::cpp2::ListListenerReq& /*req*/) override;
  void getStats( ::nebula::meta::cpp2::GetStatsResp& /*_return*/, const  ::nebula::meta::cpp2::GetStatsReq& /*req*/) override;
  void signInFTService( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::SignInFTServiceReq& /*req*/) override;
  void signOutFTService( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::SignOutFTServiceReq& /*req*/) override;
  void listFTClients( ::nebula::meta::cpp2::ListFTClientsResp& /*_return*/, const  ::nebula::meta::cpp2::ListFTClientsReq& /*req*/) override;
  void createFTIndex( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::CreateFTIndexReq& /*req*/) override;
  void dropFTIndex( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::DropFTIndexReq& /*req*/) override;
  void listFTIndexes( ::nebula::meta::cpp2::ListFTIndexesResp& /*_return*/, const  ::nebula::meta::cpp2::ListFTIndexesReq& /*req*/) override;
  void createSession( ::nebula::meta::cpp2::CreateSessionResp& /*_return*/, const  ::nebula::meta::cpp2::CreateSessionReq& /*req*/) override;
  void updateSessions( ::nebula::meta::cpp2::UpdateSessionsResp& /*_return*/, const  ::nebula::meta::cpp2::UpdateSessionsReq& /*req*/) override;
  void listSessions( ::nebula::meta::cpp2::ListSessionsResp& /*_return*/, const  ::nebula::meta::cpp2::ListSessionsReq& /*req*/) override;
  void getSession( ::nebula::meta::cpp2::GetSessionResp& /*_return*/, const  ::nebula::meta::cpp2::GetSessionReq& /*req*/) override;
  void removeSession( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::RemoveSessionReq& /*req*/) override;
  void killQuery( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::KillQueryReq& /*req*/) override;
  void reportTaskFinish( ::nebula::meta::cpp2::ExecResp& /*_return*/, const  ::nebula::meta::cpp2::ReportTaskReq& /*req*/) override;
  void listCluster( ::nebula::meta::cpp2::ListClusterInfoResp& /*_return*/, const  ::nebula::meta::cpp2::ListClusterInfoReq& /*req*/) override;
  void getMetaDirInfo( ::nebula::meta::cpp2::GetMetaDirInfoResp& /*_return*/, const  ::nebula::meta::cpp2::GetMetaDirInfoReq& /*req*/) override;
  void verifyClientVersion( ::nebula::meta::cpp2::VerifyClientVersionResp& /*_return*/, const  ::nebula::meta::cpp2::VerifyClientVersionReq& /*req*/) override;
};

class MetaServiceAsyncProcessor : public ::apache::thrift::GeneratedAsyncProcessor {
 public:
  const char* getServiceName() override;
  void getServiceMetadata(apache::thrift::metadata::ThriftServiceMetadataResponse& response) override;
  using BaseAsyncProcessor = void;
 protected:
  MetaServiceSvIf* iface_;
 public:
  void processSerializedRequest(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) override;
 protected:
  std::shared_ptr<folly::RequestContext> getBaseContextForRequest() override;
 public:
  using ProcessFunc = GeneratedAsyncProcessor::ProcessFunc<MetaServiceAsyncProcessor>;
  using ProcessMap = GeneratedAsyncProcessor::ProcessMap<ProcessFunc>;
  static const MetaServiceAsyncProcessor::ProcessMap& getBinaryProtocolProcessMap();
  static const MetaServiceAsyncProcessor::ProcessMap& getCompactProtocolProcessMap();
 private:
  static const MetaServiceAsyncProcessor::ProcessMap binaryProcessMap_;
  static const MetaServiceAsyncProcessor::ProcessMap compactProcessMap_;
 private:
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_createSpace(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_createSpace(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_createSpace(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_createSpace(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_dropSpace(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_dropSpace(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_dropSpace(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_dropSpace(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_getSpace(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_getSpace(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_getSpace(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::GetSpaceResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_getSpace(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_listSpaces(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_listSpaces(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_listSpaces(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ListSpacesResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_listSpaces(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_createSpaceAs(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_createSpaceAs(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_createSpaceAs(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_createSpaceAs(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_createTag(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_createTag(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_createTag(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_createTag(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_alterTag(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_alterTag(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_alterTag(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_alterTag(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_dropTag(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_dropTag(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_dropTag(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_dropTag(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_getTag(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_getTag(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_getTag(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::GetTagResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_getTag(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_listTags(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_listTags(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_listTags(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ListTagsResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_listTags(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_createEdge(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_createEdge(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_createEdge(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_createEdge(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_alterEdge(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_alterEdge(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_alterEdge(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_alterEdge(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_dropEdge(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_dropEdge(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_dropEdge(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_dropEdge(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_getEdge(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_getEdge(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_getEdge(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::GetEdgeResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_getEdge(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_listEdges(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_listEdges(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_listEdges(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ListEdgesResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_listEdges(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_listHosts(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_listHosts(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_listHosts(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ListHostsResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_listHosts(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_getPartsAlloc(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_getPartsAlloc(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_getPartsAlloc(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::GetPartsAllocResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_getPartsAlloc(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_listParts(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_listParts(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_listParts(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ListPartsResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_listParts(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_multiPut(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_multiPut(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_multiPut(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_multiPut(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_get(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_get(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_get(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::GetResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_get(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_multiGet(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_multiGet(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_multiGet(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::MultiGetResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_multiGet(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_remove(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_remove(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_remove(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_remove(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_removeRange(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_removeRange(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_removeRange(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_removeRange(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_scan(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_scan(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_scan(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ScanResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_scan(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_createTagIndex(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_createTagIndex(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_createTagIndex(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_createTagIndex(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_dropTagIndex(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_dropTagIndex(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_dropTagIndex(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_dropTagIndex(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_getTagIndex(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_getTagIndex(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_getTagIndex(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::GetTagIndexResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_getTagIndex(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_listTagIndexes(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_listTagIndexes(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_listTagIndexes(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ListTagIndexesResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_listTagIndexes(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_rebuildTagIndex(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_rebuildTagIndex(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_rebuildTagIndex(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_rebuildTagIndex(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_listTagIndexStatus(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_listTagIndexStatus(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_listTagIndexStatus(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ListIndexStatusResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_listTagIndexStatus(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_createEdgeIndex(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_createEdgeIndex(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_createEdgeIndex(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_createEdgeIndex(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_dropEdgeIndex(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_dropEdgeIndex(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_dropEdgeIndex(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_dropEdgeIndex(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_getEdgeIndex(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_getEdgeIndex(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_getEdgeIndex(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::GetEdgeIndexResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_getEdgeIndex(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_listEdgeIndexes(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_listEdgeIndexes(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_listEdgeIndexes(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ListEdgeIndexesResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_listEdgeIndexes(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_rebuildEdgeIndex(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_rebuildEdgeIndex(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_rebuildEdgeIndex(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_rebuildEdgeIndex(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_listEdgeIndexStatus(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_listEdgeIndexStatus(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_listEdgeIndexStatus(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ListIndexStatusResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_listEdgeIndexStatus(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_createUser(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_createUser(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_createUser(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_createUser(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_dropUser(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_dropUser(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_dropUser(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_dropUser(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_alterUser(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_alterUser(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_alterUser(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_alterUser(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_grantRole(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_grantRole(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_grantRole(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_grantRole(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_revokeRole(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_revokeRole(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_revokeRole(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_revokeRole(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_listUsers(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_listUsers(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_listUsers(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ListUsersResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_listUsers(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_listRoles(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_listRoles(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_listRoles(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ListRolesResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_listRoles(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_getUserRoles(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_getUserRoles(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_getUserRoles(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ListRolesResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_getUserRoles(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_changePassword(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_changePassword(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_changePassword(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_changePassword(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_heartBeat(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_heartBeat(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_heartBeat(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::HBResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_heartBeat(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_balance(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_balance(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_balance(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::BalanceResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_balance(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_leaderBalance(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_leaderBalance(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_leaderBalance(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_leaderBalance(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_regConfig(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_regConfig(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_regConfig(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_regConfig(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_getConfig(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_getConfig(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_getConfig(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::GetConfigResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_getConfig(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_setConfig(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_setConfig(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_setConfig(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_setConfig(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_listConfigs(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_listConfigs(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_listConfigs(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ListConfigsResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_listConfigs(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_createSnapshot(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_createSnapshot(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_createSnapshot(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_createSnapshot(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_dropSnapshot(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_dropSnapshot(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_dropSnapshot(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_dropSnapshot(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_listSnapshots(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_listSnapshots(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_listSnapshots(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ListSnapshotsResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_listSnapshots(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_runAdminJob(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_runAdminJob(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_runAdminJob(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::AdminJobResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_runAdminJob(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_addZone(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_addZone(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_addZone(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_addZone(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_dropZone(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_dropZone(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_dropZone(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_dropZone(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_addHostIntoZone(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_addHostIntoZone(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_addHostIntoZone(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_addHostIntoZone(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_dropHostFromZone(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_dropHostFromZone(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_dropHostFromZone(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_dropHostFromZone(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_getZone(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_getZone(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_getZone(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::GetZoneResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_getZone(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_listZones(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_listZones(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_listZones(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ListZonesResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_listZones(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_addGroup(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_addGroup(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_addGroup(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_addGroup(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_dropGroup(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_dropGroup(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_dropGroup(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_dropGroup(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_addZoneIntoGroup(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_addZoneIntoGroup(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_addZoneIntoGroup(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_addZoneIntoGroup(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_dropZoneFromGroup(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_dropZoneFromGroup(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_dropZoneFromGroup(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_dropZoneFromGroup(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_getGroup(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_getGroup(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_getGroup(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::GetGroupResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_getGroup(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_listGroups(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_listGroups(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_listGroups(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ListGroupsResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_listGroups(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_createBackup(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_createBackup(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_createBackup(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::CreateBackupResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_createBackup(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_restoreMeta(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_restoreMeta(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_restoreMeta(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_restoreMeta(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_addListener(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_addListener(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_addListener(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_addListener(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_removeListener(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_removeListener(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_removeListener(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_removeListener(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_listListener(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_listListener(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_listListener(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ListListenerResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_listListener(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_getStats(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_getStats(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_getStats(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::GetStatsResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_getStats(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_signInFTService(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_signInFTService(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_signInFTService(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_signInFTService(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_signOutFTService(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_signOutFTService(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_signOutFTService(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_signOutFTService(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_listFTClients(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_listFTClients(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_listFTClients(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ListFTClientsResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_listFTClients(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_createFTIndex(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_createFTIndex(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_createFTIndex(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_createFTIndex(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_dropFTIndex(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_dropFTIndex(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_dropFTIndex(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_dropFTIndex(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_listFTIndexes(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_listFTIndexes(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_listFTIndexes(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ListFTIndexesResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_listFTIndexes(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_createSession(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_createSession(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_createSession(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::CreateSessionResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_createSession(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_updateSessions(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_updateSessions(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_updateSessions(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::UpdateSessionsResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_updateSessions(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_listSessions(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_listSessions(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_listSessions(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ListSessionsResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_listSessions(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_getSession(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_getSession(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_getSession(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::GetSessionResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_getSession(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_removeSession(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_removeSession(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_removeSession(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_removeSession(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_killQuery(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_killQuery(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_killQuery(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_killQuery(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_reportTaskFinish(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_reportTaskFinish(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_reportTaskFinish(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ExecResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_reportTaskFinish(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_listCluster(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_listCluster(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_listCluster(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::ListClusterInfoResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_listCluster(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_getMetaDirInfo(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_getMetaDirInfo(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_getMetaDirInfo(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::GetMetaDirInfoResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_getMetaDirInfo(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_verifyClientVersion(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_verifyClientVersion(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_verifyClientVersion(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::nebula::meta::cpp2::VerifyClientVersionResp const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_verifyClientVersion(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
 public:
  MetaServiceAsyncProcessor(MetaServiceSvIf* iface) :
      iface_(iface) {}

  virtual ~MetaServiceAsyncProcessor() {}
};

}}} // nebula::meta::cpp2
