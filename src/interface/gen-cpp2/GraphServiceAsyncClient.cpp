/**
 * Autogenerated by Thrift for graph.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include "GraphServiceAsyncClient.h"

#include <thrift/lib/cpp2/gen/client_cpp.h>

namespace nebula { namespace graph { namespace cpp2 {
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, ::apache::thrift::type_class::binary, ::std::string*>, apache::thrift::FieldData<2, ::apache::thrift::type_class::binary, ::std::string*>> GraphService_authenticate_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, ::apache::thrift::type_class::structure, nebula::AuthResponse*>> GraphService_authenticate_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, ::apache::thrift::type_class::integral, int64_t*>> GraphService_signout_pargs;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, ::apache::thrift::type_class::integral, int64_t*>, apache::thrift::FieldData<2, ::apache::thrift::type_class::binary, ::std::string*>> GraphService_execute_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, ::apache::thrift::type_class::structure, nebula::ExecutionResponse*>> GraphService_execute_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, ::apache::thrift::type_class::integral, int64_t*>, apache::thrift::FieldData<2, ::apache::thrift::type_class::binary, ::std::string*>> GraphService_executeJson_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, ::apache::thrift::type_class::binary, ::std::string*>> GraphService_executeJson_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, ::apache::thrift::type_class::structure, nebula::VerifyClientVersionReq*>> GraphService_verifyClientVersion_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, ::apache::thrift::type_class::structure, nebula::VerifyClientVersionResp*>> GraphService_verifyClientVersion_presult;

template <typename Protocol_>
void GraphServiceAsyncClient::authenticateT(Protocol_* prot, apache::thrift::RpcOptions rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const ::std::string& p_username, const ::std::string& p_password) {

  std::shared_ptr<apache::thrift::transport::THeader> header(ctx, &ctx->header);
  GraphService_authenticate_pargs args;
  args.get<0>().value = const_cast<::std::string*>(&p_username);
  args.get<1>().value = const_cast<::std::string*>(&p_password);
  auto sizer = [&](Protocol_* p) { return args.serializedSizeZC(p); };
  auto writer = [&](Protocol_* p) { args.write(p); };
  static constexpr const folly::StringPiece methodName = "authenticate";
  apache::thrift::clientSendT<apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, Protocol_>(prot, std::move(rpcOptions), std::move(callback), ctx->ctx, std::move(header), channel_.get(), apache::thrift::ManagedStringView(methodName, false), writer, sizer);
  ctx->reqContext.setRequestHeader(nullptr);
}

template <typename Protocol_>
void GraphServiceAsyncClient::signoutT(Protocol_* prot, apache::thrift::RpcOptions rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, int64_t p_sessionId) {

  std::shared_ptr<apache::thrift::transport::THeader> header(ctx, &ctx->header);
  GraphService_signout_pargs args;
  args.get<0>().value = &p_sessionId;
  auto sizer = [&](Protocol_* p) { return args.serializedSizeZC(p); };
  auto writer = [&](Protocol_* p) { args.write(p); };
  static constexpr const folly::StringPiece methodName = "signout";
  apache::thrift::clientSendT<apache::thrift::RpcKind::SINGLE_REQUEST_NO_RESPONSE, Protocol_>(prot, std::move(rpcOptions), std::move(callback), ctx->ctx, std::move(header), channel_.get(), apache::thrift::ManagedStringView(methodName, false), writer, sizer);
  ctx->reqContext.setRequestHeader(nullptr);
}

template <typename Protocol_>
void GraphServiceAsyncClient::executeT(Protocol_* prot, apache::thrift::RpcOptions rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, int64_t p_sessionId, const ::std::string& p_stmt) {

  std::shared_ptr<apache::thrift::transport::THeader> header(ctx, &ctx->header);
  GraphService_execute_pargs args;
  args.get<0>().value = &p_sessionId;
  args.get<1>().value = const_cast<::std::string*>(&p_stmt);
  auto sizer = [&](Protocol_* p) { return args.serializedSizeZC(p); };
  auto writer = [&](Protocol_* p) { args.write(p); };
  static constexpr const folly::StringPiece methodName = "execute";
  apache::thrift::clientSendT<apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, Protocol_>(prot, std::move(rpcOptions), std::move(callback), ctx->ctx, std::move(header), channel_.get(), apache::thrift::ManagedStringView(methodName, false), writer, sizer);
  ctx->reqContext.setRequestHeader(nullptr);
}

template <typename Protocol_>
void GraphServiceAsyncClient::executeJsonT(Protocol_* prot, apache::thrift::RpcOptions rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, int64_t p_sessionId, const ::std::string& p_stmt) {

  std::shared_ptr<apache::thrift::transport::THeader> header(ctx, &ctx->header);
  GraphService_executeJson_pargs args;
  args.get<0>().value = &p_sessionId;
  args.get<1>().value = const_cast<::std::string*>(&p_stmt);
  auto sizer = [&](Protocol_* p) { return args.serializedSizeZC(p); };
  auto writer = [&](Protocol_* p) { args.write(p); };
  static constexpr const folly::StringPiece methodName = "executeJson";
  apache::thrift::clientSendT<apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, Protocol_>(prot, std::move(rpcOptions), std::move(callback), ctx->ctx, std::move(header), channel_.get(), apache::thrift::ManagedStringView(methodName, false), writer, sizer);
  ctx->reqContext.setRequestHeader(nullptr);
}

template <typename Protocol_>
void GraphServiceAsyncClient::verifyClientVersionT(Protocol_* prot, apache::thrift::RpcOptions rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const nebula::VerifyClientVersionReq& p_req) {

  std::shared_ptr<apache::thrift::transport::THeader> header(ctx, &ctx->header);
  GraphService_verifyClientVersion_pargs args;
  args.get<0>().value = const_cast<nebula::VerifyClientVersionReq*>(&p_req);
  auto sizer = [&](Protocol_* p) { return args.serializedSizeZC(p); };
  auto writer = [&](Protocol_* p) { args.write(p); };
  static constexpr const folly::StringPiece methodName = "verifyClientVersion";
  apache::thrift::clientSendT<apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, Protocol_>(prot, std::move(rpcOptions), std::move(callback), ctx->ctx, std::move(header), channel_.get(), apache::thrift::ManagedStringView(methodName, false), writer, sizer);
  ctx->reqContext.setRequestHeader(nullptr);
}



void GraphServiceAsyncClient::authenticate(std::unique_ptr<apache::thrift::RequestCallback> callback, const ::std::string& p_username, const ::std::string& p_password) {
  ::apache::thrift::RpcOptions rpcOptions;
  authenticate(rpcOptions, std::move(callback), p_username, p_password);
}

void GraphServiceAsyncClient::authenticate(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const ::std::string& p_username, const ::std::string& p_password) {
  auto ctx = authenticateCtx(&rpcOptions);
  apache::thrift::RequestCallback::Context callbackContext;
  callbackContext.protocolId =
      apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
  callbackContext.ctx = std::shared_ptr<apache::thrift::ContextStack>(ctx, &ctx->ctx);
  auto wrappedCallback = apache::thrift::toRequestClientCallbackPtr(std::move(callback), std::move(callbackContext));
  authenticateImpl(rpcOptions, std::move(ctx), std::move(wrappedCallback), p_username, p_password);
}

void GraphServiceAsyncClient::authenticateImpl(const apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const ::std::string& p_username, const ::std::string& p_password) {
  switch (apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      authenticateT(&writer, rpcOptions, std::move(ctx), std::move(callback), p_username, p_password);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      authenticateT(&writer, rpcOptions, std::move(ctx), std::move(callback), p_username, p_password);
      break;
    }
    default:
    {
      apache::thrift::detail::ac::throw_app_exn("Could not find Protocol");
    }
  }
}

std::shared_ptr<::apache::thrift::detail::ac::ClientRequestContext> GraphServiceAsyncClient::authenticateCtx(apache::thrift::RpcOptions* rpcOptions) {
  return std::make_shared<apache::thrift::detail::ac::ClientRequestContext>(
      channel_->getProtocolId(),
      rpcOptions ? rpcOptions->releaseWriteHeaders() : std::map<std::string, std::string>{},
      handlers_,
      getServiceName(),
      "GraphService.authenticate");
}

void GraphServiceAsyncClient::sync_authenticate(nebula::AuthResponse& _return, const ::std::string& p_username, const ::std::string& p_password) {
  ::apache::thrift::RpcOptions rpcOptions;
  sync_authenticate(rpcOptions, _return, p_username, p_password);
}

void GraphServiceAsyncClient::sync_authenticate(apache::thrift::RpcOptions& rpcOptions, nebula::AuthResponse& _return, const ::std::string& p_username, const ::std::string& p_password) {
  apache::thrift::ClientReceiveState returnState;
  apache::thrift::ClientSyncCallback<false> callback(&returnState);
  auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
  auto evb = apache::thrift::GeneratedAsyncClient::getChannel()->getEventBase();
  auto ctx = authenticateCtx(&rpcOptions);
  auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(&callback);
  authenticateImpl(rpcOptions, ctx, std::move(wrappedCallback), p_username, p_password);
  callback.waitUntilDone(evb);

  if (returnState.isException()) {
    returnState.exception().throw_exception();
  }
  returnState.resetProtocolId(protocolId);
  returnState.resetCtx(std::shared_ptr<apache::thrift::ContextStack>(ctx, &ctx->ctx));
  SCOPE_EXIT {
    if (returnState.header() && !returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(returnState.header()->releaseHeaders());
    }
  };
  return folly::fibers::runInMainContext([&] {
      recv_authenticate(_return, returnState);
  });
}


folly::Future<nebula::AuthResponse> GraphServiceAsyncClient::future_authenticate(const ::std::string& p_username, const ::std::string& p_password) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_authenticate(rpcOptions, p_username, p_password);
}

folly::SemiFuture<nebula::AuthResponse> GraphServiceAsyncClient::semifuture_authenticate(const ::std::string& p_username, const ::std::string& p_password) {
  ::apache::thrift::RpcOptions rpcOptions;
  return semifuture_authenticate(rpcOptions, p_username, p_password);
}

folly::Future<nebula::AuthResponse> GraphServiceAsyncClient::future_authenticate(apache::thrift::RpcOptions& rpcOptions, const ::std::string& p_username, const ::std::string& p_password) {
  folly::Promise<nebula::AuthResponse> promise;
  auto future = promise.getFuture();
  auto callback = std::make_unique<apache::thrift::FutureCallback<nebula::AuthResponse>>(std::move(promise), recv_wrapped_authenticate, channel_);
  authenticate(rpcOptions, std::move(callback), p_username, p_password);
  return future;
}

folly::SemiFuture<nebula::AuthResponse> GraphServiceAsyncClient::semifuture_authenticate(apache::thrift::RpcOptions& rpcOptions, const ::std::string& p_username, const ::std::string& p_password) {
  auto callbackAndFuture = makeSemiFutureCallback(recv_wrapped_authenticate, channel_);
  auto callback = std::move(callbackAndFuture.first);
  authenticate(rpcOptions, std::move(callback), p_username, p_password);
  return std::move(callbackAndFuture.second);
}

folly::Future<std::pair<nebula::AuthResponse, std::unique_ptr<apache::thrift::transport::THeader>>> GraphServiceAsyncClient::header_future_authenticate(apache::thrift::RpcOptions& rpcOptions, const ::std::string& p_username, const ::std::string& p_password) {
  folly::Promise<std::pair<nebula::AuthResponse, std::unique_ptr<apache::thrift::transport::THeader>>> promise;
  auto future = promise.getFuture();
  auto callback = std::make_unique<apache::thrift::HeaderFutureCallback<nebula::AuthResponse>>(std::move(promise), recv_wrapped_authenticate, channel_);
  authenticate(rpcOptions, std::move(callback), p_username, p_password);
  return future;
}

folly::SemiFuture<std::pair<nebula::AuthResponse, std::unique_ptr<apache::thrift::transport::THeader>>> GraphServiceAsyncClient::header_semifuture_authenticate(apache::thrift::RpcOptions& rpcOptions, const ::std::string& p_username, const ::std::string& p_password) {
  auto callbackAndFuture = makeHeaderSemiFutureCallback(recv_wrapped_authenticate, channel_);
  auto callback = std::move(callbackAndFuture.first);
  authenticate(rpcOptions, std::move(callback), p_username, p_password);
  return std::move(callbackAndFuture.second);
}

void GraphServiceAsyncClient::authenticate(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const ::std::string& p_username, const ::std::string& p_password) {
  authenticate(std::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)), p_username, p_password);
}

#if FOLLY_HAS_COROUTINES
#endif // FOLLY_HAS_COROUTINES
folly::exception_wrapper GraphServiceAsyncClient::recv_wrapped_authenticate(nebula::AuthResponse& _return, ::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }

  using result = GraphService_authenticate_presult;
  constexpr auto const fname = "authenticate";
  switch (state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state, _return);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state, _return);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void GraphServiceAsyncClient::recv_authenticate(nebula::AuthResponse& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_authenticate(_return, state);
  if (ew) {
    ew.throw_exception();
  }
}

void GraphServiceAsyncClient::recv_instance_authenticate(nebula::AuthResponse& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_authenticate(_return, state);
}

folly::exception_wrapper GraphServiceAsyncClient::recv_instance_wrapped_authenticate(nebula::AuthResponse& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_authenticate(_return, state);
}

void GraphServiceAsyncClient::signout(std::unique_ptr<apache::thrift::RequestCallback> callback, int64_t p_sessionId) {
  ::apache::thrift::RpcOptions rpcOptions;
  signout(rpcOptions, std::move(callback), p_sessionId);
}

void GraphServiceAsyncClient::signout(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int64_t p_sessionId) {
  auto ctx = signoutCtx(&rpcOptions);
  apache::thrift::RequestCallback::Context callbackContext;
  callbackContext.oneWay = true;
  callbackContext.protocolId =
      apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
  callbackContext.ctx = std::shared_ptr<apache::thrift::ContextStack>(ctx, &ctx->ctx);
  auto wrappedCallback = apache::thrift::toRequestClientCallbackPtr(std::move(callback), std::move(callbackContext));
  signoutImpl(rpcOptions, std::move(ctx), std::move(wrappedCallback), p_sessionId);
}

void GraphServiceAsyncClient::signoutImpl(const apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, int64_t p_sessionId) {
  switch (apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      signoutT(&writer, rpcOptions, std::move(ctx), std::move(callback), p_sessionId);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      signoutT(&writer, rpcOptions, std::move(ctx), std::move(callback), p_sessionId);
      break;
    }
    default:
    {
      apache::thrift::detail::ac::throw_app_exn("Could not find Protocol");
    }
  }
}

std::shared_ptr<::apache::thrift::detail::ac::ClientRequestContext> GraphServiceAsyncClient::signoutCtx(apache::thrift::RpcOptions* rpcOptions) {
  return std::make_shared<apache::thrift::detail::ac::ClientRequestContext>(
      channel_->getProtocolId(),
      rpcOptions ? rpcOptions->releaseWriteHeaders() : std::map<std::string, std::string>{},
      handlers_,
      getServiceName(),
      "GraphService.signout");
}

void GraphServiceAsyncClient::sync_signout(int64_t p_sessionId) {
  ::apache::thrift::RpcOptions rpcOptions;
  sync_signout(rpcOptions, p_sessionId);
}

void GraphServiceAsyncClient::sync_signout(apache::thrift::RpcOptions& rpcOptions, int64_t p_sessionId) {
  apache::thrift::ClientReceiveState returnState;
  apache::thrift::ClientSyncCallback<true> callback(&returnState);
  auto evb = apache::thrift::GeneratedAsyncClient::getChannel()->getEventBase();
  auto ctx = signoutCtx(&rpcOptions);
  auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(&callback);
  signoutImpl(rpcOptions, ctx, std::move(wrappedCallback), p_sessionId);
  callback.waitUntilDone(evb);

  if (returnState.isException()) {
    returnState.exception().throw_exception();
  }
}


folly::Future<folly::Unit> GraphServiceAsyncClient::future_signout(int64_t p_sessionId) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_signout(rpcOptions, p_sessionId);
}

folly::SemiFuture<folly::Unit> GraphServiceAsyncClient::semifuture_signout(int64_t p_sessionId) {
  ::apache::thrift::RpcOptions rpcOptions;
  return semifuture_signout(rpcOptions, p_sessionId);
}

folly::Future<folly::Unit> GraphServiceAsyncClient::future_signout(apache::thrift::RpcOptions& rpcOptions, int64_t p_sessionId) {
  folly::Promise<folly::Unit> promise;
  auto future = promise.getFuture();
  auto callback = std::make_unique<apache::thrift::OneWayFutureCallback>(std::move(promise), channel_);
  signout(rpcOptions, std::move(callback), p_sessionId);
  return future;
}

folly::SemiFuture<folly::Unit> GraphServiceAsyncClient::semifuture_signout(apache::thrift::RpcOptions& rpcOptions, int64_t p_sessionId) {
  auto callbackAndFuture = makeOneWaySemiFutureCallback(channel_);
  auto callback = std::move(callbackAndFuture.first);
  signout(rpcOptions, std::move(callback), p_sessionId);
  return std::move(callbackAndFuture.second);
}


void GraphServiceAsyncClient::signout(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, int64_t p_sessionId) {
  signout(std::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)), p_sessionId);
}

#if FOLLY_HAS_COROUTINES
#endif // FOLLY_HAS_COROUTINES
void GraphServiceAsyncClient::execute(std::unique_ptr<apache::thrift::RequestCallback> callback, int64_t p_sessionId, const ::std::string& p_stmt) {
  ::apache::thrift::RpcOptions rpcOptions;
  execute(rpcOptions, std::move(callback), p_sessionId, p_stmt);
}

void GraphServiceAsyncClient::execute(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int64_t p_sessionId, const ::std::string& p_stmt) {
  auto ctx = executeCtx(&rpcOptions);
  apache::thrift::RequestCallback::Context callbackContext;
  callbackContext.protocolId =
      apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
  callbackContext.ctx = std::shared_ptr<apache::thrift::ContextStack>(ctx, &ctx->ctx);
  auto wrappedCallback = apache::thrift::toRequestClientCallbackPtr(std::move(callback), std::move(callbackContext));
  executeImpl(rpcOptions, std::move(ctx), std::move(wrappedCallback), p_sessionId, p_stmt);
}

void GraphServiceAsyncClient::executeImpl(const apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, int64_t p_sessionId, const ::std::string& p_stmt) {
  switch (apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      executeT(&writer, rpcOptions, std::move(ctx), std::move(callback), p_sessionId, p_stmt);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      executeT(&writer, rpcOptions, std::move(ctx), std::move(callback), p_sessionId, p_stmt);
      break;
    }
    default:
    {
      apache::thrift::detail::ac::throw_app_exn("Could not find Protocol");
    }
  }
}

std::shared_ptr<::apache::thrift::detail::ac::ClientRequestContext> GraphServiceAsyncClient::executeCtx(apache::thrift::RpcOptions* rpcOptions) {
  return std::make_shared<apache::thrift::detail::ac::ClientRequestContext>(
      channel_->getProtocolId(),
      rpcOptions ? rpcOptions->releaseWriteHeaders() : std::map<std::string, std::string>{},
      handlers_,
      getServiceName(),
      "GraphService.execute");
}

void GraphServiceAsyncClient::sync_execute(nebula::ExecutionResponse& _return, int64_t p_sessionId, const ::std::string& p_stmt) {
  ::apache::thrift::RpcOptions rpcOptions;
  sync_execute(rpcOptions, _return, p_sessionId, p_stmt);
}

void GraphServiceAsyncClient::sync_execute(apache::thrift::RpcOptions& rpcOptions, nebula::ExecutionResponse& _return, int64_t p_sessionId, const ::std::string& p_stmt) {
  apache::thrift::ClientReceiveState returnState;
  apache::thrift::ClientSyncCallback<false> callback(&returnState);
  auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
  auto evb = apache::thrift::GeneratedAsyncClient::getChannel()->getEventBase();
  auto ctx = executeCtx(&rpcOptions);
  auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(&callback);
  executeImpl(rpcOptions, ctx, std::move(wrappedCallback), p_sessionId, p_stmt);
  callback.waitUntilDone(evb);

  if (returnState.isException()) {
    returnState.exception().throw_exception();
  }
  returnState.resetProtocolId(protocolId);
  returnState.resetCtx(std::shared_ptr<apache::thrift::ContextStack>(ctx, &ctx->ctx));
  SCOPE_EXIT {
    if (returnState.header() && !returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(returnState.header()->releaseHeaders());
    }
  };
  return folly::fibers::runInMainContext([&] {
      recv_execute(_return, returnState);
  });
}


folly::Future<nebula::ExecutionResponse> GraphServiceAsyncClient::future_execute(int64_t p_sessionId, const ::std::string& p_stmt) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_execute(rpcOptions, p_sessionId, p_stmt);
}

folly::SemiFuture<nebula::ExecutionResponse> GraphServiceAsyncClient::semifuture_execute(int64_t p_sessionId, const ::std::string& p_stmt) {
  ::apache::thrift::RpcOptions rpcOptions;
  return semifuture_execute(rpcOptions, p_sessionId, p_stmt);
}

folly::Future<nebula::ExecutionResponse> GraphServiceAsyncClient::future_execute(apache::thrift::RpcOptions& rpcOptions, int64_t p_sessionId, const ::std::string& p_stmt) {
  folly::Promise<nebula::ExecutionResponse> promise;
  auto future = promise.getFuture();
  auto callback = std::make_unique<apache::thrift::FutureCallback<nebula::ExecutionResponse>>(std::move(promise), recv_wrapped_execute, channel_);
  execute(rpcOptions, std::move(callback), p_sessionId, p_stmt);
  return future;
}

folly::SemiFuture<nebula::ExecutionResponse> GraphServiceAsyncClient::semifuture_execute(apache::thrift::RpcOptions& rpcOptions, int64_t p_sessionId, const ::std::string& p_stmt) {
  auto callbackAndFuture = makeSemiFutureCallback(recv_wrapped_execute, channel_);
  auto callback = std::move(callbackAndFuture.first);
  execute(rpcOptions, std::move(callback), p_sessionId, p_stmt);
  return std::move(callbackAndFuture.second);
}

folly::Future<std::pair<nebula::ExecutionResponse, std::unique_ptr<apache::thrift::transport::THeader>>> GraphServiceAsyncClient::header_future_execute(apache::thrift::RpcOptions& rpcOptions, int64_t p_sessionId, const ::std::string& p_stmt) {
  folly::Promise<std::pair<nebula::ExecutionResponse, std::unique_ptr<apache::thrift::transport::THeader>>> promise;
  auto future = promise.getFuture();
  auto callback = std::make_unique<apache::thrift::HeaderFutureCallback<nebula::ExecutionResponse>>(std::move(promise), recv_wrapped_execute, channel_);
  execute(rpcOptions, std::move(callback), p_sessionId, p_stmt);
  return future;
}

folly::SemiFuture<std::pair<nebula::ExecutionResponse, std::unique_ptr<apache::thrift::transport::THeader>>> GraphServiceAsyncClient::header_semifuture_execute(apache::thrift::RpcOptions& rpcOptions, int64_t p_sessionId, const ::std::string& p_stmt) {
  auto callbackAndFuture = makeHeaderSemiFutureCallback(recv_wrapped_execute, channel_);
  auto callback = std::move(callbackAndFuture.first);
  execute(rpcOptions, std::move(callback), p_sessionId, p_stmt);
  return std::move(callbackAndFuture.second);
}

void GraphServiceAsyncClient::execute(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, int64_t p_sessionId, const ::std::string& p_stmt) {
  execute(std::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)), p_sessionId, p_stmt);
}

#if FOLLY_HAS_COROUTINES
#endif // FOLLY_HAS_COROUTINES
folly::exception_wrapper GraphServiceAsyncClient::recv_wrapped_execute(nebula::ExecutionResponse& _return, ::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }

  using result = GraphService_execute_presult;
  constexpr auto const fname = "execute";
  switch (state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state, _return);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state, _return);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void GraphServiceAsyncClient::recv_execute(nebula::ExecutionResponse& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_execute(_return, state);
  if (ew) {
    ew.throw_exception();
  }
}

void GraphServiceAsyncClient::recv_instance_execute(nebula::ExecutionResponse& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_execute(_return, state);
}

folly::exception_wrapper GraphServiceAsyncClient::recv_instance_wrapped_execute(nebula::ExecutionResponse& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_execute(_return, state);
}

void GraphServiceAsyncClient::executeJson(std::unique_ptr<apache::thrift::RequestCallback> callback, int64_t p_sessionId, const ::std::string& p_stmt) {
  ::apache::thrift::RpcOptions rpcOptions;
  executeJson(rpcOptions, std::move(callback), p_sessionId, p_stmt);
}

void GraphServiceAsyncClient::executeJson(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int64_t p_sessionId, const ::std::string& p_stmt) {
  auto ctx = executeJsonCtx(&rpcOptions);
  apache::thrift::RequestCallback::Context callbackContext;
  callbackContext.protocolId =
      apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
  callbackContext.ctx = std::shared_ptr<apache::thrift::ContextStack>(ctx, &ctx->ctx);
  auto wrappedCallback = apache::thrift::toRequestClientCallbackPtr(std::move(callback), std::move(callbackContext));
  executeJsonImpl(rpcOptions, std::move(ctx), std::move(wrappedCallback), p_sessionId, p_stmt);
}

void GraphServiceAsyncClient::executeJsonImpl(const apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, int64_t p_sessionId, const ::std::string& p_stmt) {
  switch (apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      executeJsonT(&writer, rpcOptions, std::move(ctx), std::move(callback), p_sessionId, p_stmt);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      executeJsonT(&writer, rpcOptions, std::move(ctx), std::move(callback), p_sessionId, p_stmt);
      break;
    }
    default:
    {
      apache::thrift::detail::ac::throw_app_exn("Could not find Protocol");
    }
  }
}

std::shared_ptr<::apache::thrift::detail::ac::ClientRequestContext> GraphServiceAsyncClient::executeJsonCtx(apache::thrift::RpcOptions* rpcOptions) {
  return std::make_shared<apache::thrift::detail::ac::ClientRequestContext>(
      channel_->getProtocolId(),
      rpcOptions ? rpcOptions->releaseWriteHeaders() : std::map<std::string, std::string>{},
      handlers_,
      getServiceName(),
      "GraphService.executeJson");
}

void GraphServiceAsyncClient::sync_executeJson(::std::string& _return, int64_t p_sessionId, const ::std::string& p_stmt) {
  ::apache::thrift::RpcOptions rpcOptions;
  sync_executeJson(rpcOptions, _return, p_sessionId, p_stmt);
}

void GraphServiceAsyncClient::sync_executeJson(apache::thrift::RpcOptions& rpcOptions, ::std::string& _return, int64_t p_sessionId, const ::std::string& p_stmt) {
  apache::thrift::ClientReceiveState returnState;
  apache::thrift::ClientSyncCallback<false> callback(&returnState);
  auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
  auto evb = apache::thrift::GeneratedAsyncClient::getChannel()->getEventBase();
  auto ctx = executeJsonCtx(&rpcOptions);
  auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(&callback);
  executeJsonImpl(rpcOptions, ctx, std::move(wrappedCallback), p_sessionId, p_stmt);
  callback.waitUntilDone(evb);

  if (returnState.isException()) {
    returnState.exception().throw_exception();
  }
  returnState.resetProtocolId(protocolId);
  returnState.resetCtx(std::shared_ptr<apache::thrift::ContextStack>(ctx, &ctx->ctx));
  SCOPE_EXIT {
    if (returnState.header() && !returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(returnState.header()->releaseHeaders());
    }
  };
  return folly::fibers::runInMainContext([&] {
      recv_executeJson(_return, returnState);
  });
}


folly::Future<::std::string> GraphServiceAsyncClient::future_executeJson(int64_t p_sessionId, const ::std::string& p_stmt) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_executeJson(rpcOptions, p_sessionId, p_stmt);
}

folly::SemiFuture<::std::string> GraphServiceAsyncClient::semifuture_executeJson(int64_t p_sessionId, const ::std::string& p_stmt) {
  ::apache::thrift::RpcOptions rpcOptions;
  return semifuture_executeJson(rpcOptions, p_sessionId, p_stmt);
}

folly::Future<::std::string> GraphServiceAsyncClient::future_executeJson(apache::thrift::RpcOptions& rpcOptions, int64_t p_sessionId, const ::std::string& p_stmt) {
  folly::Promise<::std::string> promise;
  auto future = promise.getFuture();
  auto callback = std::make_unique<apache::thrift::FutureCallback<::std::string>>(std::move(promise), recv_wrapped_executeJson, channel_);
  executeJson(rpcOptions, std::move(callback), p_sessionId, p_stmt);
  return future;
}

folly::SemiFuture<::std::string> GraphServiceAsyncClient::semifuture_executeJson(apache::thrift::RpcOptions& rpcOptions, int64_t p_sessionId, const ::std::string& p_stmt) {
  auto callbackAndFuture = makeSemiFutureCallback(recv_wrapped_executeJson, channel_);
  auto callback = std::move(callbackAndFuture.first);
  executeJson(rpcOptions, std::move(callback), p_sessionId, p_stmt);
  return std::move(callbackAndFuture.second);
}

folly::Future<std::pair<::std::string, std::unique_ptr<apache::thrift::transport::THeader>>> GraphServiceAsyncClient::header_future_executeJson(apache::thrift::RpcOptions& rpcOptions, int64_t p_sessionId, const ::std::string& p_stmt) {
  folly::Promise<std::pair<::std::string, std::unique_ptr<apache::thrift::transport::THeader>>> promise;
  auto future = promise.getFuture();
  auto callback = std::make_unique<apache::thrift::HeaderFutureCallback<::std::string>>(std::move(promise), recv_wrapped_executeJson, channel_);
  executeJson(rpcOptions, std::move(callback), p_sessionId, p_stmt);
  return future;
}

folly::SemiFuture<std::pair<::std::string, std::unique_ptr<apache::thrift::transport::THeader>>> GraphServiceAsyncClient::header_semifuture_executeJson(apache::thrift::RpcOptions& rpcOptions, int64_t p_sessionId, const ::std::string& p_stmt) {
  auto callbackAndFuture = makeHeaderSemiFutureCallback(recv_wrapped_executeJson, channel_);
  auto callback = std::move(callbackAndFuture.first);
  executeJson(rpcOptions, std::move(callback), p_sessionId, p_stmt);
  return std::move(callbackAndFuture.second);
}

void GraphServiceAsyncClient::executeJson(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, int64_t p_sessionId, const ::std::string& p_stmt) {
  executeJson(std::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)), p_sessionId, p_stmt);
}

#if FOLLY_HAS_COROUTINES
#endif // FOLLY_HAS_COROUTINES
folly::exception_wrapper GraphServiceAsyncClient::recv_wrapped_executeJson(::std::string& _return, ::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }

  using result = GraphService_executeJson_presult;
  constexpr auto const fname = "executeJson";
  switch (state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state, _return);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state, _return);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void GraphServiceAsyncClient::recv_executeJson(::std::string& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_executeJson(_return, state);
  if (ew) {
    ew.throw_exception();
  }
}

void GraphServiceAsyncClient::recv_instance_executeJson(::std::string& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_executeJson(_return, state);
}

folly::exception_wrapper GraphServiceAsyncClient::recv_instance_wrapped_executeJson(::std::string& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_executeJson(_return, state);
}

void GraphServiceAsyncClient::verifyClientVersion(std::unique_ptr<apache::thrift::RequestCallback> callback, const nebula::VerifyClientVersionReq& p_req) {
  ::apache::thrift::RpcOptions rpcOptions;
  verifyClientVersion(rpcOptions, std::move(callback), p_req);
}

void GraphServiceAsyncClient::verifyClientVersion(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const nebula::VerifyClientVersionReq& p_req) {
  auto ctx = verifyClientVersionCtx(&rpcOptions);
  apache::thrift::RequestCallback::Context callbackContext;
  callbackContext.protocolId =
      apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
  callbackContext.ctx = std::shared_ptr<apache::thrift::ContextStack>(ctx, &ctx->ctx);
  auto wrappedCallback = apache::thrift::toRequestClientCallbackPtr(std::move(callback), std::move(callbackContext));
  verifyClientVersionImpl(rpcOptions, std::move(ctx), std::move(wrappedCallback), p_req);
}

void GraphServiceAsyncClient::verifyClientVersionImpl(const apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const nebula::VerifyClientVersionReq& p_req) {
  switch (apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      verifyClientVersionT(&writer, rpcOptions, std::move(ctx), std::move(callback), p_req);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      verifyClientVersionT(&writer, rpcOptions, std::move(ctx), std::move(callback), p_req);
      break;
    }
    default:
    {
      apache::thrift::detail::ac::throw_app_exn("Could not find Protocol");
    }
  }
}

std::shared_ptr<::apache::thrift::detail::ac::ClientRequestContext> GraphServiceAsyncClient::verifyClientVersionCtx(apache::thrift::RpcOptions* rpcOptions) {
  return std::make_shared<apache::thrift::detail::ac::ClientRequestContext>(
      channel_->getProtocolId(),
      rpcOptions ? rpcOptions->releaseWriteHeaders() : std::map<std::string, std::string>{},
      handlers_,
      getServiceName(),
      "GraphService.verifyClientVersion");
}

void GraphServiceAsyncClient::sync_verifyClientVersion(nebula::VerifyClientVersionResp& _return, const nebula::VerifyClientVersionReq& p_req) {
  ::apache::thrift::RpcOptions rpcOptions;
  sync_verifyClientVersion(rpcOptions, _return, p_req);
}

void GraphServiceAsyncClient::sync_verifyClientVersion(apache::thrift::RpcOptions& rpcOptions, nebula::VerifyClientVersionResp& _return, const nebula::VerifyClientVersionReq& p_req) {
  apache::thrift::ClientReceiveState returnState;
  apache::thrift::ClientSyncCallback<false> callback(&returnState);
  auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
  auto evb = apache::thrift::GeneratedAsyncClient::getChannel()->getEventBase();
  auto ctx = verifyClientVersionCtx(&rpcOptions);
  auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(&callback);
  verifyClientVersionImpl(rpcOptions, ctx, std::move(wrappedCallback), p_req);
  callback.waitUntilDone(evb);

  if (returnState.isException()) {
    returnState.exception().throw_exception();
  }
  returnState.resetProtocolId(protocolId);
  returnState.resetCtx(std::shared_ptr<apache::thrift::ContextStack>(ctx, &ctx->ctx));
  SCOPE_EXIT {
    if (returnState.header() && !returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(returnState.header()->releaseHeaders());
    }
  };
  return folly::fibers::runInMainContext([&] {
      recv_verifyClientVersion(_return, returnState);
  });
}


folly::Future<nebula::VerifyClientVersionResp> GraphServiceAsyncClient::future_verifyClientVersion(const nebula::VerifyClientVersionReq& p_req) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_verifyClientVersion(rpcOptions, p_req);
}

folly::SemiFuture<nebula::VerifyClientVersionResp> GraphServiceAsyncClient::semifuture_verifyClientVersion(const nebula::VerifyClientVersionReq& p_req) {
  ::apache::thrift::RpcOptions rpcOptions;
  return semifuture_verifyClientVersion(rpcOptions, p_req);
}

folly::Future<nebula::VerifyClientVersionResp> GraphServiceAsyncClient::future_verifyClientVersion(apache::thrift::RpcOptions& rpcOptions, const nebula::VerifyClientVersionReq& p_req) {
  folly::Promise<nebula::VerifyClientVersionResp> promise;
  auto future = promise.getFuture();
  auto callback = std::make_unique<apache::thrift::FutureCallback<nebula::VerifyClientVersionResp>>(std::move(promise), recv_wrapped_verifyClientVersion, channel_);
  verifyClientVersion(rpcOptions, std::move(callback), p_req);
  return future;
}

folly::SemiFuture<nebula::VerifyClientVersionResp> GraphServiceAsyncClient::semifuture_verifyClientVersion(apache::thrift::RpcOptions& rpcOptions, const nebula::VerifyClientVersionReq& p_req) {
  auto callbackAndFuture = makeSemiFutureCallback(recv_wrapped_verifyClientVersion, channel_);
  auto callback = std::move(callbackAndFuture.first);
  verifyClientVersion(rpcOptions, std::move(callback), p_req);
  return std::move(callbackAndFuture.second);
}

folly::Future<std::pair<nebula::VerifyClientVersionResp, std::unique_ptr<apache::thrift::transport::THeader>>> GraphServiceAsyncClient::header_future_verifyClientVersion(apache::thrift::RpcOptions& rpcOptions, const nebula::VerifyClientVersionReq& p_req) {
  folly::Promise<std::pair<nebula::VerifyClientVersionResp, std::unique_ptr<apache::thrift::transport::THeader>>> promise;
  auto future = promise.getFuture();
  auto callback = std::make_unique<apache::thrift::HeaderFutureCallback<nebula::VerifyClientVersionResp>>(std::move(promise), recv_wrapped_verifyClientVersion, channel_);
  verifyClientVersion(rpcOptions, std::move(callback), p_req);
  return future;
}

folly::SemiFuture<std::pair<nebula::VerifyClientVersionResp, std::unique_ptr<apache::thrift::transport::THeader>>> GraphServiceAsyncClient::header_semifuture_verifyClientVersion(apache::thrift::RpcOptions& rpcOptions, const nebula::VerifyClientVersionReq& p_req) {
  auto callbackAndFuture = makeHeaderSemiFutureCallback(recv_wrapped_verifyClientVersion, channel_);
  auto callback = std::move(callbackAndFuture.first);
  verifyClientVersion(rpcOptions, std::move(callback), p_req);
  return std::move(callbackAndFuture.second);
}

void GraphServiceAsyncClient::verifyClientVersion(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const nebula::VerifyClientVersionReq& p_req) {
  verifyClientVersion(std::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)), p_req);
}

#if FOLLY_HAS_COROUTINES
#endif // FOLLY_HAS_COROUTINES
folly::exception_wrapper GraphServiceAsyncClient::recv_wrapped_verifyClientVersion(nebula::VerifyClientVersionResp& _return, ::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }

  using result = GraphService_verifyClientVersion_presult;
  constexpr auto const fname = "verifyClientVersion";
  switch (state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state, _return);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state, _return);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void GraphServiceAsyncClient::recv_verifyClientVersion(nebula::VerifyClientVersionResp& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_verifyClientVersion(_return, state);
  if (ew) {
    ew.throw_exception();
  }
}

void GraphServiceAsyncClient::recv_instance_verifyClientVersion(nebula::VerifyClientVersionResp& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_verifyClientVersion(_return, state);
}

folly::exception_wrapper GraphServiceAsyncClient::recv_instance_wrapped_verifyClientVersion(nebula::VerifyClientVersionResp& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_verifyClientVersion(_return, state);
}


}}} // nebula::graph::cpp2
