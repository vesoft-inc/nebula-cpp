/**
 * Autogenerated by Thrift for common.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "common_types.h"

#include <thrift/lib/cpp2/gen/module_types_tcc.h>

namespace nebula { namespace cpp2 {

}} // nebula::cpp2
namespace std {

} // std

namespace nebula { namespace cpp2 {

}} // nebula::cpp2
namespace std {

} // std


namespace apache {
namespace thrift {
namespace detail {

template <>
struct TccStructTraits<::nebula::cpp2::SchemaID> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype) noexcept;
};
template <>
struct TccStructTraits<::nebula::cpp2::Date> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype) noexcept;
};
template <>
struct TccStructTraits<::nebula::cpp2::Time> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype) noexcept;
};
template <>
struct TccStructTraits<::nebula::cpp2::DateTime> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype) noexcept;
};
template <>
struct TccStructTraits<::nebula::cpp2::Value> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype) noexcept;
};
template <>
struct TccStructTraits<::nebula::cpp2::NList> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype) noexcept;
};
template <>
struct TccStructTraits<::nebula::cpp2::NMap> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype) noexcept;
};
template <>
struct TccStructTraits<::nebula::cpp2::NSet> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype) noexcept;
};
template <>
struct TccStructTraits<::nebula::cpp2::Row> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype) noexcept;
};
template <>
struct TccStructTraits<::nebula::cpp2::DataSet> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype) noexcept;
};
template <>
struct TccStructTraits<::nebula::cpp2::Geography> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype) noexcept;
};
template <>
struct TccStructTraits<::nebula::cpp2::Tag> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype) noexcept;
};
template <>
struct TccStructTraits<::nebula::cpp2::Vertex> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype) noexcept;
};
template <>
struct TccStructTraits<::nebula::cpp2::Edge> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype) noexcept;
};
template <>
struct TccStructTraits<::nebula::cpp2::Step> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype) noexcept;
};
template <>
struct TccStructTraits<::nebula::cpp2::Path> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype) noexcept;
};
template <>
struct TccStructTraits<::nebula::cpp2::HostAddr> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype) noexcept;
};
template <>
struct TccStructTraits<::nebula::cpp2::KeyValue> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype) noexcept;
};
template <>
struct TccStructTraits<::nebula::cpp2::LogInfo> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype) noexcept;
};
template <>
struct TccStructTraits<::nebula::cpp2::DirInfo> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype) noexcept;
};
template <>
struct TccStructTraits<::nebula::cpp2::NodeInfo> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype) noexcept;
};
template <>
struct TccStructTraits<::nebula::cpp2::PartitionBackupInfo> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype) noexcept;
};
template <>
struct TccStructTraits<::nebula::cpp2::CheckpointInfo> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype) noexcept;
};

} // namespace detail
} // namespace thrift
} // namespace apache

namespace nebula { namespace cpp2 {

template <class Protocol_>
void SchemaID::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;
  _readState.fieldId = 0;

  _readState.readStructBegin(iprot);

  _readState.readFieldBegin(iprot);
  if (_readState.atStop()) {
    this->__clear();
  } else {
    if (iprot->kUsesFieldNames()) {
      _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<SchemaID>>();
    }
    switch (_readState.fieldId) {
      case 1:
      {
        if (_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I32)) {
          this->set_tag_id();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::nebula::cpp2::TagID>::readWithContext(*iprot, this->mutable_tag_id(), _readState);
        } else {
          _readState.skip(iprot);
        }
        break;
      }
      case 2:
      {
        if (_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I32)) {
          this->set_edge_type();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::nebula::cpp2::EdgeType>::readWithContext(*iprot, this->mutable_edge_type(), _readState);
        } else {
          _readState.skip(iprot);
        }
        break;
      }
      default:
      {
        _readState.skip(iprot);
        break;
      }
    }
    _readState.readFieldEnd(iprot);
    _readState.readFieldBegin(iprot);
    if (UNLIKELY(!_readState.atStop())) {
      using apache::thrift::protocol::TProtocolException;
      TProtocolException::throwUnionMissingStop();
    }
  }
  _readState.readStructEnd(iprot);
}
template <class Protocol_>
uint32_t SchemaID::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("SchemaID");
  switch(this->getType()) {
    case SchemaID::Type::tag_id:
    {
      xfer += prot_->serializedFieldSize("tag_id", apache::thrift::protocol::T_I32, 1);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::nebula::cpp2::TagID>::serializedSize<false>(*prot_, this->get_tag_id());
      break;
    }
    case SchemaID::Type::edge_type:
    {
      xfer += prot_->serializedFieldSize("edge_type", apache::thrift::protocol::T_I32, 2);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::nebula::cpp2::EdgeType>::serializedSize<false>(*prot_, this->get_edge_type());
      break;
    }
    case SchemaID::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t SchemaID::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("SchemaID");
  switch(this->getType()) {
    case SchemaID::Type::tag_id:
    {
      xfer += prot_->serializedFieldSize("tag_id", apache::thrift::protocol::T_I32, 1);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::nebula::cpp2::TagID>::serializedSize<false>(*prot_, this->get_tag_id());
      break;
    }
    case SchemaID::Type::edge_type:
    {
      xfer += prot_->serializedFieldSize("edge_type", apache::thrift::protocol::T_I32, 2);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::nebula::cpp2::EdgeType>::serializedSize<false>(*prot_, this->get_edge_type());
      break;
    }
    case SchemaID::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t SchemaID::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("SchemaID");
  switch(this->getType()) {
    case SchemaID::Type::tag_id:
    {
      xfer += prot_->writeFieldBegin("tag_id", apache::thrift::protocol::T_I32, 1);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::nebula::cpp2::TagID>::write(*prot_, this->get_tag_id());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case SchemaID::Type::edge_type:
    {
      xfer += prot_->writeFieldBegin("edge_type", apache::thrift::protocol::T_I32, 2);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::nebula::cpp2::EdgeType>::write(*prot_, this->get_edge_type());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case SchemaID::Type::__EMPTY__:;
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void SchemaID::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t SchemaID::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t SchemaID::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t SchemaID::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void SchemaID::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t SchemaID::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t SchemaID::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t SchemaID::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // nebula::cpp2
namespace nebula { namespace cpp2 {

template <class Protocol_>
void Date::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_I16))) {
    goto _loop;
  }
_readField_year:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int16_t>::readWithContext(*iprot, this->year, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.year = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_BYTE))) {
    goto _loop;
  }
_readField_month:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::readWithContext(*iprot, this->month, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.month = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          3,
          apache::thrift::protocol::T_BYTE))) {
    goto _loop;
  }
_readField_day:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::readWithContext(*iprot, this->day, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.day = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          3,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<Date>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I16))) {
        goto _readField_year;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_BYTE))) {
        goto _readField_month;
      } else {
        goto _skip;
      }
    }
    case 3:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_BYTE))) {
        goto _readField_day;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t Date::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Date");
  xfer += prot_->serializedFieldSize("year", apache::thrift::protocol::T_I16, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int16_t>::serializedSize<false>(*prot_, this->year);
  xfer += prot_->serializedFieldSize("month", apache::thrift::protocol::T_BYTE, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::serializedSize<false>(*prot_, this->month);
  xfer += prot_->serializedFieldSize("day", apache::thrift::protocol::T_BYTE, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::serializedSize<false>(*prot_, this->day);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Date::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Date");
  xfer += prot_->serializedFieldSize("year", apache::thrift::protocol::T_I16, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int16_t>::serializedSize<false>(*prot_, this->year);
  xfer += prot_->serializedFieldSize("month", apache::thrift::protocol::T_BYTE, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::serializedSize<false>(*prot_, this->month);
  xfer += prot_->serializedFieldSize("day", apache::thrift::protocol::T_BYTE, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::serializedSize<false>(*prot_, this->day);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Date::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Date");
  xfer += prot_->writeFieldBegin("year", apache::thrift::protocol::T_I16, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int16_t>::write(*prot_, this->year);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("month", apache::thrift::protocol::T_BYTE, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::write(*prot_, this->month);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("day", apache::thrift::protocol::T_BYTE, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::write(*prot_, this->day);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void Date::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Date::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Date::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Date::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void Date::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Date::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Date::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Date::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // nebula::cpp2
namespace nebula { namespace cpp2 {

template <class Protocol_>
void Time::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_BYTE))) {
    goto _loop;
  }
_readField_hour:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::readWithContext(*iprot, this->hour, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.hour = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_BYTE))) {
    goto _loop;
  }
_readField_minute:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::readWithContext(*iprot, this->minute, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.minute = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          3,
          apache::thrift::protocol::T_BYTE))) {
    goto _loop;
  }
_readField_sec:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::readWithContext(*iprot, this->sec, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.sec = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          3,
          4,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_microsec:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::readWithContext(*iprot, this->microsec, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.microsec = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          4,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<Time>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_BYTE))) {
        goto _readField_hour;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_BYTE))) {
        goto _readField_minute;
      } else {
        goto _skip;
      }
    }
    case 3:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_BYTE))) {
        goto _readField_sec;
      } else {
        goto _skip;
      }
    }
    case 4:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I32))) {
        goto _readField_microsec;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t Time::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Time");
  xfer += prot_->serializedFieldSize("hour", apache::thrift::protocol::T_BYTE, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::serializedSize<false>(*prot_, this->hour);
  xfer += prot_->serializedFieldSize("minute", apache::thrift::protocol::T_BYTE, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::serializedSize<false>(*prot_, this->minute);
  xfer += prot_->serializedFieldSize("sec", apache::thrift::protocol::T_BYTE, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::serializedSize<false>(*prot_, this->sec);
  xfer += prot_->serializedFieldSize("microsec", apache::thrift::protocol::T_I32, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->microsec);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Time::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Time");
  xfer += prot_->serializedFieldSize("hour", apache::thrift::protocol::T_BYTE, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::serializedSize<false>(*prot_, this->hour);
  xfer += prot_->serializedFieldSize("minute", apache::thrift::protocol::T_BYTE, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::serializedSize<false>(*prot_, this->minute);
  xfer += prot_->serializedFieldSize("sec", apache::thrift::protocol::T_BYTE, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::serializedSize<false>(*prot_, this->sec);
  xfer += prot_->serializedFieldSize("microsec", apache::thrift::protocol::T_I32, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->microsec);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Time::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Time");
  xfer += prot_->writeFieldBegin("hour", apache::thrift::protocol::T_BYTE, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::write(*prot_, this->hour);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("minute", apache::thrift::protocol::T_BYTE, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::write(*prot_, this->minute);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("sec", apache::thrift::protocol::T_BYTE, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::write(*prot_, this->sec);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("microsec", apache::thrift::protocol::T_I32, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::write(*prot_, this->microsec);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void Time::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Time::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Time::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Time::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void Time::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Time::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Time::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Time::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // nebula::cpp2
namespace nebula { namespace cpp2 {

template <class Protocol_>
void DateTime::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_I16))) {
    goto _loop;
  }
_readField_year:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int16_t>::readWithContext(*iprot, this->year, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.year = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_BYTE))) {
    goto _loop;
  }
_readField_month:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::readWithContext(*iprot, this->month, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.month = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          3,
          apache::thrift::protocol::T_BYTE))) {
    goto _loop;
  }
_readField_day:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::readWithContext(*iprot, this->day, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.day = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          3,
          4,
          apache::thrift::protocol::T_BYTE))) {
    goto _loop;
  }
_readField_hour:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::readWithContext(*iprot, this->hour, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.hour = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          4,
          5,
          apache::thrift::protocol::T_BYTE))) {
    goto _loop;
  }
_readField_minute:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::readWithContext(*iprot, this->minute, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.minute = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          5,
          6,
          apache::thrift::protocol::T_BYTE))) {
    goto _loop;
  }
_readField_sec:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::readWithContext(*iprot, this->sec, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.sec = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          6,
          7,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_microsec:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::readWithContext(*iprot, this->microsec, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.microsec = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          7,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<DateTime>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I16))) {
        goto _readField_year;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_BYTE))) {
        goto _readField_month;
      } else {
        goto _skip;
      }
    }
    case 3:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_BYTE))) {
        goto _readField_day;
      } else {
        goto _skip;
      }
    }
    case 4:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_BYTE))) {
        goto _readField_hour;
      } else {
        goto _skip;
      }
    }
    case 5:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_BYTE))) {
        goto _readField_minute;
      } else {
        goto _skip;
      }
    }
    case 6:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_BYTE))) {
        goto _readField_sec;
      } else {
        goto _skip;
      }
    }
    case 7:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I32))) {
        goto _readField_microsec;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t DateTime::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("DateTime");
  xfer += prot_->serializedFieldSize("year", apache::thrift::protocol::T_I16, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int16_t>::serializedSize<false>(*prot_, this->year);
  xfer += prot_->serializedFieldSize("month", apache::thrift::protocol::T_BYTE, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::serializedSize<false>(*prot_, this->month);
  xfer += prot_->serializedFieldSize("day", apache::thrift::protocol::T_BYTE, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::serializedSize<false>(*prot_, this->day);
  xfer += prot_->serializedFieldSize("hour", apache::thrift::protocol::T_BYTE, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::serializedSize<false>(*prot_, this->hour);
  xfer += prot_->serializedFieldSize("minute", apache::thrift::protocol::T_BYTE, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::serializedSize<false>(*prot_, this->minute);
  xfer += prot_->serializedFieldSize("sec", apache::thrift::protocol::T_BYTE, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::serializedSize<false>(*prot_, this->sec);
  xfer += prot_->serializedFieldSize("microsec", apache::thrift::protocol::T_I32, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->microsec);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t DateTime::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("DateTime");
  xfer += prot_->serializedFieldSize("year", apache::thrift::protocol::T_I16, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int16_t>::serializedSize<false>(*prot_, this->year);
  xfer += prot_->serializedFieldSize("month", apache::thrift::protocol::T_BYTE, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::serializedSize<false>(*prot_, this->month);
  xfer += prot_->serializedFieldSize("day", apache::thrift::protocol::T_BYTE, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::serializedSize<false>(*prot_, this->day);
  xfer += prot_->serializedFieldSize("hour", apache::thrift::protocol::T_BYTE, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::serializedSize<false>(*prot_, this->hour);
  xfer += prot_->serializedFieldSize("minute", apache::thrift::protocol::T_BYTE, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::serializedSize<false>(*prot_, this->minute);
  xfer += prot_->serializedFieldSize("sec", apache::thrift::protocol::T_BYTE, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::serializedSize<false>(*prot_, this->sec);
  xfer += prot_->serializedFieldSize("microsec", apache::thrift::protocol::T_I32, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->microsec);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t DateTime::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("DateTime");
  xfer += prot_->writeFieldBegin("year", apache::thrift::protocol::T_I16, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int16_t>::write(*prot_, this->year);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("month", apache::thrift::protocol::T_BYTE, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::write(*prot_, this->month);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("day", apache::thrift::protocol::T_BYTE, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::write(*prot_, this->day);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("hour", apache::thrift::protocol::T_BYTE, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::write(*prot_, this->hour);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("minute", apache::thrift::protocol::T_BYTE, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::write(*prot_, this->minute);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("sec", apache::thrift::protocol::T_BYTE, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::write(*prot_, this->sec);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("microsec", apache::thrift::protocol::T_I32, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::write(*prot_, this->microsec);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void DateTime::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t DateTime::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t DateTime::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t DateTime::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void DateTime::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t DateTime::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t DateTime::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t DateTime::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // nebula::cpp2
namespace nebula { namespace cpp2 {

template <class Protocol_>
void Value::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;
  _readState.fieldId = 0;

  _readState.readStructBegin(iprot);

  _readState.readFieldBegin(iprot);
  if (_readState.atStop()) {
    this->__clear();
  } else {
    if (iprot->kUsesFieldNames()) {
      _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<Value>>();
    }
    switch (_readState.fieldId) {
      case 1:
      {
        if (_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I32)) {
          this->set_nVal();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration, nebula::NullType>::readWithContext(*iprot, this->mutable_nVal(), _readState);
        } else {
          _readState.skip(iprot);
        }
        break;
      }
      case 2:
      {
        if (_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_BOOL)) {
          this->set_bVal();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, bool>::readWithContext(*iprot, this->mutable_bVal(), _readState);
        } else {
          _readState.skip(iprot);
        }
        break;
      }
      case 3:
      {
        if (_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I64)) {
          this->set_iVal();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::readWithContext(*iprot, this->mutable_iVal(), _readState);
        } else {
          _readState.skip(iprot);
        }
        break;
      }
      case 4:
      {
        if (_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_DOUBLE)) {
          this->set_fVal();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::floating_point, double>::readWithContext(*iprot, this->mutable_fVal(), _readState);
        } else {
          _readState.skip(iprot);
        }
        break;
      }
      case 5:
      {
        if (_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRING)) {
          this->set_sVal();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::readWithContext(*iprot, this->mutable_sVal(), _readState);
        } else {
          _readState.skip(iprot);
        }
        break;
      }
      case 6:
      {
        if (_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRUCT)) {
          this->set_dVal();
          _readState.beforeSubobject(iprot);
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::Date>::readWithContext(*iprot, this->mutable_dVal(), _readState);
          _readState.afterSubobject(iprot);
        } else {
          _readState.skip(iprot);
        }
        break;
      }
      case 7:
      {
        if (_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRUCT)) {
          this->set_tVal();
          _readState.beforeSubobject(iprot);
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::Time>::readWithContext(*iprot, this->mutable_tVal(), _readState);
          _readState.afterSubobject(iprot);
        } else {
          _readState.skip(iprot);
        }
        break;
      }
      case 8:
      {
        if (_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRUCT)) {
          this->set_dtVal();
          _readState.beforeSubobject(iprot);
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::DateTime>::readWithContext(*iprot, this->mutable_dtVal(), _readState);
          _readState.afterSubobject(iprot);
        } else {
          _readState.skip(iprot);
        }
        break;
      }
      case 9:
      {
        if (_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRUCT)) {
          this->set_vVal();
          _readState.beforeSubobject(iprot);
          std::unique_ptr<nebula::Vertex> ptr = std::make_unique<nebula::Vertex>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::Vertex>::readWithContext(*iprot, *ptr, _readState);
          this->mutable_vVal() = std::move(ptr);
          _readState.afterSubobject(iprot);
        } else {
          _readState.skip(iprot);
        }
        break;
      }
      case 10:
      {
        if (_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRUCT)) {
          this->set_eVal();
          _readState.beforeSubobject(iprot);
          std::unique_ptr<nebula::Edge> ptr = std::make_unique<nebula::Edge>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::Edge>::readWithContext(*iprot, *ptr, _readState);
          this->mutable_eVal() = std::move(ptr);
          _readState.afterSubobject(iprot);
        } else {
          _readState.skip(iprot);
        }
        break;
      }
      case 11:
      {
        if (_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRUCT)) {
          this->set_pVal();
          _readState.beforeSubobject(iprot);
          std::unique_ptr<nebula::Path> ptr = std::make_unique<nebula::Path>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::Path>::readWithContext(*iprot, *ptr, _readState);
          this->mutable_pVal() = std::move(ptr);
          _readState.afterSubobject(iprot);
        } else {
          _readState.skip(iprot);
        }
        break;
      }
      case 12:
      {
        if (_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRUCT)) {
          this->set_lVal();
          _readState.beforeSubobject(iprot);
          std::unique_ptr<nebula::List> ptr = std::make_unique<nebula::List>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::List>::readWithContext(*iprot, *ptr, _readState);
          this->mutable_lVal() = std::move(ptr);
          _readState.afterSubobject(iprot);
        } else {
          _readState.skip(iprot);
        }
        break;
      }
      case 13:
      {
        if (_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRUCT)) {
          this->set_mVal();
          _readState.beforeSubobject(iprot);
          std::unique_ptr<nebula::Map> ptr = std::make_unique<nebula::Map>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::Map>::readWithContext(*iprot, *ptr, _readState);
          this->mutable_mVal() = std::move(ptr);
          _readState.afterSubobject(iprot);
        } else {
          _readState.skip(iprot);
        }
        break;
      }
      case 14:
      {
        if (_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRUCT)) {
          this->set_uVal();
          _readState.beforeSubobject(iprot);
          std::unique_ptr<nebula::Set> ptr = std::make_unique<nebula::Set>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::Set>::readWithContext(*iprot, *ptr, _readState);
          this->mutable_uVal() = std::move(ptr);
          _readState.afterSubobject(iprot);
        } else {
          _readState.skip(iprot);
        }
        break;
      }
      case 15:
      {
        if (_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRUCT)) {
          this->set_gVal();
          _readState.beforeSubobject(iprot);
          std::unique_ptr<nebula::DataSet> ptr = std::make_unique<nebula::DataSet>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::DataSet>::readWithContext(*iprot, *ptr, _readState);
          this->mutable_gVal() = std::move(ptr);
          _readState.afterSubobject(iprot);
        } else {
          _readState.skip(iprot);
        }
        break;
      }
      case 16:
      {
        if (_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRUCT)) {
          this->set_ggVal();
          _readState.beforeSubobject(iprot);
          std::unique_ptr<nebula::Geography> ptr = std::make_unique<nebula::Geography>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::Geography>::readWithContext(*iprot, *ptr, _readState);
          this->mutable_ggVal() = std::move(ptr);
          _readState.afterSubobject(iprot);
        } else {
          _readState.skip(iprot);
        }
        break;
      }
      default:
      {
        _readState.skip(iprot);
        break;
      }
    }
    _readState.readFieldEnd(iprot);
    _readState.readFieldBegin(iprot);
    if (UNLIKELY(!_readState.atStop())) {
      using apache::thrift::protocol::TProtocolException;
      TProtocolException::throwUnionMissingStop();
    }
  }
  _readState.readStructEnd(iprot);
}
template <class Protocol_>
uint32_t Value::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Value");
  switch(this->getType()) {
    case Value::Type::nVal:
    {
      xfer += prot_->serializedFieldSize("nVal", apache::thrift::protocol::T_I32, 1);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration, nebula::NullType>::serializedSize<false>(*prot_, this->get_nVal());
      break;
    }
    case Value::Type::bVal:
    {
      xfer += prot_->serializedFieldSize("bVal", apache::thrift::protocol::T_BOOL, 2);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, bool>::serializedSize<false>(*prot_, this->get_bVal());
      break;
    }
    case Value::Type::iVal:
    {
      xfer += prot_->serializedFieldSize("iVal", apache::thrift::protocol::T_I64, 3);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->get_iVal());
      break;
    }
    case Value::Type::fVal:
    {
      xfer += prot_->serializedFieldSize("fVal", apache::thrift::protocol::T_DOUBLE, 4);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::floating_point, double>::serializedSize<false>(*prot_, this->get_fVal());
      break;
    }
    case Value::Type::sVal:
    {
      xfer += prot_->serializedFieldSize("sVal", apache::thrift::protocol::T_STRING, 5);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::serializedSize<false>(*prot_, this->get_sVal());
      break;
    }
    case Value::Type::dVal:
    {
      xfer += prot_->serializedFieldSize("dVal", apache::thrift::protocol::T_STRUCT, 6);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::Date>::serializedSize<false>(*prot_, this->get_dVal());
      break;
    }
    case Value::Type::tVal:
    {
      xfer += prot_->serializedFieldSize("tVal", apache::thrift::protocol::T_STRUCT, 7);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::Time>::serializedSize<false>(*prot_, this->get_tVal());
      break;
    }
    case Value::Type::dtVal:
    {
      xfer += prot_->serializedFieldSize("dtVal", apache::thrift::protocol::T_STRUCT, 8);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::DateTime>::serializedSize<false>(*prot_, this->get_dtVal());
      break;
    }
    case Value::Type::vVal:
    {
      xfer += prot_->serializedFieldSize("vVal", apache::thrift::protocol::T_STRUCT, 9);
      if (this->get_vVal()) {
        xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::Vertex>::serializedSize<false>(*prot_, *this->get_vVal());
      }
      else {
        xfer += prot_->serializedStructSize("Vertex");
        xfer += prot_->serializedSizeStop();
      }
      break;
    }
    case Value::Type::eVal:
    {
      xfer += prot_->serializedFieldSize("eVal", apache::thrift::protocol::T_STRUCT, 10);
      if (this->get_eVal()) {
        xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::Edge>::serializedSize<false>(*prot_, *this->get_eVal());
      }
      else {
        xfer += prot_->serializedStructSize("Edge");
        xfer += prot_->serializedSizeStop();
      }
      break;
    }
    case Value::Type::pVal:
    {
      xfer += prot_->serializedFieldSize("pVal", apache::thrift::protocol::T_STRUCT, 11);
      if (this->get_pVal()) {
        xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::Path>::serializedSize<false>(*prot_, *this->get_pVal());
      }
      else {
        xfer += prot_->serializedStructSize("Path");
        xfer += prot_->serializedSizeStop();
      }
      break;
    }
    case Value::Type::lVal:
    {
      xfer += prot_->serializedFieldSize("lVal", apache::thrift::protocol::T_STRUCT, 12);
      if (this->get_lVal()) {
        xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::List>::serializedSize<false>(*prot_, *this->get_lVal());
      }
      else {
        xfer += prot_->serializedStructSize("NList");
        xfer += prot_->serializedSizeStop();
      }
      break;
    }
    case Value::Type::mVal:
    {
      xfer += prot_->serializedFieldSize("mVal", apache::thrift::protocol::T_STRUCT, 13);
      if (this->get_mVal()) {
        xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::Map>::serializedSize<false>(*prot_, *this->get_mVal());
      }
      else {
        xfer += prot_->serializedStructSize("NMap");
        xfer += prot_->serializedSizeStop();
      }
      break;
    }
    case Value::Type::uVal:
    {
      xfer += prot_->serializedFieldSize("uVal", apache::thrift::protocol::T_STRUCT, 14);
      if (this->get_uVal()) {
        xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::Set>::serializedSize<false>(*prot_, *this->get_uVal());
      }
      else {
        xfer += prot_->serializedStructSize("NSet");
        xfer += prot_->serializedSizeStop();
      }
      break;
    }
    case Value::Type::gVal:
    {
      xfer += prot_->serializedFieldSize("gVal", apache::thrift::protocol::T_STRUCT, 15);
      if (this->get_gVal()) {
        xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::DataSet>::serializedSize<false>(*prot_, *this->get_gVal());
      }
      else {
        xfer += prot_->serializedStructSize("DataSet");
        xfer += prot_->serializedSizeStop();
      }
      break;
    }
    case Value::Type::ggVal:
    {
      xfer += prot_->serializedFieldSize("ggVal", apache::thrift::protocol::T_STRUCT, 16);
      if (this->get_ggVal()) {
        xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::Geography>::serializedSize<false>(*prot_, *this->get_ggVal());
      }
      else {
        xfer += prot_->serializedStructSize("Geography");
        xfer += prot_->serializedSizeStop();
      }
      break;
    }
    case Value::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Value::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Value");
  switch(this->getType()) {
    case Value::Type::nVal:
    {
      xfer += prot_->serializedFieldSize("nVal", apache::thrift::protocol::T_I32, 1);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration, nebula::NullType>::serializedSize<false>(*prot_, this->get_nVal());
      break;
    }
    case Value::Type::bVal:
    {
      xfer += prot_->serializedFieldSize("bVal", apache::thrift::protocol::T_BOOL, 2);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, bool>::serializedSize<false>(*prot_, this->get_bVal());
      break;
    }
    case Value::Type::iVal:
    {
      xfer += prot_->serializedFieldSize("iVal", apache::thrift::protocol::T_I64, 3);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->get_iVal());
      break;
    }
    case Value::Type::fVal:
    {
      xfer += prot_->serializedFieldSize("fVal", apache::thrift::protocol::T_DOUBLE, 4);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::floating_point, double>::serializedSize<false>(*prot_, this->get_fVal());
      break;
    }
    case Value::Type::sVal:
    {
      xfer += prot_->serializedFieldSize("sVal", apache::thrift::protocol::T_STRING, 5);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::serializedSize<true>(*prot_, this->get_sVal());
      break;
    }
    case Value::Type::dVal:
    {
      xfer += prot_->serializedFieldSize("dVal", apache::thrift::protocol::T_STRUCT, 6);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::Date>::serializedSize<true>(*prot_, this->get_dVal());
      break;
    }
    case Value::Type::tVal:
    {
      xfer += prot_->serializedFieldSize("tVal", apache::thrift::protocol::T_STRUCT, 7);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::Time>::serializedSize<true>(*prot_, this->get_tVal());
      break;
    }
    case Value::Type::dtVal:
    {
      xfer += prot_->serializedFieldSize("dtVal", apache::thrift::protocol::T_STRUCT, 8);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::DateTime>::serializedSize<true>(*prot_, this->get_dtVal());
      break;
    }
    case Value::Type::vVal:
    {
      xfer += prot_->serializedFieldSize("vVal", apache::thrift::protocol::T_STRUCT, 9);
      if (this->get_vVal()) {
        xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::Vertex>::serializedSize<true>(*prot_, *this->get_vVal());
      }
      else {
        xfer += prot_->serializedStructSize("Vertex");
        xfer += prot_->serializedSizeStop();
      }
      break;
    }
    case Value::Type::eVal:
    {
      xfer += prot_->serializedFieldSize("eVal", apache::thrift::protocol::T_STRUCT, 10);
      if (this->get_eVal()) {
        xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::Edge>::serializedSize<true>(*prot_, *this->get_eVal());
      }
      else {
        xfer += prot_->serializedStructSize("Edge");
        xfer += prot_->serializedSizeStop();
      }
      break;
    }
    case Value::Type::pVal:
    {
      xfer += prot_->serializedFieldSize("pVal", apache::thrift::protocol::T_STRUCT, 11);
      if (this->get_pVal()) {
        xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::Path>::serializedSize<true>(*prot_, *this->get_pVal());
      }
      else {
        xfer += prot_->serializedStructSize("Path");
        xfer += prot_->serializedSizeStop();
      }
      break;
    }
    case Value::Type::lVal:
    {
      xfer += prot_->serializedFieldSize("lVal", apache::thrift::protocol::T_STRUCT, 12);
      if (this->get_lVal()) {
        xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::List>::serializedSize<true>(*prot_, *this->get_lVal());
      }
      else {
        xfer += prot_->serializedStructSize("NList");
        xfer += prot_->serializedSizeStop();
      }
      break;
    }
    case Value::Type::mVal:
    {
      xfer += prot_->serializedFieldSize("mVal", apache::thrift::protocol::T_STRUCT, 13);
      if (this->get_mVal()) {
        xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::Map>::serializedSize<true>(*prot_, *this->get_mVal());
      }
      else {
        xfer += prot_->serializedStructSize("NMap");
        xfer += prot_->serializedSizeStop();
      }
      break;
    }
    case Value::Type::uVal:
    {
      xfer += prot_->serializedFieldSize("uVal", apache::thrift::protocol::T_STRUCT, 14);
      if (this->get_uVal()) {
        xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::Set>::serializedSize<true>(*prot_, *this->get_uVal());
      }
      else {
        xfer += prot_->serializedStructSize("NSet");
        xfer += prot_->serializedSizeStop();
      }
      break;
    }
    case Value::Type::gVal:
    {
      xfer += prot_->serializedFieldSize("gVal", apache::thrift::protocol::T_STRUCT, 15);
      if (this->get_gVal()) {
        xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::DataSet>::serializedSize<true>(*prot_, *this->get_gVal());
      }
      else {
        xfer += prot_->serializedStructSize("DataSet");
        xfer += prot_->serializedSizeStop();
      }
      break;
    }
    case Value::Type::ggVal:
    {
      xfer += prot_->serializedFieldSize("ggVal", apache::thrift::protocol::T_STRUCT, 16);
      if (this->get_ggVal()) {
        xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::Geography>::serializedSize<true>(*prot_, *this->get_ggVal());
      }
      else {
        xfer += prot_->serializedStructSize("Geography");
        xfer += prot_->serializedSizeStop();
      }
      break;
    }
    case Value::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Value::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Value");
  switch(this->getType()) {
    case Value::Type::nVal:
    {
      xfer += prot_->writeFieldBegin("nVal", apache::thrift::protocol::T_I32, 1);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration, nebula::NullType>::write(*prot_, this->get_nVal());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case Value::Type::bVal:
    {
      xfer += prot_->writeFieldBegin("bVal", apache::thrift::protocol::T_BOOL, 2);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, bool>::write(*prot_, this->get_bVal());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case Value::Type::iVal:
    {
      xfer += prot_->writeFieldBegin("iVal", apache::thrift::protocol::T_I64, 3);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->get_iVal());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case Value::Type::fVal:
    {
      xfer += prot_->writeFieldBegin("fVal", apache::thrift::protocol::T_DOUBLE, 4);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::floating_point, double>::write(*prot_, this->get_fVal());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case Value::Type::sVal:
    {
      xfer += prot_->writeFieldBegin("sVal", apache::thrift::protocol::T_STRING, 5);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::write(*prot_, this->get_sVal());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case Value::Type::dVal:
    {
      xfer += prot_->writeFieldBegin("dVal", apache::thrift::protocol::T_STRUCT, 6);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::Date>::write(*prot_, this->get_dVal());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case Value::Type::tVal:
    {
      xfer += prot_->writeFieldBegin("tVal", apache::thrift::protocol::T_STRUCT, 7);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::Time>::write(*prot_, this->get_tVal());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case Value::Type::dtVal:
    {
      xfer += prot_->writeFieldBegin("dtVal", apache::thrift::protocol::T_STRUCT, 8);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::DateTime>::write(*prot_, this->get_dtVal());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case Value::Type::vVal:
    {
      xfer += prot_->writeFieldBegin("vVal", apache::thrift::protocol::T_STRUCT, 9);
      if (this->get_vVal()) {
        xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::Vertex>::write(*prot_, *this->get_vVal());
      }
      else {
        xfer += prot_->writeStructBegin("Vertex");
        xfer += prot_->writeStructEnd();
        xfer += prot_->writeFieldStop();
      }
      xfer += prot_->writeFieldEnd();
      break;
    }
    case Value::Type::eVal:
    {
      xfer += prot_->writeFieldBegin("eVal", apache::thrift::protocol::T_STRUCT, 10);
      if (this->get_eVal()) {
        xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::Edge>::write(*prot_, *this->get_eVal());
      }
      else {
        xfer += prot_->writeStructBegin("Edge");
        xfer += prot_->writeStructEnd();
        xfer += prot_->writeFieldStop();
      }
      xfer += prot_->writeFieldEnd();
      break;
    }
    case Value::Type::pVal:
    {
      xfer += prot_->writeFieldBegin("pVal", apache::thrift::protocol::T_STRUCT, 11);
      if (this->get_pVal()) {
        xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::Path>::write(*prot_, *this->get_pVal());
      }
      else {
        xfer += prot_->writeStructBegin("Path");
        xfer += prot_->writeStructEnd();
        xfer += prot_->writeFieldStop();
      }
      xfer += prot_->writeFieldEnd();
      break;
    }
    case Value::Type::lVal:
    {
      xfer += prot_->writeFieldBegin("lVal", apache::thrift::protocol::T_STRUCT, 12);
      if (this->get_lVal()) {
        xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::List>::write(*prot_, *this->get_lVal());
      }
      else {
        xfer += prot_->writeStructBegin("NList");
        xfer += prot_->writeStructEnd();
        xfer += prot_->writeFieldStop();
      }
      xfer += prot_->writeFieldEnd();
      break;
    }
    case Value::Type::mVal:
    {
      xfer += prot_->writeFieldBegin("mVal", apache::thrift::protocol::T_STRUCT, 13);
      if (this->get_mVal()) {
        xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::Map>::write(*prot_, *this->get_mVal());
      }
      else {
        xfer += prot_->writeStructBegin("NMap");
        xfer += prot_->writeStructEnd();
        xfer += prot_->writeFieldStop();
      }
      xfer += prot_->writeFieldEnd();
      break;
    }
    case Value::Type::uVal:
    {
      xfer += prot_->writeFieldBegin("uVal", apache::thrift::protocol::T_STRUCT, 14);
      if (this->get_uVal()) {
        xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::Set>::write(*prot_, *this->get_uVal());
      }
      else {
        xfer += prot_->writeStructBegin("NSet");
        xfer += prot_->writeStructEnd();
        xfer += prot_->writeFieldStop();
      }
      xfer += prot_->writeFieldEnd();
      break;
    }
    case Value::Type::gVal:
    {
      xfer += prot_->writeFieldBegin("gVal", apache::thrift::protocol::T_STRUCT, 15);
      if (this->get_gVal()) {
        xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::DataSet>::write(*prot_, *this->get_gVal());
      }
      else {
        xfer += prot_->writeStructBegin("DataSet");
        xfer += prot_->writeStructEnd();
        xfer += prot_->writeFieldStop();
      }
      xfer += prot_->writeFieldEnd();
      break;
    }
    case Value::Type::ggVal:
    {
      xfer += prot_->writeFieldBegin("ggVal", apache::thrift::protocol::T_STRUCT, 16);
      if (this->get_ggVal()) {
        xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::Geography>::write(*prot_, *this->get_ggVal());
      }
      else {
        xfer += prot_->writeStructBegin("Geography");
        xfer += prot_->writeStructEnd();
        xfer += prot_->writeFieldStop();
      }
      xfer += prot_->writeFieldEnd();
      break;
    }
    case Value::Type::__EMPTY__:;
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void Value::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Value::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Value::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Value::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void Value::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Value::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Value::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Value::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // nebula::cpp2
namespace nebula { namespace cpp2 {

template <class Protocol_>
void NList::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_values:
  {
    _readState.beforeSubobject(iprot);
    this->values = ::std::vector<nebula::Value>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::variant>, ::std::vector<nebula::Value>>::readWithContext(*iprot, this->values, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.values = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<NList>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_LIST))) {
        goto _readField_values;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t NList::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("NList");
  xfer += prot_->serializedFieldSize("values", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::variant>, ::std::vector<nebula::Value>>::serializedSize<false>(*prot_, this->values);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t NList::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("NList");
  xfer += prot_->serializedFieldSize("values", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::variant>, ::std::vector<nebula::Value>>::serializedSize<false>(*prot_, this->values);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t NList::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("NList");
  xfer += prot_->writeFieldBegin("values", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::variant>, ::std::vector<nebula::Value>>::write(*prot_, this->values);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void NList::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t NList::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t NList::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t NList::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void NList::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t NList::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t NList::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t NList::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // nebula::cpp2
namespace nebula { namespace cpp2 {

template <class Protocol_>
void NMap::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_kvs:
  {
    _readState.beforeSubobject(iprot);
    this->kvs = std::unordered_map<::std::string, nebula::Value>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::variant>, std::unordered_map<::std::string, nebula::Value>>::readWithContext(*iprot, this->kvs, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.kvs = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<NMap>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_kvs;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t NMap::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("NMap");
  xfer += prot_->serializedFieldSize("kvs", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::variant>, std::unordered_map<::std::string, nebula::Value>>::serializedSize<false>(*prot_, this->kvs);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t NMap::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("NMap");
  xfer += prot_->serializedFieldSize("kvs", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::variant>, std::unordered_map<::std::string, nebula::Value>>::serializedSize<false>(*prot_, this->kvs);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t NMap::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("NMap");
  xfer += prot_->writeFieldBegin("kvs", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::variant>, std::unordered_map<::std::string, nebula::Value>>::write(*prot_, this->kvs);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void NMap::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t NMap::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t NMap::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t NMap::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void NMap::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t NMap::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t NMap::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t NMap::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // nebula::cpp2
namespace nebula { namespace cpp2 {

template <class Protocol_>
void NSet::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_SET))) {
    goto _loop;
  }
_readField_values:
  {
    _readState.beforeSubobject(iprot);
    this->values = std::unordered_set<nebula::Value>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::variant>, std::unordered_set<nebula::Value>>::readWithContext(*iprot, this->values, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.values = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<NSet>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_SET))) {
        goto _readField_values;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t NSet::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("NSet");
  xfer += prot_->serializedFieldSize("values", apache::thrift::protocol::T_SET, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::variant>, std::unordered_set<nebula::Value>>::serializedSize<false>(*prot_, this->values);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t NSet::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("NSet");
  xfer += prot_->serializedFieldSize("values", apache::thrift::protocol::T_SET, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::variant>, std::unordered_set<nebula::Value>>::serializedSize<false>(*prot_, this->values);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t NSet::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("NSet");
  xfer += prot_->writeFieldBegin("values", apache::thrift::protocol::T_SET, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::variant>, std::unordered_set<nebula::Value>>::write(*prot_, this->values);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void NSet::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t NSet::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t NSet::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t NSet::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void NSet::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t NSet::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t NSet::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t NSet::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // nebula::cpp2
namespace nebula { namespace cpp2 {

template <class Protocol_>
void Row::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_values:
  {
    _readState.beforeSubobject(iprot);
    this->values = ::std::vector<nebula::Value>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::variant>, ::std::vector<nebula::Value>>::readWithContext(*iprot, this->values, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.values = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<Row>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_LIST))) {
        goto _readField_values;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t Row::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Row");
  xfer += prot_->serializedFieldSize("values", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::variant>, ::std::vector<nebula::Value>>::serializedSize<false>(*prot_, this->values);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Row::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Row");
  xfer += prot_->serializedFieldSize("values", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::variant>, ::std::vector<nebula::Value>>::serializedSize<false>(*prot_, this->values);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Row::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Row");
  xfer += prot_->writeFieldBegin("values", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::variant>, ::std::vector<nebula::Value>>::write(*prot_, this->values);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void Row::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Row::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Row::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Row::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void Row::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Row::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Row::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Row::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // nebula::cpp2
namespace nebula { namespace cpp2 {

template <class Protocol_>
void DataSet::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_column_names:
  {
    _readState.beforeSubobject(iprot);
    this->column_names = ::std::vector<::std::string>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, ::std::vector<::std::string>>::readWithContext(*iprot, this->column_names, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.column_names = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_rows:
  {
    _readState.beforeSubobject(iprot);
    this->rows = ::std::vector<nebula::Row>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector<nebula::Row>>::readWithContext(*iprot, this->rows, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.rows = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<DataSet>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_LIST))) {
        goto _readField_column_names;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_LIST))) {
        goto _readField_rows;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t DataSet::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("DataSet");
  xfer += prot_->serializedFieldSize("column_names", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, ::std::vector<::std::string>>::serializedSize<false>(*prot_, this->column_names);
  xfer += prot_->serializedFieldSize("rows", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector<nebula::Row>>::serializedSize<false>(*prot_, this->rows);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t DataSet::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("DataSet");
  xfer += prot_->serializedFieldSize("column_names", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, ::std::vector<::std::string>>::serializedSize<false>(*prot_, this->column_names);
  xfer += prot_->serializedFieldSize("rows", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector<nebula::Row>>::serializedSize<false>(*prot_, this->rows);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t DataSet::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("DataSet");
  xfer += prot_->writeFieldBegin("column_names", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, ::std::vector<::std::string>>::write(*prot_, this->column_names);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("rows", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector<nebula::Row>>::write(*prot_, this->rows);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void DataSet::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t DataSet::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t DataSet::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t DataSet::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void DataSet::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t DataSet::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t DataSet::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t DataSet::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // nebula::cpp2
namespace nebula { namespace cpp2 {

template <class Protocol_>
void Geography::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_wkb:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string, ::std::string>::readWithContext(*iprot, this->wkb, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.wkb = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<Geography>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRING))) {
        goto _readField_wkb;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t Geography::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Geography");
  xfer += prot_->serializedFieldSize("wkb", apache::thrift::protocol::T_STRING, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string, ::std::string>::serializedSize<false>(*prot_, this->wkb);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Geography::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Geography");
  xfer += prot_->serializedFieldSize("wkb", apache::thrift::protocol::T_STRING, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string, ::std::string>::serializedSize<false>(*prot_, this->wkb);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Geography::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Geography");
  xfer += prot_->writeFieldBegin("wkb", apache::thrift::protocol::T_STRING, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string, ::std::string>::write(*prot_, this->wkb);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void Geography::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Geography::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Geography::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Geography::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void Geography::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Geography::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Geography::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Geography::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // nebula::cpp2
namespace nebula { namespace cpp2 {

template <class Protocol_>
void Tag::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_name:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::readWithContext(*iprot, this->name, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.name = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_props:
  {
    _readState.beforeSubobject(iprot);
    this->props = std::unordered_map<::std::string, nebula::Value>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::variant>, std::unordered_map<::std::string, nebula::Value>>::readWithContext(*iprot, this->props, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.props = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<Tag>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRING))) {
        goto _readField_name;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_props;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t Tag::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Tag");
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_STRING, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::serializedSize<false>(*prot_, this->name);
  xfer += prot_->serializedFieldSize("props", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::variant>, std::unordered_map<::std::string, nebula::Value>>::serializedSize<false>(*prot_, this->props);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Tag::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Tag");
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_STRING, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::serializedSize<true>(*prot_, this->name);
  xfer += prot_->serializedFieldSize("props", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::variant>, std::unordered_map<::std::string, nebula::Value>>::serializedSize<false>(*prot_, this->props);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Tag::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Tag");
  xfer += prot_->writeFieldBegin("name", apache::thrift::protocol::T_STRING, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::write(*prot_, this->name);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("props", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::variant>, std::unordered_map<::std::string, nebula::Value>>::write(*prot_, this->props);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void Tag::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Tag::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Tag::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Tag::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void Tag::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Tag::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Tag::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Tag::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // nebula::cpp2
namespace nebula { namespace cpp2 {

template <class Protocol_>
void Vertex::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_vid:
  {
    _readState.beforeSubobject(iprot);
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::variant, nebula::Value>::readWithContext(*iprot, this->vid, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.vid = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_tags:
  {
    _readState.beforeSubobject(iprot);
    this->tags = ::std::vector<nebula::Tag>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector<nebula::Tag>>::readWithContext(*iprot, this->tags, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.tags = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<Vertex>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRUCT))) {
        goto _readField_vid;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_LIST))) {
        goto _readField_tags;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t Vertex::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Vertex");
  xfer += prot_->serializedFieldSize("vid", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::variant, nebula::Value>::serializedSize<false>(*prot_, this->vid);
  xfer += prot_->serializedFieldSize("tags", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector<nebula::Tag>>::serializedSize<false>(*prot_, this->tags);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Vertex::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Vertex");
  xfer += prot_->serializedFieldSize("vid", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::variant, nebula::Value>::serializedSize<true>(*prot_, this->vid);
  xfer += prot_->serializedFieldSize("tags", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector<nebula::Tag>>::serializedSize<false>(*prot_, this->tags);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Vertex::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Vertex");
  xfer += prot_->writeFieldBegin("vid", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::variant, nebula::Value>::write(*prot_, this->vid);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("tags", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector<nebula::Tag>>::write(*prot_, this->tags);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void Vertex::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Vertex::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Vertex::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Vertex::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void Vertex::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Vertex::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Vertex::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Vertex::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // nebula::cpp2
namespace nebula { namespace cpp2 {

template <class Protocol_>
void Edge::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_src:
  {
    _readState.beforeSubobject(iprot);
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::variant, nebula::Value>::readWithContext(*iprot, this->src, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.src = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_dst:
  {
    _readState.beforeSubobject(iprot);
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::variant, nebula::Value>::readWithContext(*iprot, this->dst, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.dst = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          3,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_type:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::nebula::cpp2::EdgeType>::readWithContext(*iprot, this->type, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.type = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          3,
          4,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_name:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::readWithContext(*iprot, this->name, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.name = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          4,
          5,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_ranking:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::nebula::cpp2::EdgeRanking>::readWithContext(*iprot, this->ranking, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.ranking = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          5,
          6,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_props:
  {
    _readState.beforeSubobject(iprot);
    this->props = std::unordered_map<::std::string, nebula::Value>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::variant>, std::unordered_map<::std::string, nebula::Value>>::readWithContext(*iprot, this->props, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.props = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          6,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<Edge>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRUCT))) {
        goto _readField_src;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRUCT))) {
        goto _readField_dst;
      } else {
        goto _skip;
      }
    }
    case 3:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I32))) {
        goto _readField_type;
      } else {
        goto _skip;
      }
    }
    case 4:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRING))) {
        goto _readField_name;
      } else {
        goto _skip;
      }
    }
    case 5:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I64))) {
        goto _readField_ranking;
      } else {
        goto _skip;
      }
    }
    case 6:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_props;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t Edge::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Edge");
  xfer += prot_->serializedFieldSize("src", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::variant, nebula::Value>::serializedSize<false>(*prot_, this->src);
  xfer += prot_->serializedFieldSize("dst", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::variant, nebula::Value>::serializedSize<false>(*prot_, this->dst);
  xfer += prot_->serializedFieldSize("type", apache::thrift::protocol::T_I32, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::nebula::cpp2::EdgeType>::serializedSize<false>(*prot_, this->type);
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_STRING, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::serializedSize<false>(*prot_, this->name);
  xfer += prot_->serializedFieldSize("ranking", apache::thrift::protocol::T_I64, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::nebula::cpp2::EdgeRanking>::serializedSize<false>(*prot_, this->ranking);
  xfer += prot_->serializedFieldSize("props", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::variant>, std::unordered_map<::std::string, nebula::Value>>::serializedSize<false>(*prot_, this->props);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Edge::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Edge");
  xfer += prot_->serializedFieldSize("src", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::variant, nebula::Value>::serializedSize<true>(*prot_, this->src);
  xfer += prot_->serializedFieldSize("dst", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::variant, nebula::Value>::serializedSize<true>(*prot_, this->dst);
  xfer += prot_->serializedFieldSize("type", apache::thrift::protocol::T_I32, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::nebula::cpp2::EdgeType>::serializedSize<false>(*prot_, this->type);
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_STRING, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::serializedSize<true>(*prot_, this->name);
  xfer += prot_->serializedFieldSize("ranking", apache::thrift::protocol::T_I64, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::nebula::cpp2::EdgeRanking>::serializedSize<false>(*prot_, this->ranking);
  xfer += prot_->serializedFieldSize("props", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::variant>, std::unordered_map<::std::string, nebula::Value>>::serializedSize<false>(*prot_, this->props);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Edge::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Edge");
  xfer += prot_->writeFieldBegin("src", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::variant, nebula::Value>::write(*prot_, this->src);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("dst", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::variant, nebula::Value>::write(*prot_, this->dst);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("type", apache::thrift::protocol::T_I32, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::nebula::cpp2::EdgeType>::write(*prot_, this->type);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("name", apache::thrift::protocol::T_STRING, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::write(*prot_, this->name);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("ranking", apache::thrift::protocol::T_I64, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::nebula::cpp2::EdgeRanking>::write(*prot_, this->ranking);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("props", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::variant>, std::unordered_map<::std::string, nebula::Value>>::write(*prot_, this->props);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void Edge::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Edge::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Edge::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Edge::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void Edge::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Edge::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Edge::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Edge::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // nebula::cpp2
namespace nebula { namespace cpp2 {

template <class Protocol_>
void Step::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_dst:
  {
    _readState.beforeSubobject(iprot);
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::Vertex>::readWithContext(*iprot, this->dst, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.dst = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_type:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::nebula::cpp2::EdgeType>::readWithContext(*iprot, this->type, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.type = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          3,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_name:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::readWithContext(*iprot, this->name, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.name = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          3,
          4,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_ranking:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::nebula::cpp2::EdgeRanking>::readWithContext(*iprot, this->ranking, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.ranking = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          4,
          5,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_props:
  {
    _readState.beforeSubobject(iprot);
    this->props = std::unordered_map<::std::string, nebula::Value>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::variant>, std::unordered_map<::std::string, nebula::Value>>::readWithContext(*iprot, this->props, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.props = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          5,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<Step>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRUCT))) {
        goto _readField_dst;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I32))) {
        goto _readField_type;
      } else {
        goto _skip;
      }
    }
    case 3:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRING))) {
        goto _readField_name;
      } else {
        goto _skip;
      }
    }
    case 4:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I64))) {
        goto _readField_ranking;
      } else {
        goto _skip;
      }
    }
    case 5:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_props;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t Step::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Step");
  xfer += prot_->serializedFieldSize("dst", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::Vertex>::serializedSize<false>(*prot_, this->dst);
  xfer += prot_->serializedFieldSize("type", apache::thrift::protocol::T_I32, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::nebula::cpp2::EdgeType>::serializedSize<false>(*prot_, this->type);
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_STRING, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::serializedSize<false>(*prot_, this->name);
  xfer += prot_->serializedFieldSize("ranking", apache::thrift::protocol::T_I64, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::nebula::cpp2::EdgeRanking>::serializedSize<false>(*prot_, this->ranking);
  xfer += prot_->serializedFieldSize("props", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::variant>, std::unordered_map<::std::string, nebula::Value>>::serializedSize<false>(*prot_, this->props);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Step::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Step");
  xfer += prot_->serializedFieldSize("dst", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::Vertex>::serializedSize<true>(*prot_, this->dst);
  xfer += prot_->serializedFieldSize("type", apache::thrift::protocol::T_I32, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::nebula::cpp2::EdgeType>::serializedSize<false>(*prot_, this->type);
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_STRING, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::serializedSize<true>(*prot_, this->name);
  xfer += prot_->serializedFieldSize("ranking", apache::thrift::protocol::T_I64, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::nebula::cpp2::EdgeRanking>::serializedSize<false>(*prot_, this->ranking);
  xfer += prot_->serializedFieldSize("props", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::variant>, std::unordered_map<::std::string, nebula::Value>>::serializedSize<false>(*prot_, this->props);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Step::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Step");
  xfer += prot_->writeFieldBegin("dst", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::Vertex>::write(*prot_, this->dst);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("type", apache::thrift::protocol::T_I32, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::nebula::cpp2::EdgeType>::write(*prot_, this->type);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("name", apache::thrift::protocol::T_STRING, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::write(*prot_, this->name);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("ranking", apache::thrift::protocol::T_I64, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::nebula::cpp2::EdgeRanking>::write(*prot_, this->ranking);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("props", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::variant>, std::unordered_map<::std::string, nebula::Value>>::write(*prot_, this->props);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void Step::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Step::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Step::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Step::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void Step::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Step::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Step::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Step::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // nebula::cpp2
namespace nebula { namespace cpp2 {

template <class Protocol_>
void Path::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_src:
  {
    _readState.beforeSubobject(iprot);
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::Vertex>::readWithContext(*iprot, this->src, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.src = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_steps:
  {
    _readState.beforeSubobject(iprot);
    this->steps = ::std::vector<nebula::Step>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector<nebula::Step>>::readWithContext(*iprot, this->steps, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.steps = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<Path>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRUCT))) {
        goto _readField_src;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_LIST))) {
        goto _readField_steps;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t Path::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Path");
  xfer += prot_->serializedFieldSize("src", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::Vertex>::serializedSize<false>(*prot_, this->src);
  xfer += prot_->serializedFieldSize("steps", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector<nebula::Step>>::serializedSize<false>(*prot_, this->steps);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Path::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Path");
  xfer += prot_->serializedFieldSize("src", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::Vertex>::serializedSize<true>(*prot_, this->src);
  xfer += prot_->serializedFieldSize("steps", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector<nebula::Step>>::serializedSize<false>(*prot_, this->steps);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Path::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Path");
  xfer += prot_->writeFieldBegin("src", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::Vertex>::write(*prot_, this->src);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("steps", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector<nebula::Step>>::write(*prot_, this->steps);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void Path::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Path::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Path::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Path::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void Path::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Path::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Path::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Path::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // nebula::cpp2
namespace nebula { namespace cpp2 {

template <class Protocol_>
void HostAddr::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_host:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string, ::std::string>::readWithContext(*iprot, this->host, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.host = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_port:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::nebula::cpp2::Port>::readWithContext(*iprot, this->port, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.port = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<HostAddr>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRING))) {
        goto _readField_host;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I32))) {
        goto _readField_port;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t HostAddr::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("HostAddr");
  xfer += prot_->serializedFieldSize("host", apache::thrift::protocol::T_STRING, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string, ::std::string>::serializedSize<false>(*prot_, this->host);
  xfer += prot_->serializedFieldSize("port", apache::thrift::protocol::T_I32, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::nebula::cpp2::Port>::serializedSize<false>(*prot_, this->port);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t HostAddr::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("HostAddr");
  xfer += prot_->serializedFieldSize("host", apache::thrift::protocol::T_STRING, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string, ::std::string>::serializedSize<false>(*prot_, this->host);
  xfer += prot_->serializedFieldSize("port", apache::thrift::protocol::T_I32, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::nebula::cpp2::Port>::serializedSize<false>(*prot_, this->port);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t HostAddr::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("HostAddr");
  xfer += prot_->writeFieldBegin("host", apache::thrift::protocol::T_STRING, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string, ::std::string>::write(*prot_, this->host);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("port", apache::thrift::protocol::T_I32, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::nebula::cpp2::Port>::write(*prot_, this->port);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void HostAddr::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t HostAddr::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t HostAddr::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t HostAddr::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void HostAddr::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t HostAddr::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t HostAddr::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t HostAddr::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // nebula::cpp2
namespace nebula { namespace cpp2 {

template <class Protocol_>
void KeyValue::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_key:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::readWithContext(*iprot, this->key, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.key = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_value:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::readWithContext(*iprot, this->value, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.value = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<KeyValue>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRING))) {
        goto _readField_key;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRING))) {
        goto _readField_value;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t KeyValue::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("KeyValue");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::serializedSize<false>(*prot_, this->key);
  xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_STRING, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::serializedSize<false>(*prot_, this->value);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t KeyValue::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("KeyValue");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::serializedSize<true>(*prot_, this->key);
  xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_STRING, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::serializedSize<true>(*prot_, this->value);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t KeyValue::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("KeyValue");
  xfer += prot_->writeFieldBegin("key", apache::thrift::protocol::T_STRING, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::write(*prot_, this->key);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("value", apache::thrift::protocol::T_STRING, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::write(*prot_, this->value);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void KeyValue::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t KeyValue::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t KeyValue::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t KeyValue::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void KeyValue::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t KeyValue::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t KeyValue::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t KeyValue::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // nebula::cpp2
namespace nebula { namespace cpp2 {

template <class Protocol_>
void LogInfo::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_log_id:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::nebula::cpp2::LogID>::readWithContext(*iprot, this->log_id, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.log_id = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_term_id:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::nebula::cpp2::TermID>::readWithContext(*iprot, this->term_id, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.term_id = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<LogInfo>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I64))) {
        goto _readField_log_id;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I64))) {
        goto _readField_term_id;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t LogInfo::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("LogInfo");
  xfer += prot_->serializedFieldSize("log_id", apache::thrift::protocol::T_I64, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::nebula::cpp2::LogID>::serializedSize<false>(*prot_, this->log_id);
  xfer += prot_->serializedFieldSize("term_id", apache::thrift::protocol::T_I64, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::nebula::cpp2::TermID>::serializedSize<false>(*prot_, this->term_id);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t LogInfo::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("LogInfo");
  xfer += prot_->serializedFieldSize("log_id", apache::thrift::protocol::T_I64, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::nebula::cpp2::LogID>::serializedSize<false>(*prot_, this->log_id);
  xfer += prot_->serializedFieldSize("term_id", apache::thrift::protocol::T_I64, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::nebula::cpp2::TermID>::serializedSize<false>(*prot_, this->term_id);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t LogInfo::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("LogInfo");
  xfer += prot_->writeFieldBegin("log_id", apache::thrift::protocol::T_I64, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::nebula::cpp2::LogID>::write(*prot_, this->log_id);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("term_id", apache::thrift::protocol::T_I64, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::nebula::cpp2::TermID>::write(*prot_, this->term_id);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void LogInfo::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t LogInfo::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t LogInfo::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t LogInfo::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void LogInfo::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t LogInfo::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t LogInfo::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t LogInfo::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // nebula::cpp2
namespace nebula { namespace cpp2 {

template <class Protocol_>
void DirInfo::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_root:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::readWithContext(*iprot, this->root, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.root = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_data:
  {
    _readState.beforeSubobject(iprot);
    this->data = ::std::vector<::std::string>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, ::std::vector<::std::string>>::readWithContext(*iprot, this->data, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.data = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<DirInfo>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRING))) {
        goto _readField_root;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_LIST))) {
        goto _readField_data;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t DirInfo::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("DirInfo");
  xfer += prot_->serializedFieldSize("root", apache::thrift::protocol::T_STRING, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::serializedSize<false>(*prot_, this->root);
  xfer += prot_->serializedFieldSize("data", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, ::std::vector<::std::string>>::serializedSize<false>(*prot_, this->data);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t DirInfo::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("DirInfo");
  xfer += prot_->serializedFieldSize("root", apache::thrift::protocol::T_STRING, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::serializedSize<true>(*prot_, this->root);
  xfer += prot_->serializedFieldSize("data", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, ::std::vector<::std::string>>::serializedSize<false>(*prot_, this->data);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t DirInfo::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("DirInfo");
  xfer += prot_->writeFieldBegin("root", apache::thrift::protocol::T_STRING, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::write(*prot_, this->root);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("data", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, ::std::vector<::std::string>>::write(*prot_, this->data);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void DirInfo::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t DirInfo::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t DirInfo::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t DirInfo::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void DirInfo::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t DirInfo::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t DirInfo::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t DirInfo::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // nebula::cpp2
namespace nebula { namespace cpp2 {

template <class Protocol_>
void NodeInfo::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_host:
  {
    _readState.beforeSubobject(iprot);
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::HostAddr>::readWithContext(*iprot, this->host, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.host = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_dir:
  {
    _readState.beforeSubobject(iprot);
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure,  ::nebula::cpp2::DirInfo>::readWithContext(*iprot, this->dir, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.dir = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<NodeInfo>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRUCT))) {
        goto _readField_host;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRUCT))) {
        goto _readField_dir;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t NodeInfo::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("NodeInfo");
  xfer += prot_->serializedFieldSize("host", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::HostAddr>::serializedSize<false>(*prot_, this->host);
  xfer += prot_->serializedFieldSize("dir", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure,  ::nebula::cpp2::DirInfo>::serializedSize<false>(*prot_, this->dir);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t NodeInfo::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("NodeInfo");
  xfer += prot_->serializedFieldSize("host", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::HostAddr>::serializedSize<true>(*prot_, this->host);
  xfer += prot_->serializedFieldSize("dir", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure,  ::nebula::cpp2::DirInfo>::serializedSize<true>(*prot_, this->dir);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t NodeInfo::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("NodeInfo");
  xfer += prot_->writeFieldBegin("host", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure, nebula::HostAddr>::write(*prot_, this->host);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("dir", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure,  ::nebula::cpp2::DirInfo>::write(*prot_, this->dir);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void NodeInfo::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t NodeInfo::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t NodeInfo::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t NodeInfo::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void NodeInfo::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t NodeInfo::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t NodeInfo::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t NodeInfo::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // nebula::cpp2
namespace nebula { namespace cpp2 {

template <class Protocol_>
void PartitionBackupInfo::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_info:
  {
    _readState.beforeSubobject(iprot);
    this->info = std::unordered_map< ::nebula::cpp2::PartitionID,  ::nebula::cpp2::LogInfo>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::unordered_map< ::nebula::cpp2::PartitionID,  ::nebula::cpp2::LogInfo>>::readWithContext(*iprot, this->info, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.info = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<PartitionBackupInfo>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_info;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t PartitionBackupInfo::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("PartitionBackupInfo");
  xfer += prot_->serializedFieldSize("info", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::unordered_map< ::nebula::cpp2::PartitionID,  ::nebula::cpp2::LogInfo>>::serializedSize<false>(*prot_, this->info);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t PartitionBackupInfo::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("PartitionBackupInfo");
  xfer += prot_->serializedFieldSize("info", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::unordered_map< ::nebula::cpp2::PartitionID,  ::nebula::cpp2::LogInfo>>::serializedSize<false>(*prot_, this->info);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t PartitionBackupInfo::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("PartitionBackupInfo");
  xfer += prot_->writeFieldBegin("info", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::unordered_map< ::nebula::cpp2::PartitionID,  ::nebula::cpp2::LogInfo>>::write(*prot_, this->info);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void PartitionBackupInfo::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t PartitionBackupInfo::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t PartitionBackupInfo::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t PartitionBackupInfo::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void PartitionBackupInfo::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t PartitionBackupInfo::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t PartitionBackupInfo::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t PartitionBackupInfo::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // nebula::cpp2
namespace nebula { namespace cpp2 {

template <class Protocol_>
void CheckpointInfo::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_partition_info:
  {
    _readState.beforeSubobject(iprot);
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure,  ::nebula::cpp2::PartitionBackupInfo>::readWithContext(*iprot, this->partition_info, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.partition_info = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_path:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::readWithContext(*iprot, this->path, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.path = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<CheckpointInfo>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRUCT))) {
        goto _readField_partition_info;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRING))) {
        goto _readField_path;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t CheckpointInfo::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("CheckpointInfo");
  xfer += prot_->serializedFieldSize("partition_info", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure,  ::nebula::cpp2::PartitionBackupInfo>::serializedSize<false>(*prot_, this->partition_info);
  xfer += prot_->serializedFieldSize("path", apache::thrift::protocol::T_STRING, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::serializedSize<false>(*prot_, this->path);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t CheckpointInfo::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("CheckpointInfo");
  xfer += prot_->serializedFieldSize("partition_info", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure,  ::nebula::cpp2::PartitionBackupInfo>::serializedSize<true>(*prot_, this->partition_info);
  xfer += prot_->serializedFieldSize("path", apache::thrift::protocol::T_STRING, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::serializedSize<true>(*prot_, this->path);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t CheckpointInfo::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("CheckpointInfo");
  xfer += prot_->writeFieldBegin("partition_info", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::structure,  ::nebula::cpp2::PartitionBackupInfo>::write(*prot_, this->partition_info);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("path", apache::thrift::protocol::T_STRING, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::write(*prot_, this->path);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void CheckpointInfo::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t CheckpointInfo::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t CheckpointInfo::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t CheckpointInfo::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void CheckpointInfo::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t CheckpointInfo::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t CheckpointInfo::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t CheckpointInfo::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}} // nebula::cpp2
